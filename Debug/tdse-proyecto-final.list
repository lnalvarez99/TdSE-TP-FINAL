
tdse-proyecto-final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  08006424  08006424  00007424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af0  08006af0  000080a4  2**0
                  CONTENTS
  4 .ARM          00000000  08006af0  08006af0  000080a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006af0  08006af0  000080a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af0  08006af0  00007af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006af4  08006af4  00007af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08006af8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200000a4  08006b9c  000080a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08006b9c  000084e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb93  00000000  00000000  000080cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312c  00000000  00000000  00014c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00017d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085c  00000000  00000000  000188d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001affe  00000000  00000000  0001912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001375f  00000000  00000000  0003412a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bcc1  00000000  00000000  00047889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d354a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003380  00000000  00000000  000d3590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d6910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a4 	.word	0x200000a4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800640c 	.word	0x0800640c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a8 	.word	0x200000a8
 800014c:	0800640c 	.word	0x0800640c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000930:	f000 fae4 	bl	8000efc <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f002 fc9e 	bl	8003274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f80d 	bl	8000956 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 f8f8 	bl	8000b30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000940:	f000 f8d8 	bl	8000af4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000944:	f000 f8ac 	bl	8000aa0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000948:	f000 f85a 	bl	8000a00 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 800094c:	f000 fb82 	bl	8001054 <app_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  app_update();
 8000950:	f000 fc36 	bl	80011c0 <app_update>
 8000954:	e7fc      	b.n	8000950 <main+0x24>

08000956 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b094      	sub	sp, #80	@ 0x50
 800095a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000960:	2228      	movs	r2, #40	@ 0x28
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f004 fe20 	bl	80055aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	2301      	movs	r3, #1
 800098c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098e:	2310      	movs	r3, #16
 8000990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000996:	2300      	movs	r3, #0
 8000998:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800099a:	2300      	movs	r3, #0
 800099c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 fe56 	bl	8004654 <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009ae:	f000 f975 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 f8c2 	bl	8004b58 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009da:	f000 f95f 	bl	8000c9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009de:	2302      	movs	r3, #2
 80009e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 fa43 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009f4:	f000 f952 	bl	8000c9c <Error_Handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	3750      	adds	r7, #80	@ 0x50
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a12:	4a22      	ldr	r2, [pc, #136]	@ (8000a9c <MX_ADC1_Init+0x9c>)
 8000a14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a16:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a2c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3e:	4816      	ldr	r0, [pc, #88]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a40:	f002 fc9e 	bl	8003380 <HAL_ADC_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000a4a:	f000 f927 	bl	8000c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000a56:	2304      	movs	r3, #4
 8000a58:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a60:	f002 ff1e 	bl	80038a0 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 f917 	bl	8000c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a76:	2307      	movs	r3, #7
 8000a78:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <MX_ADC1_Init+0x98>)
 8000a80:	f002 ff0e 	bl	80038a0 <HAL_ADC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a8a:	f000 f907 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000c0 	.word	0x200000c0
 8000a9c:	40012400 	.word	0x40012400

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f004 fa82 	bl	8004fe0 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f8db 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000134 	.word	0x20000134
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_DMA_Init+0x38>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a0b      	ldr	r2, [pc, #44]	@ (8000b2c <MX_DMA_Init+0x38>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_DMA_Init+0x38>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	200b      	movs	r0, #11
 8000b18:	f003 f99b 	bl	8003e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b1c:	200b      	movs	r0, #11
 8000b1e:	f003 f9b4 	bl	8003e8a <HAL_NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b50      	ldr	r3, [pc, #320]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a4f      	ldr	r2, [pc, #316]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b4d      	ldr	r3, [pc, #308]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a49      	ldr	r2, [pc, #292]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b62:	f043 0320 	orr.w	r3, r3, #32
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b47      	ldr	r3, [pc, #284]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b44      	ldr	r3, [pc, #272]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a43      	ldr	r2, [pc, #268]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b41      	ldr	r3, [pc, #260]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a3d      	ldr	r2, [pc, #244]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b3b      	ldr	r3, [pc, #236]	@ (8000c88 <MX_GPIO_Init+0x158>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f240 71c2 	movw	r1, #1986	@ 0x7c2
 8000baa:	4838      	ldr	r0, [pc, #224]	@ (8000c8c <MX_GPIO_Init+0x15c>)
 8000bac:	f003 fd17 	bl	80045de <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|LED_SYSCTRL_DIS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb6:	4836      	ldr	r0, [pc, #216]	@ (8000c90 <MX_GPIO_Init+0x160>)
 8000bb8:	f003 fd11 	bl	80045de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_MIN_VEL_Pin|LED_SYSCTRL_ACT_Pin|GPIO_PIN_6|LED_MAX_VEL_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000bc2:	4834      	ldr	r0, [pc, #208]	@ (8000c94 <MX_GPIO_Init+0x164>)
 8000bc4:	f003 fd0b 	bl	80045de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	4b32      	ldr	r3, [pc, #200]	@ (8000c98 <MX_GPIO_Init+0x168>)
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	4619      	mov	r1, r3
 8000bdc:	482c      	ldr	r0, [pc, #176]	@ (8000c90 <MX_GPIO_Init+0x160>)
 8000bde:	f003 fb63 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INGRESO_Pin */
  GPIO_InitStruct.Pin = BTN_INGRESO_Pin;
 8000be2:	2301      	movs	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_INGRESO_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4825      	ldr	r0, [pc, #148]	@ (8000c8c <MX_GPIO_Init+0x15c>)
 8000bf6:	f003 fb57 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin PA6 PA7 PA8
                           PA9 LED_SYSCTRL_DIS_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000bfa:	f240 73c2 	movw	r3, #1986	@ 0x7c2
 8000bfe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9|LED_SYSCTRL_DIS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	481e      	ldr	r0, [pc, #120]	@ (8000c8c <MX_GPIO_Init+0x15c>)
 8000c14:	f003 fb48 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_EGRESO_Pin BTN_ENTER_Pin BTN_NEXT_Pin BTN_ON_Pin
                           SWITCH_BARINF_Pin SWITCH_OFF_Pin */
  GPIO_InitStruct.Pin = BTN_EGRESO_Pin|BTN_ENTER_Pin|BTN_NEXT_Pin|BTN_ON_Pin
 8000c18:	f647 4302 	movw	r3, #31746	@ 0x7c02
 8000c1c:	613b      	str	r3, [r7, #16]
                          |SWITCH_BARINF_Pin|SWITCH_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4819      	ldr	r0, [pc, #100]	@ (8000c94 <MX_GPIO_Init+0x164>)
 8000c2e:	f003 fb3b 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4811      	ldr	r0, [pc, #68]	@ (8000c90 <MX_GPIO_Init+0x160>)
 8000c4c:	f003 fb2c 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MIN_VEL_Pin LED_SYSCTRL_ACT_Pin PB6 LED_MAX_VEL_Pin */
  GPIO_InitStruct.Pin = LED_MIN_VEL_Pin|LED_SYSCTRL_ACT_Pin|GPIO_PIN_6|LED_MAX_VEL_Pin;
 8000c50:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	480a      	ldr	r0, [pc, #40]	@ (8000c94 <MX_GPIO_Init+0x164>)
 8000c6a:	f003 fb1d 	bl	80042a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2028      	movs	r0, #40	@ 0x28
 8000c74:	f003 f8ed 	bl	8003e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c78:	2028      	movs	r0, #40	@ 0x28
 8000c7a:	f003 f906 	bl	8003e8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7e:	bf00      	nop
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	10110000 	.word	0x10110000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_MspInit+0x60>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_MspInit+0x60>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000

08000d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd8 <HAL_ADC_MspInit+0xcc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d151      	bne.n	8000dd0 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a2a      	ldr	r2, [pc, #168]	@ (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a24      	ldr	r2, [pc, #144]	@ (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d60:	2303      	movs	r3, #3
 8000d62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481d      	ldr	r0, [pc, #116]	@ (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000d6c:	f003 fa9c 	bl	80042a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d72:	4a1d      	ldr	r2, [pc, #116]	@ (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000d74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d84:	2280      	movs	r2, #128	@ 0x80
 8000d86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000da4:	480f      	ldr	r0, [pc, #60]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000da6:	f003 f891 	bl	8003ecc <HAL_DMA_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000db0:	f7ff ff74 	bl	8000c9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000db8:	621a      	str	r2, [r3, #32]
 8000dba:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	2012      	movs	r0, #18
 8000dc6:	f003 f844 	bl	8003e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dca:	2012      	movs	r0, #18
 8000dcc:	f003 f85d 	bl	8003e8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40012400 	.word	0x40012400
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	200000f0 	.word	0x200000f0
 8000de8:	40020008 	.word	0x40020008

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a15      	ldr	r2, [pc, #84]	@ (8000e5c <HAL_UART_MspInit+0x70>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d123      	bne.n	8000e54 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	4a13      	ldr	r2, [pc, #76]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e16:	61d3      	str	r3, [r2, #28]
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_UART_MspInit+0x78>)
 8000e50:	f003 fa2a 	bl	80042a8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010800 	.word	0x40010800

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f002 fa22 	bl	8003300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000ebc:	f002 ffff 	bl	8003ebe <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <DMA1_Channel1_IRQHandler+0x10>)
 8000eca:	f003 f8b9 	bl	8004040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000f0 	.word	0x200000f0

08000ed8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <ADC1_2_IRQHandler+0x10>)
 8000ede:	f002 fc05 	bl	80036ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000c0 	.word	0x200000c0

08000eec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ef0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ef4:	f003 fb8c 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
  }

  return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e009      	b.n	8000f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf1      	blt.n	8000f54 <_write+0x12>
  }
  return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_close>:

int _close(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa0:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <_isatty>:

int _isatty(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
	...

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f004 fb1c 	bl	8005648 <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20005000 	.word	0x20005000
 800103c:	00000400 	.word	0x00000400
 8001040:	2000017c 	.word	0x2000017c
 8001044:	200004e0 	.word	0x200004e0

08001048 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af02      	add	r7, sp, #8
	uint32_t index;


	LOGGER_LOG("\r\n");
 800105a:	b672      	cpsid	i
 800105c:	4b4a      	ldr	r3, [pc, #296]	@ (8001188 <app_init+0x134>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a4a      	ldr	r2, [pc, #296]	@ (800118c <app_init+0x138>)
 8001062:	213f      	movs	r1, #63	@ 0x3f
 8001064:	4618      	mov	r0, r3
 8001066:	f004 fa29 	bl	80054bc <sniprintf>
 800106a:	4603      	mov	r3, r0
 800106c:	4a48      	ldr	r2, [pc, #288]	@ (8001190 <app_init+0x13c>)
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b45      	ldr	r3, [pc, #276]	@ (8001188 <app_init+0x134>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fc7b 	bl	8001970 <logger_log_print_>
 800107a:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 800107c:	b672      	cpsid	i
 800107e:	4b42      	ldr	r3, [pc, #264]	@ (8001188 <app_init+0x134>)
 8001080:	681c      	ldr	r4, [r3, #0]
 8001082:	f002 f94f 	bl	8003324 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	4b42      	ldr	r3, [pc, #264]	@ (8001194 <app_init+0x140>)
 800108c:	4a42      	ldr	r2, [pc, #264]	@ (8001198 <app_init+0x144>)
 800108e:	213f      	movs	r1, #63	@ 0x3f
 8001090:	4620      	mov	r0, r4
 8001092:	f004 fa13 	bl	80054bc <sniprintf>
 8001096:	4603      	mov	r3, r0
 8001098:	4a3d      	ldr	r2, [pc, #244]	@ (8001190 <app_init+0x13c>)
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <app_init+0x134>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fc65 	bl	8001970 <logger_log_print_>
 80010a6:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 80010a8:	b672      	cpsid	i
 80010aa:	4b37      	ldr	r3, [pc, #220]	@ (8001188 <app_init+0x134>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a3b      	ldr	r2, [pc, #236]	@ (800119c <app_init+0x148>)
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	213f      	movs	r1, #63	@ 0x3f
 80010b4:	4618      	mov	r0, r3
 80010b6:	f004 fa01 	bl	80054bc <sniprintf>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a34      	ldr	r2, [pc, #208]	@ (8001190 <app_init+0x13c>)
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <app_init+0x134>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fc53 	bl	8001970 <logger_log_print_>
 80010ca:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 80010cc:	b672      	cpsid	i
 80010ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <app_init+0x134>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a33      	ldr	r2, [pc, #204]	@ (80011a0 <app_init+0x14c>)
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	213f      	movs	r1, #63	@ 0x3f
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 f9ef 	bl	80054bc <sniprintf>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001190 <app_init+0x13c>)
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <app_init+0x134>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fc41 	bl	8001970 <logger_log_print_>
 80010ee:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 80010f0:	4b2c      	ldr	r3, [pc, #176]	@ (80011a4 <app_init+0x150>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 80010f6:	b672      	cpsid	i
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <app_init+0x134>)
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <app_init+0x150>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <app_init+0x154>)
 8001104:	4a29      	ldr	r2, [pc, #164]	@ (80011ac <app_init+0x158>)
 8001106:	213f      	movs	r1, #63	@ 0x3f
 8001108:	f004 f9d8 	bl	80054bc <sniprintf>
 800110c:	4603      	mov	r3, r0
 800110e:	4a20      	ldr	r2, [pc, #128]	@ (8001190 <app_init+0x13c>)
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <app_init+0x134>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fc2a 	bl	8001970 <logger_log_print_>
 800111c:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e01a      	b.n	800115a <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8001124:	4922      	ldr	r1, [pc, #136]	@ (80011b0 <app_init+0x15c>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	6819      	ldr	r1, [r3, #0]
 8001134:	481e      	ldr	r0, [pc, #120]	@ (80011b0 <app_init+0x15c>)
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4403      	add	r3, r0
 8001142:	3308      	adds	r3, #8
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 800114a:	4a1a      	ldr	r2, [pc, #104]	@ (80011b4 <app_init+0x160>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2100      	movs	r1, #0
 8001150:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3301      	adds	r3, #1
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d9e1      	bls.n	8001124 <app_init+0xd0>
	}

	cycle_counter_init();
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <app_init+0x164>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <app_init+0x164>)
 8001166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800116a:	60d3      	str	r3, [r2, #12]
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <app_init+0x168>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <app_init+0x168>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <app_init+0x168>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6013      	str	r3, [r2, #0]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	bf00      	nop
 8001188:	080069b4 	.word	0x080069b4
 800118c:	08006470 	.word	0x08006470
 8001190:	200001f8 	.word	0x200001f8
 8001194:	08006474 	.word	0x08006474
 8001198:	08006480 	.word	0x08006480
 800119c:	20000004 	.word	0x20000004
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000180 	.word	0x20000180
 80011a8:	080064a4 	.word	0x080064a4
 80011ac:	080064b0 	.word	0x080064b0
 80011b0:	08006978 	.word	0x08006978
 80011b4:	2000018c 	.word	0x2000018c
 80011b8:	e000edf0 	.word	0xe000edf0
 80011bc:	e0001000 	.word	0xe0001000

080011c0 <app_update>:

void app_update(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 80011c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001270 <app_update+0xb0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d04c      	beq.n	8001268 <app_update+0xa8>
    {
    	g_app_tick_cnt--;
 80011ce:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <app_update+0xb0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	4a26      	ldr	r2, [pc, #152]	@ (8001270 <app_update+0xb0>)
 80011d6:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 80011d8:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <app_update+0xb4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a25      	ldr	r2, [pc, #148]	@ (8001274 <app_update+0xb4>)
 80011e0:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <app_update+0xb8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e039      	b.n	8001262 <app_update+0xa2>
    	{
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
			cycle_counter_reset();
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <app_update+0xbc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 80011f4:	4922      	ldr	r1, [pc, #136]	@ (8001280 <app_update+0xc0>)
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	3304      	adds	r3, #4
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	481e      	ldr	r0, [pc, #120]	@ (8001280 <app_update+0xc0>)
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4403      	add	r3, r0
 8001214:	3308      	adds	r3, #8
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	4788      	blx	r1

			cycle_counter = cycle_counter_get();
 800121c:	4b17      	ldr	r3, [pc, #92]	@ (800127c <app_update+0xbc>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	60bb      	str	r3, [r7, #8]
			cycle_counter_time_us = cycle_counter_time_us();
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <app_update+0xbc>)
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <app_update+0xc4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4917      	ldr	r1, [pc, #92]	@ (8001288 <app_update+0xc8>)
 800122c:	fba1 1303 	umull	r1, r3, r1, r3
 8001230:	0c9b      	lsrs	r3, r3, #18
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	607b      	str	r3, [r7, #4]
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);0

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <app_update+0xb8>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	4a0d      	ldr	r2, [pc, #52]	@ (8001278 <app_update+0xb8>)
 8001242:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8001244:	4a11      	ldr	r2, [pc, #68]	@ (800128c <app_update+0xcc>)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d904      	bls.n	800125c <app_update+0x9c>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8001252:	490e      	ldr	r1, [pc, #56]	@ (800128c <app_update+0xcc>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d9c2      	bls.n	80011ee <app_update+0x2e>
			}
	    }
    }
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000188 	.word	0x20000188
 8001274:	20000180 	.word	0x20000180
 8001278:	20000184 	.word	0x20000184
 800127c:	e0001000 	.word	0xe0001000
 8001280:	08006978 	.word	0x08006978
 8001284:	20000000 	.word	0x20000000
 8001288:	431bde83 	.word	0x431bde83
 800128c:	2000018c 	.word	0x2000018c

08001290 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_SYSTICK_Callback+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <HAL_SYSTICK_Callback+0x40>)
 800129c:	6013      	str	r3, [r2, #0]
	g_task_sensor_tick_cnt++;
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_SYSTICK_Callback+0x44>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <HAL_SYSTICK_Callback+0x44>)
 80012a6:	6013      	str	r3, [r2, #0]
	g_task_menu_tick_cnt++;
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_SYSTICK_Callback+0x48>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <HAL_SYSTICK_Callback+0x48>)
 80012b0:	6013      	str	r3, [r2, #0]
	g_task_system_tick_cnt++;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_SYSTICK_Callback+0x4c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_SYSTICK_Callback+0x4c>)
 80012ba:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_SYSTICK_Callback+0x50>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <HAL_SYSTICK_Callback+0x50>)
 80012c4:	6013      	str	r3, [r2, #0]

}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000188 	.word	0x20000188
 80012d4:	2000030c 	.word	0x2000030c
 80012d8:	2000031c 	.word	0x2000031c
 80012dc:	20000350 	.word	0x20000350
 80012e0:	20000230 	.word	0x20000230

080012e4 <displayInit>:
/********************** external data declaration ****************************/
/********************** external functions definition ************************/


void displayInit( displayConnection_t connection )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 80012ee:	4a38      	ldr	r2, [pc, #224]	@ (80013d0 <displayInit+0xec>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	7013      	strb	r3, [r2, #0]

    if( display.connection == DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER) {
 80012f4:	4b36      	ldr	r3, [pc, #216]	@ (80013d0 <displayInit+0xec>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d109      	bne.n	8001310 <displayInit+0x2c>
        pcf8574.address = PCF8574_I2C_BUS_8BIT_WRITE_ADDRESS ;
 80012fc:	4b35      	ldr	r3, [pc, #212]	@ (80013d4 <displayInit+0xf0>)
 80012fe:	224e      	movs	r2, #78	@ 0x4e
 8001300:	601a      	str	r2, [r3, #0]
        pcf8574.data = 0b00000000;
 8001302:	4b34      	ldr	r3, [pc, #208]	@ (80013d4 <displayInit+0xf0>)
 8001304:	2200      	movs	r2, #0
 8001306:	711a      	strb	r2, [r3, #4]
        /*Definido en el .ioc*/
        //i2cPcf8574.frequency(100000);

        displayPinWrite( DISPLAY_PIN_A_PCF8574,  ON );
 8001308:	2101      	movs	r1, #1
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f8f6 	bl	80014fc <displayPinWrite>
    }

    initial8BitCommunicationIsCompleted = false;
 8001310:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <displayInit+0xf4>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8001316:	2032      	movs	r0, #50	@ 0x32
 8001318:	f002 f80e 	bl	8003338 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800131c:	2130      	movs	r1, #48	@ 0x30
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f8c8 	bl	80014b4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 8001324:	2005      	movs	r0, #5
 8001326:	f002 f807 	bl	8003338 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800132a:	2130      	movs	r1, #48	@ 0x30
 800132c:	2000      	movs	r0, #0
 800132e:	f000 f8c1 	bl	80014b4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f002 f800 	bl	8003338 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001338:	2130      	movs	r1, #48	@ 0x30
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f8ba 	bl	80014b4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f001 fff9 	bl	8003338 <HAL_Delay>

    switch( display.connection ) {
 8001346:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <displayInit+0xec>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d00d      	beq.n	800136a <displayInit+0x86>
 800134e:	2b02      	cmp	r3, #2
 8001350:	dc1d      	bgt.n	800138e <displayInit+0xaa>
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <displayInit+0x86>
 8001356:	2b01      	cmp	r3, #1
 8001358:	d119      	bne.n	800138e <displayInit+0xaa>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800135a:	2138      	movs	r1, #56	@ 0x38
 800135c:	2000      	movs	r0, #0
 800135e:	f000 f8a9 	bl	80014b4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f001 ffe8 	bl	8003338 <HAL_Delay>
        break;
 8001368:	e011      	b.n	800138e <displayInit+0xaa>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800136a:	2120      	movs	r1, #32
 800136c:	2000      	movs	r0, #0
 800136e:	f000 f8a1 	bl	80014b4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 8001372:	2001      	movs	r0, #1
 8001374:	f001 ffe0 	bl	8003338 <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <displayInit+0xf4>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800137e:	2128      	movs	r1, #40	@ 0x28
 8001380:	2000      	movs	r0, #0
 8001382:	f000 f897 	bl	80014b4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f001 ffd6 	bl	8003338 <HAL_Delay>
        break;
 800138c:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800138e:	2108      	movs	r1, #8
 8001390:	2000      	movs	r0, #0
 8001392:	f000 f88f 	bl	80014b4 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8001396:	2001      	movs	r0, #1
 8001398:	f001 ffce 	bl	8003338 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800139c:	2101      	movs	r1, #1
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f888 	bl	80014b4 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f001 ffc7 	bl	8003338 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80013aa:	2106      	movs	r1, #6
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 f881 	bl	80014b4 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f001 ffc0 	bl	8003338 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80013b8:	210c      	movs	r1, #12
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f87a 	bl	80014b4 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f001 ffb9 	bl	8003338 <HAL_Delay>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001a0 	.word	0x200001a0
 80013d4:	200001a4 	.word	0x200001a4
 80013d8:	200001b4 	.word	0x200001b4

080013dc <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	460a      	mov	r2, r1
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	4613      	mov	r3, r2
 80013ea:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d846      	bhi.n	8001480 <displayCharPositionWrite+0xa4>
 80013f2:	a201      	add	r2, pc, #4	@ (adr r2, 80013f8 <displayCharPositionWrite+0x1c>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	08001409 	.word	0x08001409
 80013fc:	08001421 	.word	0x08001421
 8001400:	08001441 	.word	0x08001441
 8001404:	08001461 	.word	0x08001461
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4619      	mov	r1, r3
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f84e 	bl	80014b4 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            HAL_Delay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f001 ff8d 	bl	8003338 <HAL_Delay>
        break;
 800141e:	e02f      	b.n	8001480 <displayCharPositionWrite+0xa4>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	3340      	adds	r3, #64	@ 0x40
 8001424:	b2db      	uxtb	r3, r3
 8001426:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800142c:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4619      	mov	r1, r3
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f83e 	bl	80014b4 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8001438:	2001      	movs	r0, #1
 800143a:	f001 ff7d 	bl	8003338 <HAL_Delay>
        break;
 800143e:	e01f      	b.n	8001480 <displayCharPositionWrite+0xa4>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	3314      	adds	r3, #20
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001448:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800144c:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f82e 	bl	80014b4 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8001458:	2001      	movs	r0, #1
 800145a:	f001 ff6d 	bl	8003338 <HAL_Delay>
        break;
 800145e:	e00f      	b.n	8001480 <displayCharPositionWrite+0xa4>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	3354      	adds	r3, #84	@ 0x54
 8001464:	b2db      	uxtb	r3, r3
 8001466:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001468:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800146c:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4619      	mov	r1, r3
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f81e 	bl	80014b4 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8001478:	2001      	movs	r0, #1
 800147a:	f001 ff5d 	bl	8003338 <HAL_Delay>
        break;
 800147e:	bf00      	nop
    }
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001490:	e007      	b.n	80014a2 <displayStringWrite+0x1a>
        displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	2001      	movs	r0, #1
 800149e:	f000 f809 	bl	80014b4 <displayCodeWrite>
    while (*str) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f3      	bne.n	8001492 <displayStringWrite+0xa>
    }
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <displayCodeWrite>:
/********************** internal functions definition ************************/
static void displayCodeWrite( bool type, uint8_t dataBus) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
	if (type == DISPLAY_RS_INSTRUCTION)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f083 0301 	eor.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION);
 80014d0:	2100      	movs	r1, #0
 80014d2:	2004      	movs	r0, #4
 80014d4:	f000 f812 	bl	80014fc <displayPinWrite>
 80014d8:	e003      	b.n	80014e2 <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA);
 80014da:	2101      	movs	r1, #1
 80014dc:	2004      	movs	r0, #4
 80014de:	f000 f80d 	bl	80014fc <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE);
 80014e2:	2100      	movs	r1, #0
 80014e4:	2005      	movs	r0, #5
 80014e6:	f000 f809 	bl	80014fc <displayPinWrite>
	displayDataBusWrite(dataBus);
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f9ad 	bl	800184c <displayDataBusWrite>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8001508:	4b99      	ldr	r3, [pc, #612]	@ (8001770 <displayPinWrite+0x274>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	f000 80ab 	beq.w	8001668 <displayPinWrite+0x16c>
 8001512:	2b02      	cmp	r3, #2
 8001514:	f300 8193 	bgt.w	800183e <displayPinWrite+0x342>
 8001518:	2b00      	cmp	r3, #0
 800151a:	d053      	beq.n	80015c4 <displayPinWrite+0xc8>
 800151c:	2b01      	cmp	r3, #1
 800151e:	f040 818e 	bne.w	800183e <displayPinWrite+0x342>

    	case DISPLAY_CONNECTION_GPIO_8BITS:
            switch( pinName ) {
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	3b04      	subs	r3, #4
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d84a      	bhi.n	80015c0 <displayPinWrite+0xc4>
 800152a:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <displayPinWrite+0x34>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	080015a1 	.word	0x080015a1
 8001534:	080015c1 	.word	0x080015c1
 8001538:	080015b1 	.word	0x080015b1
 800153c:	080015c1 	.word	0x080015c1
 8001540:	080015c1 	.word	0x080015c1
 8001544:	080015c1 	.word	0x080015c1
 8001548:	080015c1 	.word	0x080015c1
 800154c:	0800155d 	.word	0x0800155d
 8001550:	0800156f 	.word	0x0800156f
 8001554:	08001581 	.word	0x08001581
 8001558:	08001591 	.word	0x08001591
//                case DISPLAY_PIN_D0: HAL_GPIO_WritePin(D2_GPIO_Port,  D2_Pin,  value);   break;
//                case DISPLAY_PIN_D1: HAL_GPIO_WritePin(D4_GPIO_Port,  D4_Pin,  value);   break;
//                case DISPLAY_PIN_D2: HAL_GPIO_WritePin(D5_GPIO_Port,  D5_Pin,  value);   break;
//                case DISPLAY_PIN_D3: HAL_GPIO_WritePin(D6_GPIO_Port,  D6_Pin,  value);   break;
                case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001566:	4883      	ldr	r0, [pc, #524]	@ (8001774 <displayPinWrite+0x278>)
 8001568:	f003 f839 	bl	80045de <HAL_GPIO_WritePin>
 800156c:	e029      	b.n	80015c2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001578:	487e      	ldr	r0, [pc, #504]	@ (8001774 <displayPinWrite+0x278>)
 800157a:	f003 f830 	bl	80045de <HAL_GPIO_WritePin>
 800157e:	e020      	b.n	80015c2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	2180      	movs	r1, #128	@ 0x80
 8001588:	487b      	ldr	r0, [pc, #492]	@ (8001778 <displayPinWrite+0x27c>)
 800158a:	f003 f828 	bl	80045de <HAL_GPIO_WritePin>
 800158e:	e018      	b.n	80015c2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	2140      	movs	r1, #64	@ 0x40
 8001598:	4878      	ldr	r0, [pc, #480]	@ (800177c <displayPinWrite+0x280>)
 800159a:	f003 f820 	bl	80045de <HAL_GPIO_WritePin>
 800159e:	e010      	b.n	80015c2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	2180      	movs	r1, #128	@ 0x80
 80015a8:	4872      	ldr	r0, [pc, #456]	@ (8001774 <displayPinWrite+0x278>)
 80015aa:	f003 f818 	bl	80045de <HAL_GPIO_WritePin>
 80015ae:	e008      	b.n	80015c2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	2140      	movs	r1, #64	@ 0x40
 80015b8:	486e      	ldr	r0, [pc, #440]	@ (8001774 <displayPinWrite+0x278>)
 80015ba:	f003 f810 	bl	80045de <HAL_GPIO_WritePin>
 80015be:	e000      	b.n	80015c2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_RW: break;
                default: break;
 80015c0:	bf00      	nop
            }
            break;
 80015c2:	e13c      	b.n	800183e <displayPinWrite+0x342>


        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	3b04      	subs	r3, #4
 80015c8:	2b0a      	cmp	r3, #10
 80015ca:	d84b      	bhi.n	8001664 <displayPinWrite+0x168>
 80015cc:	a201      	add	r2, pc, #4	@ (adr r2, 80015d4 <displayPinWrite+0xd8>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	08001645 	.word	0x08001645
 80015d8:	08001665 	.word	0x08001665
 80015dc:	08001655 	.word	0x08001655
 80015e0:	08001665 	.word	0x08001665
 80015e4:	08001665 	.word	0x08001665
 80015e8:	08001665 	.word	0x08001665
 80015ec:	08001665 	.word	0x08001665
 80015f0:	08001601 	.word	0x08001601
 80015f4:	08001613 	.word	0x08001613
 80015f8:	08001625 	.word	0x08001625
 80015fc:	08001635 	.word	0x08001635
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800160a:	485a      	ldr	r0, [pc, #360]	@ (8001774 <displayPinWrite+0x278>)
 800160c:	f002 ffe7 	bl	80045de <HAL_GPIO_WritePin>
 8001610:	e029      	b.n	8001666 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800161c:	4855      	ldr	r0, [pc, #340]	@ (8001774 <displayPinWrite+0x278>)
 800161e:	f002 ffde 	bl	80045de <HAL_GPIO_WritePin>
 8001622:	e020      	b.n	8001666 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	2180      	movs	r1, #128	@ 0x80
 800162c:	4852      	ldr	r0, [pc, #328]	@ (8001778 <displayPinWrite+0x27c>)
 800162e:	f002 ffd6 	bl	80045de <HAL_GPIO_WritePin>
 8001632:	e018      	b.n	8001666 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	2140      	movs	r1, #64	@ 0x40
 800163c:	484f      	ldr	r0, [pc, #316]	@ (800177c <displayPinWrite+0x280>)
 800163e:	f002 ffce 	bl	80045de <HAL_GPIO_WritePin>
 8001642:	e010      	b.n	8001666 <displayPinWrite+0x16a>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	2180      	movs	r1, #128	@ 0x80
 800164c:	4849      	ldr	r0, [pc, #292]	@ (8001774 <displayPinWrite+0x278>)
 800164e:	f002 ffc6 	bl	80045de <HAL_GPIO_WritePin>
 8001652:	e008      	b.n	8001666 <displayPinWrite+0x16a>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	2140      	movs	r1, #64	@ 0x40
 800165c:	4845      	ldr	r0, [pc, #276]	@ (8001774 <displayPinWrite+0x278>)
 800165e:	f002 ffbe 	bl	80045de <HAL_GPIO_WritePin>
 8001662:	e000      	b.n	8001666 <displayPinWrite+0x16a>
                case DISPLAY_PIN_RW: break;
                default: break;
 8001664:	bf00      	nop
            }
            break;
 8001666:	e0ea      	b.n	800183e <displayPinWrite+0x342>

        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
           if ( value ) {
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d03e      	beq.n	80016ec <displayPinWrite+0x1f0>
                switch( pinName ) {
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	3b03      	subs	r3, #3
 8001672:	2b0b      	cmp	r3, #11
 8001674:	d87a      	bhi.n	800176c <displayPinWrite+0x270>
 8001676:	a201      	add	r2, pc, #4	@ (adr r2, 800167c <displayPinWrite+0x180>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	080016e5 	.word	0x080016e5
 8001680:	080016cd 	.word	0x080016cd
 8001684:	080016dd 	.word	0x080016dd
 8001688:	080016d5 	.word	0x080016d5
 800168c:	0800176d 	.word	0x0800176d
 8001690:	0800176d 	.word	0x0800176d
 8001694:	0800176d 	.word	0x0800176d
 8001698:	0800176d 	.word	0x0800176d
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016b5 	.word	0x080016b5
 80016a4:	080016bd 	.word	0x080016bd
 80016a8:	080016c5 	.word	0x080016c5
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = ON; break;
 80016ac:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <displayPinWrite+0x284>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	725a      	strb	r2, [r3, #9]
 80016b2:	e068      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = ON; break;
 80016b4:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <displayPinWrite+0x284>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	729a      	strb	r2, [r3, #10]
 80016ba:	e064      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = ON; break;
 80016bc:	4b30      	ldr	r3, [pc, #192]	@ (8001780 <displayPinWrite+0x284>)
 80016be:	2201      	movs	r2, #1
 80016c0:	72da      	strb	r2, [r3, #11]
 80016c2:	e060      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = ON; break;
 80016c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <displayPinWrite+0x284>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	731a      	strb	r2, [r3, #12]
 80016ca:	e05c      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = ON; break;
 80016cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <displayPinWrite+0x284>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	715a      	strb	r2, [r3, #5]
 80016d2:	e058      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = ON; break;
 80016d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <displayPinWrite+0x284>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	71da      	strb	r2, [r3, #7]
 80016da:	e054      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = ON; break;
 80016dc:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <displayPinWrite+0x284>)
 80016de:	2201      	movs	r2, #1
 80016e0:	719a      	strb	r2, [r3, #6]
 80016e2:	e050      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = ON; break;
 80016e4:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <displayPinWrite+0x284>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	721a      	strb	r2, [r3, #8]
 80016ea:	e04c      	b.n	8001786 <displayPinWrite+0x28a>
                    default: break;
                }
            }
            else {
                switch( pinName ) {
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	3b03      	subs	r3, #3
 80016f0:	2b0b      	cmp	r3, #11
 80016f2:	d847      	bhi.n	8001784 <displayPinWrite+0x288>
 80016f4:	a201      	add	r2, pc, #4	@ (adr r2, 80016fc <displayPinWrite+0x200>)
 80016f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fa:	bf00      	nop
 80016fc:	08001765 	.word	0x08001765
 8001700:	0800174d 	.word	0x0800174d
 8001704:	0800175d 	.word	0x0800175d
 8001708:	08001755 	.word	0x08001755
 800170c:	08001785 	.word	0x08001785
 8001710:	08001785 	.word	0x08001785
 8001714:	08001785 	.word	0x08001785
 8001718:	08001785 	.word	0x08001785
 800171c:	0800172d 	.word	0x0800172d
 8001720:	08001735 	.word	0x08001735
 8001724:	0800173d 	.word	0x0800173d
 8001728:	08001745 	.word	0x08001745
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = OFF; break;
 800172c:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <displayPinWrite+0x284>)
 800172e:	2200      	movs	r2, #0
 8001730:	725a      	strb	r2, [r3, #9]
 8001732:	e028      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = OFF; break;
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <displayPinWrite+0x284>)
 8001736:	2200      	movs	r2, #0
 8001738:	729a      	strb	r2, [r3, #10]
 800173a:	e024      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = OFF; break;
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <displayPinWrite+0x284>)
 800173e:	2200      	movs	r2, #0
 8001740:	72da      	strb	r2, [r3, #11]
 8001742:	e020      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = OFF; break;
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <displayPinWrite+0x284>)
 8001746:	2200      	movs	r2, #0
 8001748:	731a      	strb	r2, [r3, #12]
 800174a:	e01c      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = OFF; break;
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <displayPinWrite+0x284>)
 800174e:	2200      	movs	r2, #0
 8001750:	715a      	strb	r2, [r3, #5]
 8001752:	e018      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = OFF; break;
 8001754:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <displayPinWrite+0x284>)
 8001756:	2200      	movs	r2, #0
 8001758:	71da      	strb	r2, [r3, #7]
 800175a:	e014      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = OFF; break;
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <displayPinWrite+0x284>)
 800175e:	2200      	movs	r2, #0
 8001760:	719a      	strb	r2, [r3, #6]
 8001762:	e010      	b.n	8001786 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = OFF; break;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <displayPinWrite+0x284>)
 8001766:	2200      	movs	r2, #0
 8001768:	721a      	strb	r2, [r3, #8]
 800176a:	e00c      	b.n	8001786 <displayPinWrite+0x28a>
                    default: break;
 800176c:	bf00      	nop
 800176e:	e00a      	b.n	8001786 <displayPinWrite+0x28a>
 8001770:	200001a0 	.word	0x200001a0
 8001774:	40010800 	.word	0x40010800
 8001778:	40011000 	.word	0x40011000
 800177c:	40010c00 	.word	0x40010c00
 8001780:	200001a4 	.word	0x200001a4
                    default: break;
 8001784:	bf00      	nop
                }
            }
            pcf8574.data = 0b00000000;
 8001786:	4b30      	ldr	r3, [pc, #192]	@ (8001848 <displayPinWrite+0x34c>)
 8001788:	2200      	movs	r2, #0
 800178a:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRs ) pcf8574.data |= 0b00000001;
 800178c:	4b2e      	ldr	r3, [pc, #184]	@ (8001848 <displayPinWrite+0x34c>)
 800178e:	795b      	ldrb	r3, [r3, #5]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <displayPinWrite+0x2a6>
 8001794:	4b2c      	ldr	r3, [pc, #176]	@ (8001848 <displayPinWrite+0x34c>)
 8001796:	791b      	ldrb	r3, [r3, #4]
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <displayPinWrite+0x34c>)
 80017a0:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRw ) pcf8574.data |= 0b00000010;
 80017a2:	4b29      	ldr	r3, [pc, #164]	@ (8001848 <displayPinWrite+0x34c>)
 80017a4:	799b      	ldrb	r3, [r3, #6]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <displayPinWrite+0x2bc>
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <displayPinWrite+0x34c>)
 80017ac:	791b      	ldrb	r3, [r3, #4]
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <displayPinWrite+0x34c>)
 80017b6:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinEn ) pcf8574.data |= 0b00000100;
 80017b8:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <displayPinWrite+0x34c>)
 80017ba:	79db      	ldrb	r3, [r3, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <displayPinWrite+0x2d2>
 80017c0:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <displayPinWrite+0x34c>)
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <displayPinWrite+0x34c>)
 80017cc:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinA  ) pcf8574.data |= 0b00001000;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <displayPinWrite+0x34c>)
 80017d0:	7a1b      	ldrb	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <displayPinWrite+0x2e8>
 80017d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <displayPinWrite+0x34c>)
 80017d8:	791b      	ldrb	r3, [r3, #4]
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <displayPinWrite+0x34c>)
 80017e2:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD4 ) pcf8574.data |= 0b00010000;
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <displayPinWrite+0x34c>)
 80017e6:	7a5b      	ldrb	r3, [r3, #9]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <displayPinWrite+0x2fe>
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <displayPinWrite+0x34c>)
 80017ee:	791b      	ldrb	r3, [r3, #4]
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <displayPinWrite+0x34c>)
 80017f8:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD5 ) pcf8574.data |= 0b00100000;
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <displayPinWrite+0x34c>)
 80017fc:	7a9b      	ldrb	r3, [r3, #10]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <displayPinWrite+0x314>
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <displayPinWrite+0x34c>)
 8001804:	791b      	ldrb	r3, [r3, #4]
 8001806:	f043 0320 	orr.w	r3, r3, #32
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <displayPinWrite+0x34c>)
 800180e:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD6 ) pcf8574.data |= 0b01000000;
 8001810:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <displayPinWrite+0x34c>)
 8001812:	7adb      	ldrb	r3, [r3, #11]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <displayPinWrite+0x32a>
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <displayPinWrite+0x34c>)
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <displayPinWrite+0x34c>)
 8001824:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD7 ) pcf8574.data |= 0b10000000;
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <displayPinWrite+0x34c>)
 8001828:	7b1b      	ldrb	r3, [r3, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <displayPinWrite+0x340>
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <displayPinWrite+0x34c>)
 8001830:	791b      	ldrb	r3, [r3, #4]
 8001832:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <displayPinWrite+0x34c>)
 800183a:	711a      	strb	r2, [r3, #4]

            //i2cPcf8574.write( pcf8574.address, &pcf8574.data, 1);
            //HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)pcf8574.address<<1, (uint8_t *)&pcf8574.data, (uint16_t)16, HAL_MAX_DELAY);

            break;
 800183c:	bf00      	nop
    }
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200001a4 	.word	0x200001a4

0800184c <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001856:	2100      	movs	r1, #0
 8001858:	2006      	movs	r0, #6
 800185a:	f7ff fe4f 	bl	80014fc <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001864:	4619      	mov	r1, r3
 8001866:	200e      	movs	r0, #14
 8001868:	f7ff fe48 	bl	80014fc <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001872:	4619      	mov	r1, r3
 8001874:	200d      	movs	r0, #13
 8001876:	f7ff fe41 	bl	80014fc <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	4619      	mov	r1, r3
 8001882:	200c      	movs	r0, #12
 8001884:	f7ff fe3a 	bl	80014fc <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	4619      	mov	r1, r3
 8001890:	200b      	movs	r0, #11
 8001892:	f7ff fe33 	bl	80014fc <displayPinWrite>
    switch( display.connection ) {
 8001896:	4b34      	ldr	r3, [pc, #208]	@ (8001968 <displayDataBusWrite+0x11c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d022      	beq.n	80018e4 <displayDataBusWrite+0x98>
 800189e:	2b02      	cmp	r3, #2
 80018a0:	dc4f      	bgt.n	8001942 <displayDataBusWrite+0xf6>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01e      	beq.n	80018e4 <displayDataBusWrite+0x98>
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d14b      	bne.n	8001942 <displayDataBusWrite+0xf6>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	4619      	mov	r1, r3
 80018b2:	200a      	movs	r0, #10
 80018b4:	f7ff fe22 	bl	80014fc <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	2009      	movs	r0, #9
 80018c2:	f7ff fe1b 	bl	80014fc <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	4619      	mov	r1, r3
 80018ce:	2008      	movs	r0, #8
 80018d0:	f7ff fe14 	bl	80014fc <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	4619      	mov	r1, r3
 80018dc:	2007      	movs	r0, #7
 80018de:	f7ff fe0d 	bl	80014fc <displayPinWrite>
        break;
 80018e2:	e02e      	b.n	8001942 <displayDataBusWrite+0xf6>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            if ( initial8BitCommunicationIsCompleted == true) {
 80018e4:	4b21      	ldr	r3, [pc, #132]	@ (800196c <displayDataBusWrite+0x120>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d029      	beq.n	8001940 <displayDataBusWrite+0xf4>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 80018ec:	2101      	movs	r1, #1
 80018ee:	2006      	movs	r0, #6
 80018f0:	f7ff fe04 	bl	80014fc <displayPinWrite>
                HAL_Delay(1);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f001 fd1f 	bl	8003338 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_EN, OFF );
 80018fa:	2100      	movs	r1, #0
 80018fc:	2006      	movs	r0, #6
 80018fe:	f7ff fdfd 	bl	80014fc <displayPinWrite>
                HAL_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f001 fd18 	bl	8003338 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	4619      	mov	r1, r3
 8001910:	200e      	movs	r0, #14
 8001912:	f7ff fdf3 	bl	80014fc <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	4619      	mov	r1, r3
 800191e:	200d      	movs	r0, #13
 8001920:	f7ff fdec 	bl	80014fc <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	4619      	mov	r1, r3
 800192c:	200c      	movs	r0, #12
 800192e:	f7ff fde5 	bl	80014fc <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	4619      	mov	r1, r3
 800193a:	200b      	movs	r0, #11
 800193c:	f7ff fdde 	bl	80014fc <displayPinWrite>
            }
        break;
 8001940:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8001942:	2101      	movs	r1, #1
 8001944:	2006      	movs	r0, #6
 8001946:	f7ff fdd9 	bl	80014fc <displayPinWrite>
    HAL_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f001 fcf4 	bl	8003338 <HAL_Delay>
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001950:	2100      	movs	r1, #0
 8001952:	2006      	movs	r0, #6
 8001954:	f7ff fdd2 	bl	80014fc <displayPinWrite>
    HAL_Delay(1);
 8001958:	2001      	movs	r0, #1
 800195a:	f001 fced 	bl	8003338 <HAL_Delay>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001a0 	.word	0x200001a0
 800196c:	200001b4 	.word	0x200001b4

08001970 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f003 fd8d 	bl	8005498 <iprintf>
	fflush(stdout);
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <logger_log_print_+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fcb1 	bl	80052ec <fflush>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000054 	.word	0x20000054

08001998 <task_actuator_init>:
/*La funcion task_actuator_init inicializa los parametros de los actuadores segun las listas
 tasc_actuator_dta_list y task_actuator_cfg_list, que como se menciono mas arriba, contienen
 las condiciones iniciales de mis actuadores */

void task_actuator_init(void *parameters)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af02      	add	r7, sp, #8
 800199e:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_actuator_init), p_task_actuator);
 80019a0:	b672      	cpsid	i
 80019a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b20 <task_actuator_init+0x188>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b24 <task_actuator_init+0x18c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001b28 <task_actuator_init+0x190>)
 80019ae:	4a5f      	ldr	r2, [pc, #380]	@ (8001b2c <task_actuator_init+0x194>)
 80019b0:	213f      	movs	r1, #63	@ 0x3f
 80019b2:	f003 fd83 	bl	80054bc <sniprintf>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001b30 <task_actuator_init+0x198>)
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b58      	ldr	r3, [pc, #352]	@ (8001b20 <task_actuator_init+0x188>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ffd5 	bl	8001970 <logger_log_print_>
 80019c6:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_actuator), p_task_actuator_);
 80019c8:	b672      	cpsid	i
 80019ca:	4b55      	ldr	r3, [pc, #340]	@ (8001b20 <task_actuator_init+0x188>)
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	4b59      	ldr	r3, [pc, #356]	@ (8001b34 <task_actuator_init+0x19c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4b58      	ldr	r3, [pc, #352]	@ (8001b38 <task_actuator_init+0x1a0>)
 80019d6:	4a59      	ldr	r2, [pc, #356]	@ (8001b3c <task_actuator_init+0x1a4>)
 80019d8:	213f      	movs	r1, #63	@ 0x3f
 80019da:	f003 fd6f 	bl	80054bc <sniprintf>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a53      	ldr	r2, [pc, #332]	@ (8001b30 <task_actuator_init+0x198>)
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b20 <task_actuator_init+0x188>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ffc1 	bl	8001970 <logger_log_print_>
 80019ee:	b662      	cpsie	i

	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 80019f0:	4b53      	ldr	r3, [pc, #332]	@ (8001b40 <task_actuator_init+0x1a8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 80019f6:	b672      	cpsid	i
 80019f8:	4b49      	ldr	r3, [pc, #292]	@ (8001b20 <task_actuator_init+0x188>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	4b50      	ldr	r3, [pc, #320]	@ (8001b40 <task_actuator_init+0x1a8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4b50      	ldr	r3, [pc, #320]	@ (8001b44 <task_actuator_init+0x1ac>)
 8001a04:	4a50      	ldr	r2, [pc, #320]	@ (8001b48 <task_actuator_init+0x1b0>)
 8001a06:	213f      	movs	r1, #63	@ 0x3f
 8001a08:	f003 fd58 	bl	80054bc <sniprintf>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a48      	ldr	r2, [pc, #288]	@ (8001b30 <task_actuator_init+0x198>)
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b43      	ldr	r3, [pc, #268]	@ (8001b20 <task_actuator_init+0x188>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ffaa 	bl	8001970 <logger_log_print_>
 8001a1c:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e072      	b.n	8001b0a <task_actuator_init+0x172>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4a47      	ldr	r2, [pc, #284]	@ (8001b4c <task_actuator_init+0x1b4>)
 8001a30:	4413      	add	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4a45      	ldr	r2, [pc, #276]	@ (8001b50 <task_actuator_init+0x1b8>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8001a3e:	b672      	cpsid	i
 8001a40:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <task_actuator_init+0x188>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4b42      	ldr	r3, [pc, #264]	@ (8001b54 <task_actuator_init+0x1bc>)
 8001a4a:	4a43      	ldr	r2, [pc, #268]	@ (8001b58 <task_actuator_init+0x1c0>)
 8001a4c:	213f      	movs	r1, #63	@ 0x3f
 8001a4e:	f003 fd35 	bl	80054bc <sniprintf>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a36      	ldr	r2, [pc, #216]	@ (8001b30 <task_actuator_init+0x198>)
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <task_actuator_init+0x188>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff87 	bl	8001970 <logger_log_print_>
 8001a62:	b662      	cpsie	i

		state = p_task_actuator_dta->state;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	72fb      	strb	r3, [r7, #11]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8001a6a:	b672      	cpsid	i
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <task_actuator_init+0x188>)
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	4b39      	ldr	r3, [pc, #228]	@ (8001b5c <task_actuator_init+0x1c4>)
 8001a76:	4a38      	ldr	r2, [pc, #224]	@ (8001b58 <task_actuator_init+0x1c0>)
 8001a78:	213f      	movs	r1, #63	@ 0x3f
 8001a7a:	f003 fd1f 	bl	80054bc <sniprintf>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a2b      	ldr	r2, [pc, #172]	@ (8001b30 <task_actuator_init+0x198>)
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b26      	ldr	r3, [pc, #152]	@ (8001b20 <task_actuator_init+0x188>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff71 	bl	8001970 <logger_log_print_>
 8001a8e:	b662      	cpsie	i

		event = p_task_actuator_dta->event;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	795b      	ldrb	r3, [r3, #5]
 8001a94:	72bb      	strb	r3, [r7, #10]
		LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8001a96:	b672      	cpsid	i
 8001a98:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <task_actuator_init+0x188>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	7abb      	ldrb	r3, [r7, #10]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <task_actuator_init+0x1c8>)
 8001aa2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b58 <task_actuator_init+0x1c0>)
 8001aa4:	213f      	movs	r1, #63	@ 0x3f
 8001aa6:	f003 fd09 	bl	80054bc <sniprintf>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a20      	ldr	r2, [pc, #128]	@ (8001b30 <task_actuator_init+0x198>)
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <task_actuator_init+0x188>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5b 	bl	8001970 <logger_log_print_>
 8001aba:	b662      	cpsie	i

		b_event = p_task_actuator_dta->flag;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	799b      	ldrb	r3, [r3, #6]
 8001ac0:	727b      	strb	r3, [r7, #9]
		LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8001ac2:	b672      	cpsid	i
 8001ac4:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <task_actuator_init+0x188>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	7a7b      	ldrb	r3, [r7, #9]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <task_actuator_init+0x13a>
 8001ace:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <task_actuator_init+0x1cc>)
 8001ad0:	e000      	b.n	8001ad4 <task_actuator_init+0x13c>
 8001ad2:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <task_actuator_init+0x1d0>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <task_actuator_init+0x1d4>)
 8001ad8:	4a25      	ldr	r2, [pc, #148]	@ (8001b70 <task_actuator_init+0x1d8>)
 8001ada:	213f      	movs	r1, #63	@ 0x3f
 8001adc:	f003 fcee 	bl	80054bc <sniprintf>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a13      	ldr	r2, [pc, #76]	@ (8001b30 <task_actuator_init+0x198>)
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <task_actuator_init+0x188>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff40 	bl	8001970 <logger_log_print_>
 8001af0:	b662      	cpsie	i

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	6858      	ldr	r0, [r3, #4]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	8919      	ldrh	r1, [r3, #8]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	7adb      	ldrb	r3, [r3, #11]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f002 fd6d 	bl	80045de <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d989      	bls.n	8001a24 <task_actuator_init+0x8c>
	}

	g_task_actuator_tick_cnt = G_TASK_ACT_TICK_CNT_INI;
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <task_actuator_init+0x1dc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	080069b4 	.word	0x080069b4
 8001b24:	2000000c 	.word	0x2000000c
 8001b28:	08006504 	.word	0x08006504
 8001b2c:	08006518 	.word	0x08006518
 8001b30:	200001f8 	.word	0x200001f8
 8001b34:	20000010 	.word	0x20000010
 8001b38:	08006530 	.word	0x08006530
 8001b3c:	08006540 	.word	0x08006540
 8001b40:	2000022c 	.word	0x2000022c
 8001b44:	08006550 	.word	0x08006550
 8001b48:	08006564 	.word	0x08006564
 8001b4c:	080069b8 	.word	0x080069b8
 8001b50:	200001fc 	.word	0x200001fc
 8001b54:	08006574 	.word	0x08006574
 8001b58:	0800657c 	.word	0x0800657c
 8001b5c:	08006588 	.word	0x08006588
 8001b60:	08006590 	.word	0x08006590
 8001b64:	08006598 	.word	0x08006598
 8001b68:	080065a0 	.word	0x080065a0
 8001b6c:	080065a8 	.word	0x080065a8
 8001b70:	080065b0 	.word	0x080065b0
 8001b74:	20000230 	.word	0x20000230

08001b78 <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;
	bool b_time_update_required = false;
 8001b80:	2300      	movs	r3, #0
 8001b82:	74fb      	strb	r3, [r7, #19]

	/* Update Task Actuator Counter */
	g_task_actuator_cnt++;
 8001b84:	4b9a      	ldr	r3, [pc, #616]	@ (8001df0 <task_actuator_update+0x278>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a99      	ldr	r2, [pc, #612]	@ (8001df0 <task_actuator_update+0x278>)
 8001b8c:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_actuator_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8001b8e:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8001b90:	4b98      	ldr	r3, [pc, #608]	@ (8001df4 <task_actuator_update+0x27c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <task_actuator_update+0x2e>
    {
    	g_task_actuator_tick_cnt--;
 8001b98:	4b96      	ldr	r3, [pc, #600]	@ (8001df4 <task_actuator_update+0x27c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	4a95      	ldr	r2, [pc, #596]	@ (8001df4 <task_actuator_update+0x27c>)
 8001ba0:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8001ba6:	b662      	cpsie	i

    while (b_time_update_required)
 8001ba8:	e118      	b.n	8001ddc <task_actuator_update+0x264>
    {
		/* Protect shared resource (g_task_actuator_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8001baa:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8001bac:	4b91      	ldr	r3, [pc, #580]	@ (8001df4 <task_actuator_update+0x27c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <task_actuator_update+0x4c>
		{
			g_task_actuator_tick_cnt--;
 8001bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8001df4 <task_actuator_update+0x27c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	4a8e      	ldr	r2, [pc, #568]	@ (8001df4 <task_actuator_update+0x27c>)
 8001bbc:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	74fb      	strb	r3, [r7, #19]
 8001bc2:	e001      	b.n	8001bc8 <task_actuator_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8001bc8:	b662      	cpsie	i

		/*Recorro el arreglo de actuadores y reviso uno a uno si hay un cambio de estado debido a un evento entrante*/

    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e101      	b.n	8001dd4 <task_actuator_update+0x25c>
		{
    		/* Update Task Actuator Configuration & Data Pointer */
			p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4a87      	ldr	r2, [pc, #540]	@ (8001df8 <task_actuator_update+0x280>)
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
			p_task_actuator_dta = &task_actuator_dta_list[index];
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4a85      	ldr	r2, [pc, #532]	@ (8001dfc <task_actuator_update+0x284>)
 8001be6:	4413      	add	r3, r2
 8001be8:	60bb      	str	r3, [r7, #8]

			switch (p_task_actuator_dta->state)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	791b      	ldrb	r3, [r3, #4]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	f200 80ea 	bhi.w	8001dc8 <task_actuator_update+0x250>
 8001bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bfc <task_actuator_update+0x84>)
 8001bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfa:	bf00      	nop
 8001bfc:	08001c0d 	.word	0x08001c0d
 8001c00:	08001c9f 	.word	0x08001c9f
 8001c04:	08001cfb 	.word	0x08001cfb
 8001c08:	08001d61 	.word	0x08001d61
				case ST_LED_XX_OFF:

					/*Cuando el actuador entre en accion, es decir, se interacute con el sistema de forma tal que se ejecute alguna accion
					 el flag contenido en task_actuator_dta se seteara en true, indicando que el acutador fue accionado*/

					if(true == p_task_actuator_dta->flag){
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	799b      	ldrb	r3, [r3, #6]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80db 	beq.w	8001dcc <task_actuator_update+0x254>

						p_task_actuator_dta->flag = false;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	719a      	strb	r2, [r3, #6]

						switch(p_task_actuator_dta->event){
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	795b      	ldrb	r3, [r3, #5]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d83a      	bhi.n	8001c9a <task_actuator_update+0x122>
 8001c24:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <task_actuator_update+0xb4>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c9b 	.word	0x08001c9b
 8001c30:	08001c3d 	.word	0x08001c3d
 8001c34:	08001c57 	.word	0x08001c57
 8001c38:	08001c79 	.word	0x08001c79

							case EV_LED_XX_ON:
								HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6858      	ldr	r0, [r3, #4]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8919      	ldrh	r1, [r3, #8]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	7a9b      	ldrb	r3, [r3, #10]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f002 fcc8 	bl	80045de <HAL_GPIO_WritePin>
								p_task_actuator_dta->state = ST_LED_XX_ON;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2201      	movs	r2, #1
 8001c52:	711a      	strb	r2, [r3, #4]
								break;
 8001c54:	e022      	b.n	8001c9c <task_actuator_update+0x124>

							case EV_LED_XX_OFF:
								break;

							case EV_LED_XX_BLINK:
								HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6858      	ldr	r0, [r3, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8919      	ldrh	r1, [r3, #8]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	7a9b      	ldrb	r3, [r3, #10]
 8001c62:	461a      	mov	r2, r3
 8001c64:	f002 fcbb 	bl	80045de <HAL_GPIO_WritePin>
								p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	601a      	str	r2, [r3, #0]
								p_task_actuator_dta->state = ST_LED_XX_BLINK;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2202      	movs	r2, #2
 8001c74:	711a      	strb	r2, [r3, #4]
								break;
 8001c76:	e011      	b.n	8001c9c <task_actuator_update+0x124>

							case EV_LED_XX_PULSE:
								HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6858      	ldr	r0, [r3, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8919      	ldrh	r1, [r3, #8]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	7a9b      	ldrb	r3, [r3, #10]
 8001c84:	461a      	mov	r2, r3
 8001c86:	f002 fcaa 	bl	80045de <HAL_GPIO_WritePin>
								p_task_actuator_dta->tick = p_task_actuator_cfg->tick_pulse;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	601a      	str	r2, [r3, #0]
								p_task_actuator_dta->state = ST_LED_XX_PULSE;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2203      	movs	r2, #3
 8001c96:	711a      	strb	r2, [r3, #4]
								break;
 8001c98:	e000      	b.n	8001c9c <task_actuator_update+0x124>

							default:
								break;
 8001c9a:	bf00      	nop
							}
						}
				break;
 8001c9c:	e096      	b.n	8001dcc <task_actuator_update+0x254>

				case ST_LED_XX_ON:

					switch(p_task_actuator_dta->event){
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	795b      	ldrb	r3, [r3, #5]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d827      	bhi.n	8001cf6 <task_actuator_update+0x17e>
 8001ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <task_actuator_update+0x134>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001cbd 	.word	0x08001cbd
 8001cb0:	08001cf7 	.word	0x08001cf7
 8001cb4:	08001cd7 	.word	0x08001cd7
 8001cb8:	08001ce7 	.word	0x08001ce7

						case EV_LED_XX_ON:
							break;

						case EV_LED_XX_OFF:
							HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6858      	ldr	r0, [r3, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8919      	ldrh	r1, [r3, #8]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	7adb      	ldrb	r3, [r3, #11]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f002 fc88 	bl	80045de <HAL_GPIO_WritePin>
							p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	711a      	strb	r2, [r3, #4]
							break;
 8001cd4:	e010      	b.n	8001cf8 <task_actuator_update+0x180>

						case EV_LED_XX_BLINK:
							p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	601a      	str	r2, [r3, #0]
							p_task_actuator_dta->state = ST_LED_XX_BLINK;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	711a      	strb	r2, [r3, #4]
							break;
 8001ce4:	e008      	b.n	8001cf8 <task_actuator_update+0x180>

						case EV_LED_XX_PULSE:
							p_task_actuator_dta->tick = p_task_actuator_cfg->tick_pulse;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	601a      	str	r2, [r3, #0]
							p_task_actuator_dta->state = ST_LED_XX_PULSE;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	711a      	strb	r2, [r3, #4]
							break;
 8001cf4:	e000      	b.n	8001cf8 <task_actuator_update+0x180>

						default:
							break;
 8001cf6:	bf00      	nop
						}
				break;
 8001cf8:	e069      	b.n	8001dce <task_actuator_update+0x256>

				case ST_LED_XX_BLINK:

					switch(p_task_actuator_dta->event){
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	795b      	ldrb	r3, [r3, #5]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d82c      	bhi.n	8001d5c <task_actuator_update+0x1e4>
 8001d02:	a201      	add	r2, pc, #4	@ (adr r2, 8001d08 <task_actuator_update+0x190>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d33 	.word	0x08001d33
 8001d0c:	08001d19 	.word	0x08001d19
 8001d10:	08001d5d 	.word	0x08001d5d
 8001d14:	08001d4d 	.word	0x08001d4d

						case EV_LED_XX_ON:
							HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6858      	ldr	r0, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8919      	ldrh	r1, [r3, #8]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	7a9b      	ldrb	r3, [r3, #10]
 8001d24:	461a      	mov	r2, r3
 8001d26:	f002 fc5a 	bl	80045de <HAL_GPIO_WritePin>
							p_task_actuator_dta->state = ST_LED_XX_ON;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	711a      	strb	r2, [r3, #4]
							break;
 8001d30:	e015      	b.n	8001d5e <task_actuator_update+0x1e6>

						case EV_LED_XX_OFF:
							HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6858      	ldr	r0, [r3, #4]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8919      	ldrh	r1, [r3, #8]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	7adb      	ldrb	r3, [r3, #11]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f002 fc4d 	bl	80045de <HAL_GPIO_WritePin>
							p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2200      	movs	r2, #0
 8001d48:	711a      	strb	r2, [r3, #4]
							break;
 8001d4a:	e008      	b.n	8001d5e <task_actuator_update+0x1e6>

						case EV_LED_XX_BLINK:
							break;

						case EV_LED_XX_PULSE:
							p_task_actuator_dta->tick = p_task_actuator_cfg->tick_pulse;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	601a      	str	r2, [r3, #0]
							p_task_actuator_dta->state = ST_LED_XX_PULSE;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2203      	movs	r2, #3
 8001d58:	711a      	strb	r2, [r3, #4]
							break;
 8001d5a:	e000      	b.n	8001d5e <task_actuator_update+0x1e6>

						default:
							break;
 8001d5c:	bf00      	nop
					}

				break;
 8001d5e:	e036      	b.n	8001dce <task_actuator_update+0x256>

				case ST_LED_XX_PULSE:

					switch(p_task_actuator_dta->event){
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	795b      	ldrb	r3, [r3, #5]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d82d      	bhi.n	8001dc4 <task_actuator_update+0x24c>
 8001d68:	a201      	add	r2, pc, #4	@ (adr r2, 8001d70 <task_actuator_update+0x1f8>)
 8001d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6e:	bf00      	nop
 8001d70:	08001d9b 	.word	0x08001d9b
 8001d74:	08001d81 	.word	0x08001d81
 8001d78:	08001db5 	.word	0x08001db5
 8001d7c:	08001dc5 	.word	0x08001dc5
						case EV_LED_XX_ON:
							HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6858      	ldr	r0, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8919      	ldrh	r1, [r3, #8]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	7a9b      	ldrb	r3, [r3, #10]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f002 fc26 	bl	80045de <HAL_GPIO_WritePin>
							p_task_actuator_dta->state = ST_LED_XX_ON;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2201      	movs	r2, #1
 8001d96:	711a      	strb	r2, [r3, #4]
							break;
 8001d98:	e015      	b.n	8001dc6 <task_actuator_update+0x24e>

						case EV_LED_XX_OFF:
							HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6858      	ldr	r0, [r3, #4]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8919      	ldrh	r1, [r3, #8]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	7adb      	ldrb	r3, [r3, #11]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f002 fc19 	bl	80045de <HAL_GPIO_WritePin>
							p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2200      	movs	r2, #0
 8001db0:	711a      	strb	r2, [r3, #4]
							break;
 8001db2:	e008      	b.n	8001dc6 <task_actuator_update+0x24e>

						case EV_LED_XX_BLINK:
							p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	601a      	str	r2, [r3, #0]
							p_task_actuator_dta->state = ST_LED_XX_BLINK;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	711a      	strb	r2, [r3, #4]
							break;
 8001dc2:	e000      	b.n	8001dc6 <task_actuator_update+0x24e>

					case EV_LED_XX_PULSE:
						break;

					default:
						break;
 8001dc4:	bf00      	nop
					}

					break;
 8001dc6:	e002      	b.n	8001dce <task_actuator_update+0x256>

			default:
					break;
 8001dc8:	bf00      	nop
 8001dca:	e000      	b.n	8001dce <task_actuator_update+0x256>
				break;
 8001dcc:	bf00      	nop
    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	f67f aefa 	bls.w	8001bd0 <task_actuator_update+0x58>
    while (b_time_update_required)
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f aee3 	bne.w	8001baa <task_actuator_update+0x32>
			}
		}
    }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000022c 	.word	0x2000022c
 8001df4:	20000230 	.word	0x20000230
 8001df8:	080069b8 	.word	0x080069b8
 8001dfc:	200001fc 	.word	0x200001fc

08001e00 <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta; /* recordar que task_actuator_dta_list es una
	 	 	 	 	 	 	 	 	 	 	 	variable global y p_task_actuator_dta
	 	 	 	 	 	 	 	 	 	 	 	apunta a la direccion de memoria del
	 	 	 	 	 	 	 	 	 	 	 	actuador designado por identifier*/

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4a06      	ldr	r2, [pc, #24]	@ (8001e30 <put_event_task_actuator+0x30>)
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	79fa      	ldrb	r2, [r7, #7]
 8001e1e:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	719a      	strb	r2, [r3, #6]

	/*La funcion modifica el capo de "evento" del actuador provisto por "identifier" y le
	 * pasa el evento "event"*/
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	200001fc 	.word	0x200001fc

08001e34 <task_adc_init>:
extern ADC_HandleTypeDef hadc1;
volatile bool sample_to_take ;

/********************** internal functions declaration ***********************/
/********************** external functions definition ************************/
void task_adc_init(void *parameters){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_adc_init), p_task_adc);
 8001e3c:	b672      	cpsid	i
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <task_adc_init+0x3c>)
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <task_adc_init+0x40>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <task_adc_init+0x44>)
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <task_adc_init+0x48>)
 8001e4c:	213f      	movs	r1, #63	@ 0x3f
 8001e4e:	f003 fb35 	bl	80054bc <sniprintf>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <task_adc_init+0x4c>)
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <task_adc_init+0x3c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fd87 	bl	8001970 <logger_log_print_>
 8001e62:	b662      	cpsie	i

    /* Inicializar la cola de valores del ADC */
    init_queue_value_task_adc();
 8001e64:	f000 f8e0 	bl	8002028 <init_queue_value_task_adc>
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	080069b4 	.word	0x080069b4
 8001e74:	20000018 	.word	0x20000018
 8001e78:	080065cc 	.word	0x080065cc
 8001e7c:	080065dc 	.word	0x080065dc
 8001e80:	200001f8 	.word	0x200001f8
 8001e84:	00000000 	.word	0x00000000

08001e88 <task_adc_update>:

void task_adc_update(void *parameters){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

	if(0 < first_sample)
 8001e90:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd0 <task_adc_update+0x148>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <task_adc_update+0x20>
    {
	    first_sample = 0;
 8001e98:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd0 <task_adc_update+0x148>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, ADC_VAL, 2);
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	494c      	ldr	r1, [pc, #304]	@ (8001fd4 <task_adc_update+0x14c>)
 8001ea2:	484d      	ldr	r0, [pc, #308]	@ (8001fd8 <task_adc_update+0x150>)
 8001ea4:	f001 fb44 	bl	8003530 <HAL_ADC_Start_DMA>
    }

    if(sample_cnt< AVERAGER_SIZE ){
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8001fdc <task_adc_update+0x154>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b0e      	cmp	r3, #14
 8001eae:	d820      	bhi.n	8001ef2 <task_adc_update+0x6a>

        if(sample_to_take==true)
 8001eb0:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe0 <task_adc_update+0x158>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d07d      	beq.n	8001fb6 <task_adc_update+0x12e>
        {
			averaged_temp_amb += ADC_VAL[0];  // Temperatura ambiente (LM35)
 8001eba:	4b46      	ldr	r3, [pc, #280]	@ (8001fd4 <task_adc_update+0x14c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b49      	ldr	r3, [pc, #292]	@ (8001fe4 <task_adc_update+0x15c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a47      	ldr	r2, [pc, #284]	@ (8001fe4 <task_adc_update+0x15c>)
 8001ec6:	6013      	str	r3, [r2, #0]
            averaged_temp_uC += ADC_VAL[1];   // Temperatura del microcontrolador
 8001ec8:	4b42      	ldr	r3, [pc, #264]	@ (8001fd4 <task_adc_update+0x14c>)
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4b46      	ldr	r3, [pc, #280]	@ (8001fe8 <task_adc_update+0x160>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a45      	ldr	r2, [pc, #276]	@ (8001fe8 <task_adc_update+0x160>)
 8001ed4:	6013      	str	r3, [r2, #0]

			HAL_ADC_Start_DMA(&hadc1, ADC_VAL, 2);
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	493e      	ldr	r1, [pc, #248]	@ (8001fd4 <task_adc_update+0x14c>)
 8001eda:	483f      	ldr	r0, [pc, #252]	@ (8001fd8 <task_adc_update+0x150>)
 8001edc:	f001 fb28 	bl	8003530 <HAL_ADC_Start_DMA>
		    sample_cnt++;
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <task_adc_update+0x154>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	@ (8001fdc <task_adc_update+0x154>)
 8001ee8:	6013      	str	r3, [r2, #0]
		    sample_to_take=false;
 8001eea:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe0 <task_adc_update+0x158>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
        averaged_temp_uC = 0;
        sample_cnt = 0;
        first_sample = 1;
	}

    return;
 8001ef0:	e061      	b.n	8001fb6 <task_adc_update+0x12e>
		averaged_temp_amb /= AVERAGER_SIZE;
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe4 <task_adc_update+0x15c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8001fec <task_adc_update+0x164>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	4a39      	ldr	r2, [pc, #228]	@ (8001fe4 <task_adc_update+0x15c>)
 8001f00:	6013      	str	r3, [r2, #0]
        averaged_temp_uC /= AVERAGER_SIZE;
 8001f02:	4b39      	ldr	r3, [pc, #228]	@ (8001fe8 <task_adc_update+0x160>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a39      	ldr	r2, [pc, #228]	@ (8001fec <task_adc_update+0x164>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	4a36      	ldr	r2, [pc, #216]	@ (8001fe8 <task_adc_update+0x160>)
 8001f10:	6013      	str	r3, [r2, #0]
        temp_amb = (3.30 * 100 * averaged_temp_amb) / 4096;
 8001f12:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <task_adc_update+0x15c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fa5c 	bl	80003d4 <__aeabi_ui2d>
 8001f1c:	a328      	add	r3, pc, #160	@ (adr r3, 8001fc0 <task_adc_update+0x138>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fad1 	bl	80004c8 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff0 <task_adc_update+0x168>)
 8001f34:	f7fe fbf2 	bl	800071c <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fcd4 	bl	80008ec <__aeabi_d2uiz>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff4 <task_adc_update+0x16c>)
 8001f48:	6013      	str	r3, [r2, #0]
        temp_uC = ((1700 - averaged_temp_uC) / 4.3) + 25;
 8001f4a:	4b27      	ldr	r3, [pc, #156]	@ (8001fe8 <task_adc_update+0x160>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f5c3 63d4 	rsb	r3, r3, #1696	@ 0x6a0
 8001f52:	3304      	adds	r3, #4
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fa3d 	bl	80003d4 <__aeabi_ui2d>
 8001f5a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001fc8 <task_adc_update+0x140>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fbdc 	bl	800071c <__aeabi_ddiv>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <task_adc_update+0x170>)
 8001f72:	f7fe f8f3 	bl	800015c <__adddf3>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fcb5 	bl	80008ec <__aeabi_d2uiz>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <task_adc_update+0x174>)
 8001f86:	6013      	str	r3, [r2, #0]
        put_value_task_adc(temp_amb);
 8001f88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <task_adc_update+0x16c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f86f 	bl	8002070 <put_value_task_adc>
        put_value_task_adc(temp_uC);
 8001f92:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <task_adc_update+0x174>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f86a 	bl	8002070 <put_value_task_adc>
        averaged_temp_amb = 0;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <task_adc_update+0x15c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
        averaged_temp_uC = 0;
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <task_adc_update+0x160>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
        sample_cnt = 0;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <task_adc_update+0x154>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
        first_sample = 1;
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <task_adc_update+0x148>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
    return;
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
}
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	4074a000 	.word	0x4074a000
 8001fc8:	33333333 	.word	0x33333333
 8001fcc:	40113333 	.word	0x40113333
 8001fd0:	20000014 	.word	0x20000014
 8001fd4:	20000240 	.word	0x20000240
 8001fd8:	200000c0 	.word	0x200000c0
 8001fdc:	2000023c 	.word	0x2000023c
 8001fe0:	20000248 	.word	0x20000248
 8001fe4:	20000234 	.word	0x20000234
 8001fe8:	20000238 	.word	0x20000238
 8001fec:	88888889 	.word	0x88888889
 8001ff0:	40b00000 	.word	0x40b00000
 8001ff4:	2000035c 	.word	0x2000035c
 8001ff8:	40390000 	.word	0x40390000
 8001ffc:	20000360 	.word	0x20000360

08002000 <HAL_ADC_ConvCpltCallback>:

//	Callback de interrupción del ADC (se ejecuta cuando la conversión se completa)
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

	// Check which version of the adc triggered this callback
	if (hadc == &hadc1){
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <HAL_ADC_ConvCpltCallback+0x20>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d102      	bne.n	8002016 <HAL_ADC_ConvCpltCallback+0x16>
		sample_to_take=true;}
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <HAL_ADC_ConvCpltCallback+0x24>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
	}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	200000c0 	.word	0x200000c0
 8002024:	20000248 	.word	0x20000248

08002028 <init_queue_value_task_adc>:
}queue_task_adc;

/****** external functions definition ************************/

void init_queue_value_task_adc(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_adc.head = 0;
 800202e:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <init_queue_value_task_adc+0x44>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
	queue_task_adc.tail = 0;
 8002034:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <init_queue_value_task_adc+0x44>)
 8002036:	2200      	movs	r2, #0
 8002038:	605a      	str	r2, [r3, #4]
	queue_task_adc.count = 0;
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <init_queue_value_task_adc+0x44>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	e009      	b.n	800205a <init_queue_value_task_adc+0x32>
		queue_task_adc.queue[i] = EVENT_UNDEFINED;
 8002046:	4a09      	ldr	r2, [pc, #36]	@ (800206c <init_queue_value_task_adc+0x44>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3302      	adds	r3, #2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	22ff      	movs	r2, #255	@ 0xff
 8002052:	605a      	str	r2, [r3, #4]
	for (i = 0; i < MAX_EVENTS; i++)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b1d      	cmp	r3, #29
 800205e:	d9f2      	bls.n	8002046 <init_queue_value_task_adc+0x1e>
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	2000024c 	.word	0x2000024c

08002070 <put_value_task_adc>:

void put_value_task_adc(uint32_t adc_value)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    if (queue_task_adc.count < MAX_EVENTS)
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <put_value_task_adc+0x50>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b1d      	cmp	r3, #29
 800207e:	d81a      	bhi.n	80020b6 <put_value_task_adc+0x46>
    {
        queue_task_adc.queue[queue_task_adc.tail] = adc_value;
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <put_value_task_adc+0x50>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a0e      	ldr	r2, [pc, #56]	@ (80020c0 <put_value_task_adc+0x50>)
 8002086:	3302      	adds	r3, #2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	605a      	str	r2, [r3, #4]
        queue_task_adc.tail = (queue_task_adc.tail + 1) % MAX_EVENTS;
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <put_value_task_adc+0x50>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	1c59      	adds	r1, r3, #1
 8002096:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <put_value_task_adc+0x54>)
 8002098:	fba3 2301 	umull	r2, r3, r3, r1
 800209c:	091a      	lsrs	r2, r3, #4
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	1aca      	subs	r2, r1, r3
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <put_value_task_adc+0x50>)
 80020aa:	605a      	str	r2, [r3, #4]
        queue_task_adc.count++;
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <put_value_task_adc+0x50>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	4a03      	ldr	r2, [pc, #12]	@ (80020c0 <put_value_task_adc+0x50>)
 80020b4:	6093      	str	r3, [r2, #8]
    }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	2000024c 	.word	0x2000024c
 80020c4:	88888889 	.word	0x88888889

080020c8 <get_value_task_adc>:

uint32_t get_value_task_adc(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
    uint32_t value = 255;
 80020ce:	23ff      	movs	r3, #255	@ 0xff
 80020d0:	607b      	str	r3, [r7, #4]

    if (queue_task_adc.count > 0)
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <get_value_task_adc+0x54>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01a      	beq.n	8002110 <get_value_task_adc+0x48>
    {
        value = queue_task_adc.queue[queue_task_adc.head];
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <get_value_task_adc+0x54>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a0f      	ldr	r2, [pc, #60]	@ (800211c <get_value_task_adc+0x54>)
 80020e0:	3302      	adds	r3, #2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	607b      	str	r3, [r7, #4]
        queue_task_adc.head = (queue_task_adc.head + 1) % MAX_EVENTS;
 80020ea:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <get_value_task_adc+0x54>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	1c59      	adds	r1, r3, #1
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <get_value_task_adc+0x58>)
 80020f2:	fba3 2301 	umull	r2, r3, r3, r1
 80020f6:	091a      	lsrs	r2, r3, #4
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	1aca      	subs	r2, r1, r3
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <get_value_task_adc+0x54>)
 8002104:	601a      	str	r2, [r3, #0]
        queue_task_adc.count--;
 8002106:	4b05      	ldr	r3, [pc, #20]	@ (800211c <get_value_task_adc+0x54>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	3b01      	subs	r3, #1
 800210c:	4a03      	ldr	r2, [pc, #12]	@ (800211c <get_value_task_adc+0x54>)
 800210e:	6093      	str	r3, [r2, #8]
    }

    return value;
 8002110:	687b      	ldr	r3, [r7, #4]
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	2000024c 	.word	0x2000024c
 8002120:	88888889 	.word	0x88888889

08002124 <any_value_task_adc>:

bool any_value_task_adc(void) {
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    return (queue_task_adc.count > 0);
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <any_value_task_adc+0x1c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2000024c 	.word	0x2000024c

08002144 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 800214c:	b672      	cpsid	i
 800214e:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <task_sensor_init+0x130>)
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	4b49      	ldr	r3, [pc, #292]	@ (8002278 <task_sensor_init+0x134>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	4b48      	ldr	r3, [pc, #288]	@ (800227c <task_sensor_init+0x138>)
 800215a:	4a49      	ldr	r2, [pc, #292]	@ (8002280 <task_sensor_init+0x13c>)
 800215c:	213f      	movs	r1, #63	@ 0x3f
 800215e:	f003 f9ad 	bl	80054bc <sniprintf>
 8002162:	4603      	mov	r3, r0
 8002164:	4a47      	ldr	r2, [pc, #284]	@ (8002284 <task_sensor_init+0x140>)
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b42      	ldr	r3, [pc, #264]	@ (8002274 <task_sensor_init+0x130>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fbff 	bl	8001970 <logger_log_print_>
 8002172:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 8002174:	b672      	cpsid	i
 8002176:	4b3f      	ldr	r3, [pc, #252]	@ (8002274 <task_sensor_init+0x130>)
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	4b43      	ldr	r3, [pc, #268]	@ (8002288 <task_sensor_init+0x144>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4b42      	ldr	r3, [pc, #264]	@ (800228c <task_sensor_init+0x148>)
 8002182:	4a43      	ldr	r2, [pc, #268]	@ (8002290 <task_sensor_init+0x14c>)
 8002184:	213f      	movs	r1, #63	@ 0x3f
 8002186:	f003 f999 	bl	80054bc <sniprintf>
 800218a:	4603      	mov	r3, r0
 800218c:	4a3d      	ldr	r2, [pc, #244]	@ (8002284 <task_sensor_init+0x140>)
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b38      	ldr	r3, [pc, #224]	@ (8002274 <task_sensor_init+0x130>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fbeb 	bl	8001970 <logger_log_print_>
 800219a:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 800219c:	4b3d      	ldr	r3, [pc, #244]	@ (8002294 <task_sensor_init+0x150>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 80021a2:	b672      	cpsid	i
 80021a4:	4b33      	ldr	r3, [pc, #204]	@ (8002274 <task_sensor_init+0x130>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002294 <task_sensor_init+0x150>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <task_sensor_init+0x154>)
 80021b0:	4a3a      	ldr	r2, [pc, #232]	@ (800229c <task_sensor_init+0x158>)
 80021b2:	213f      	movs	r1, #63	@ 0x3f
 80021b4:	f003 f982 	bl	80054bc <sniprintf>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a32      	ldr	r2, [pc, #200]	@ (8002284 <task_sensor_init+0x140>)
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <task_sensor_init+0x130>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fbd4 	bl	8001970 <logger_log_print_>
 80021c8:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e046      	b.n	800225e <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4a32      	ldr	r2, [pc, #200]	@ (80022a0 <task_sensor_init+0x15c>)
 80021d6:	4413      	add	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 80021da:	b672      	cpsid	i
 80021dc:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <task_sensor_init+0x130>)
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <task_sensor_init+0x160>)
 80021e6:	4a30      	ldr	r2, [pc, #192]	@ (80022a8 <task_sensor_init+0x164>)
 80021e8:	213f      	movs	r1, #63	@ 0x3f
 80021ea:	f003 f967 	bl	80054bc <sniprintf>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4a24      	ldr	r2, [pc, #144]	@ (8002284 <task_sensor_init+0x140>)
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <task_sensor_init+0x130>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fbb9 	bl	8001970 <logger_log_print_>
 80021fe:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	791b      	ldrb	r3, [r3, #4]
 8002204:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8002206:	b672      	cpsid	i
 8002208:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <task_sensor_init+0x130>)
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4b26      	ldr	r3, [pc, #152]	@ (80022ac <task_sensor_init+0x168>)
 8002212:	4a25      	ldr	r2, [pc, #148]	@ (80022a8 <task_sensor_init+0x164>)
 8002214:	213f      	movs	r1, #63	@ 0x3f
 8002216:	f003 f951 	bl	80054bc <sniprintf>
 800221a:	4603      	mov	r3, r0
 800221c:	4a19      	ldr	r2, [pc, #100]	@ (8002284 <task_sensor_init+0x140>)
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b14      	ldr	r3, [pc, #80]	@ (8002274 <task_sensor_init+0x130>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fba3 	bl	8001970 <logger_log_print_>
 800222a:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	795b      	ldrb	r3, [r3, #5]
 8002230:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 8002232:	b672      	cpsid	i
 8002234:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <task_sensor_init+0x130>)
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	7bbb      	ldrb	r3, [r7, #14]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <task_sensor_init+0x16c>)
 800223e:	4a17      	ldr	r2, [pc, #92]	@ (800229c <task_sensor_init+0x158>)
 8002240:	213f      	movs	r1, #63	@ 0x3f
 8002242:	f003 f93b 	bl	80054bc <sniprintf>
 8002246:	4603      	mov	r3, r0
 8002248:	4a0e      	ldr	r2, [pc, #56]	@ (8002284 <task_sensor_init+0x140>)
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <task_sensor_init+0x130>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fb8d 	bl	8001970 <logger_log_print_>
 8002256:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3301      	adds	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d9b5      	bls.n	80021d0 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8002264:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <task_sensor_init+0x170>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	080069b4 	.word	0x080069b4
 8002278:	2000001c 	.word	0x2000001c
 800227c:	08006638 	.word	0x08006638
 8002280:	0800664c 	.word	0x0800664c
 8002284:	200001f8 	.word	0x200001f8
 8002288:	20000020 	.word	0x20000020
 800228c:	08006664 	.word	0x08006664
 8002290:	08006670 	.word	0x08006670
 8002294:	20000308 	.word	0x20000308
 8002298:	08006680 	.word	0x08006680
 800229c:	08006694 	.word	0x08006694
 80022a0:	200002d0 	.word	0x200002d0
 80022a4:	080066a4 	.word	0x080066a4
 80022a8:	080066ac 	.word	0x080066ac
 80022ac:	080066b8 	.word	0x080066b8
 80022b0:	080066c0 	.word	0x080066c0
 80022b4:	2000030c 	.word	0x2000030c

080022b8 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 80022c0:	2300      	movs	r3, #0
 80022c2:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 80022c4:	4b61      	ldr	r3, [pc, #388]	@ (800244c <task_sensor_update+0x194>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	4a60      	ldr	r2, [pc, #384]	@ (800244c <task_sensor_update+0x194>)
 80022cc:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 80022ce:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 80022d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002450 <task_sensor_update+0x198>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 80022d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002450 <task_sensor_update+0x198>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	4a5c      	ldr	r2, [pc, #368]	@ (8002450 <task_sensor_update+0x198>)
 80022e0:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80022e2:	2301      	movs	r3, #1
 80022e4:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80022e6:	b662      	cpsie	i

    while (b_time_update_required)
 80022e8:	e0a6      	b.n	8002438 <task_sensor_update+0x180>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 80022ea:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 80022ec:	4b58      	ldr	r3, [pc, #352]	@ (8002450 <task_sensor_update+0x198>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 80022f4:	4b56      	ldr	r3, [pc, #344]	@ (8002450 <task_sensor_update+0x198>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	4a55      	ldr	r2, [pc, #340]	@ (8002450 <task_sensor_update+0x198>)
 80022fc:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80022fe:	2301      	movs	r3, #1
 8002300:	74fb      	strb	r3, [r7, #19]
 8002302:	e001      	b.n	8002308 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002304:	2300      	movs	r3, #0
 8002306:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002308:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e08f      	b.n	8002430 <task_sensor_update+0x178>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4a4e      	ldr	r2, [pc, #312]	@ (8002454 <task_sensor_update+0x19c>)
 800231c:	4413      	add	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4a4c      	ldr	r2, [pc, #304]	@ (8002458 <task_sensor_update+0x1a0>)
 8002326:	4413      	add	r3, r2
 8002328:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	7a9c      	ldrb	r4, [r3, #10]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	891b      	ldrh	r3, [r3, #8]
 8002336:	4619      	mov	r1, r3
 8002338:	4610      	mov	r0, r2
 800233a:	f002 f939 	bl	80045b0 <HAL_GPIO_ReadPin>
 800233e:	4603      	mov	r3, r0
 8002340:	429c      	cmp	r4, r3
 8002342:	d103      	bne.n	800234c <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2201      	movs	r2, #1
 8002348:	715a      	strb	r2, [r3, #5]
 800234a:	e002      	b.n	8002352 <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2200      	movs	r2, #0
 8002350:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	791b      	ldrb	r3, [r3, #4]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d862      	bhi.n	8002420 <task_sensor_update+0x168>
 800235a:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <task_sensor_update+0xa8>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002371 	.word	0x08002371
 8002364:	08002389 	.word	0x08002389
 8002368:	080023c9 	.word	0x080023c9
 800236c:	080023e1 	.word	0x080023e1
			{
				case ST_BTN_XX_UP:

					/* SETEO LA GUARDA PARA EVITAR EL BOUNCING*/

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	795b      	ldrb	r3, [r3, #5]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d155      	bne.n	8002424 <task_sensor_update+0x16c>
					{
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2201      	movs	r2, #1
 800237c:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max /*DEL_BTN_XX_MAX al incio de la iteracion*/ ;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	601a      	str	r2, [r3, #0]

					}

					break;
 8002386:	e04d      	b.n	8002424 <task_sensor_update+0x16c>
				case ST_BTN_XX_FALLING:

					/*MIENTRAS LA GUARDA NO SEA 0, DECREMENTO POR CADA SEÑAL DE CLOCK, SI ES CERO
					 CAMBIO AL SIGUIENTE ESTADO DETERMINADO POR LA TABLA DE ESTADOS */

					if (p_task_sensor_dta->tick > 0 ){
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <task_sensor_update+0xe4>

						p_task_sensor_dta->tick --;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	601a      	str	r2, [r3, #0]
							p_task_sensor_dta->state = ST_BTN_XX_UP;

						}
					}

					break;
 800239a:	e046      	b.n	800242a <task_sensor_update+0x172>
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event){
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	795b      	ldrb	r3, [r3, #5]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10d      	bne.n	80023c0 <task_sensor_update+0x108>
							put_event_task_system(p_task_sensor_cfg->signal_down);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	7c5b      	ldrb	r3, [r3, #17]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fee3 	bl	8003174 <put_event_task_system>
							put_event_task_setup(p_task_sensor_cfg->signal_down);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	7c5b      	ldrb	r3, [r3, #17]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fafc 	bl	80029b0 <put_event_task_setup>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2202      	movs	r2, #2
 80023bc:	711a      	strb	r2, [r3, #4]
					break;
 80023be:	e034      	b.n	800242a <task_sensor_update+0x172>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2200      	movs	r2, #0
 80023c4:	711a      	strb	r2, [r3, #4]
					break;
 80023c6:	e030      	b.n	800242a <task_sensor_update+0x172>

					/*MISMO CASO QUE CUANDO SE APRETA EL BOTON, CUANDO LLEGA EL EVENTO DE SOLTAR
					 EL BOTON, SE ESPERA A QUE TRANSCURRA EL TRANSITORIO PARA LEER CORRECTAMENTE
					 EL ESTADO DEL SENSOR */

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	795b      	ldrb	r3, [r3, #5]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d12b      	bne.n	8002428 <task_sensor_update+0x170>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2203      	movs	r2, #3
 80023dc:	711a      	strb	r2, [r3, #4]
					}

					break;
 80023de:	e023      	b.n	8002428 <task_sensor_update+0x170>
				case ST_BTN_XX_RISING:

					/*UNA VEZ TRANSCURRIDO EL TRANSITORIO Y EL EVENTO DEL SENSOR ES UP, ENTONCES
					 SE PROCEDE A PONER DICHO EVENTO EN EL SISTEMA*/

					if (p_task_sensor_dta->tick > 0 )
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <task_sensor_update+0x13c>
					{
							p_task_sensor_dta->tick --;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	1e5a      	subs	r2, r3, #1
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	601a      	str	r2, [r3, #0]
							{
								p_task_sensor_dta->state = ST_BTN_XX_DOWN;
							}
					}

					break;
 80023f2:	e01a      	b.n	800242a <task_sensor_update+0x172>
					   	   if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	795b      	ldrb	r3, [r3, #5]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10d      	bne.n	8002418 <task_sensor_update+0x160>
					   		   put_event_task_setup(p_task_sensor_cfg->signal_up); // Pone un elemento en la cola (envia una señal alto al micro porduccida por el sensor marcado como INDEX
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	7c1b      	ldrb	r3, [r3, #16]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fad5 	bl	80029b0 <put_event_task_setup>
					   		   put_event_task_system(p_task_sensor_cfg->signal_up);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	7c1b      	ldrb	r3, [r3, #16]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 feb2 	bl	8003174 <put_event_task_system>
					   		   p_task_sensor_dta->state = ST_BTN_XX_UP;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2200      	movs	r2, #0
 8002414:	711a      	strb	r2, [r3, #4]
					break;
 8002416:	e008      	b.n	800242a <task_sensor_update+0x172>
								p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2202      	movs	r2, #2
 800241c:	711a      	strb	r2, [r3, #4]
					break;
 800241e:	e004      	b.n	800242a <task_sensor_update+0x172>

				default:

					break;
 8002420:	bf00      	nop
 8002422:	e002      	b.n	800242a <task_sensor_update+0x172>
					break;
 8002424:	bf00      	nop
 8002426:	e000      	b.n	800242a <task_sensor_update+0x172>
					break;
 8002428:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b06      	cmp	r3, #6
 8002434:	f67f af6c 	bls.w	8002310 <task_sensor_update+0x58>
    while (b_time_update_required)
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f47f af55 	bne.w	80022ea <task_sensor_update+0x32>
			}
		}
    }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd90      	pop	{r4, r7, pc}
 800244a:	bf00      	nop
 800244c:	20000308 	.word	0x20000308
 8002450:	2000030c 	.word	0x2000030c
 8002454:	08006a1c 	.word	0x08006a1c
 8002458:	200002d0 	.word	0x200002d0

0800245c <task_setup_init>:
volatile uint32_t g_task_menu_tick_cnt;


/********************** external functions definition ************************/
void task_setup_init(void *parameters)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
 8002462:	6078      	str	r0, [r7, #4]
	task_setup_ev_t	event;
	bool b_event;


	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_menu_init), p_task_menu);
 8002464:	b672      	cpsid	i
 8002466:	4b49      	ldr	r3, [pc, #292]	@ (800258c <task_setup_init+0x130>)
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	4b49      	ldr	r3, [pc, #292]	@ (8002590 <task_setup_init+0x134>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	4b48      	ldr	r3, [pc, #288]	@ (8002594 <task_setup_init+0x138>)
 8002472:	4a49      	ldr	r2, [pc, #292]	@ (8002598 <task_setup_init+0x13c>)
 8002474:	213f      	movs	r1, #63	@ 0x3f
 8002476:	f003 f821 	bl	80054bc <sniprintf>
 800247a:	4603      	mov	r3, r0
 800247c:	4a47      	ldr	r2, [pc, #284]	@ (800259c <task_setup_init+0x140>)
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b42      	ldr	r3, [pc, #264]	@ (800258c <task_setup_init+0x130>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fa73 	bl	8001970 <logger_log_print_>
 800248a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_menu), p_task_menu_);
 800248c:	b672      	cpsid	i
 800248e:	4b3f      	ldr	r3, [pc, #252]	@ (800258c <task_setup_init+0x130>)
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	4b43      	ldr	r3, [pc, #268]	@ (80025a0 <task_setup_init+0x144>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <task_setup_init+0x148>)
 800249a:	4a43      	ldr	r2, [pc, #268]	@ (80025a8 <task_setup_init+0x14c>)
 800249c:	213f      	movs	r1, #63	@ 0x3f
 800249e:	f003 f80d 	bl	80054bc <sniprintf>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a3d      	ldr	r2, [pc, #244]	@ (800259c <task_setup_init+0x140>)
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b38      	ldr	r3, [pc, #224]	@ (800258c <task_setup_init+0x130>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fa5f 	bl	8001970 <logger_log_print_>
 80024b2:	b662      	cpsie	i

	g_task_menu_cnt = G_TASK_MEN_CNT_INI;
 80024b4:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <task_setup_init+0x150>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_menu_cnt), g_task_menu_cnt);
 80024ba:	b672      	cpsid	i
 80024bc:	4b33      	ldr	r3, [pc, #204]	@ (800258c <task_setup_init+0x130>)
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	4b3a      	ldr	r3, [pc, #232]	@ (80025ac <task_setup_init+0x150>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	4b3a      	ldr	r3, [pc, #232]	@ (80025b0 <task_setup_init+0x154>)
 80024c8:	4a3a      	ldr	r2, [pc, #232]	@ (80025b4 <task_setup_init+0x158>)
 80024ca:	213f      	movs	r1, #63	@ 0x3f
 80024cc:	f002 fff6 	bl	80054bc <sniprintf>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4a32      	ldr	r2, [pc, #200]	@ (800259c <task_setup_init+0x140>)
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <task_setup_init+0x130>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fa48 	bl	8001970 <logger_log_print_>
 80024e0:	b662      	cpsie	i

	init_queue_event_task_setup();
 80024e2:	f000 fa41 	bl	8002968 <init_queue_event_task_setup>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_setup_dta = & task_setup_dta;
 80024e6:	4b34      	ldr	r3, [pc, #208]	@ (80025b8 <task_setup_init+0x15c>)
 80024e8:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_setup_dta->state;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	791b      	ldrb	r3, [r3, #4]
 80024ee:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80024f0:	b672      	cpsid	i
 80024f2:	4b26      	ldr	r3, [pc, #152]	@ (800258c <task_setup_init+0x130>)
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4b30      	ldr	r3, [pc, #192]	@ (80025bc <task_setup_init+0x160>)
 80024fc:	4a30      	ldr	r2, [pc, #192]	@ (80025c0 <task_setup_init+0x164>)
 80024fe:	213f      	movs	r1, #63	@ 0x3f
 8002500:	f002 ffdc 	bl	80054bc <sniprintf>
 8002504:	4603      	mov	r3, r0
 8002506:	4a25      	ldr	r2, [pc, #148]	@ (800259c <task_setup_init+0x140>)
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b20      	ldr	r3, [pc, #128]	@ (800258c <task_setup_init+0x130>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fa2e 	bl	8001970 <logger_log_print_>
 8002514:	b662      	cpsie	i

	event = p_task_setup_dta->event;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	795b      	ldrb	r3, [r3, #5]
 800251a:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 800251c:	b672      	cpsid	i
 800251e:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <task_setup_init+0x130>)
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	7abb      	ldrb	r3, [r7, #10]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4b27      	ldr	r3, [pc, #156]	@ (80025c4 <task_setup_init+0x168>)
 8002528:	4a25      	ldr	r2, [pc, #148]	@ (80025c0 <task_setup_init+0x164>)
 800252a:	213f      	movs	r1, #63	@ 0x3f
 800252c:	f002 ffc6 	bl	80054bc <sniprintf>
 8002530:	4603      	mov	r3, r0
 8002532:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <task_setup_init+0x140>)
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <task_setup_init+0x130>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fa18 	bl	8001970 <logger_log_print_>
 8002540:	b662      	cpsie	i

	b_event = p_task_setup_dta->flag;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	799b      	ldrb	r3, [r3, #6]
 8002546:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8002548:	b672      	cpsid	i
 800254a:	4b10      	ldr	r3, [pc, #64]	@ (800258c <task_setup_init+0x130>)
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	7a7b      	ldrb	r3, [r7, #9]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <task_setup_init+0xfc>
 8002554:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <task_setup_init+0x16c>)
 8002556:	e000      	b.n	800255a <task_setup_init+0xfe>
 8002558:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <task_setup_init+0x170>)
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <task_setup_init+0x174>)
 800255e:	4a1d      	ldr	r2, [pc, #116]	@ (80025d4 <task_setup_init+0x178>)
 8002560:	213f      	movs	r1, #63	@ 0x3f
 8002562:	f002 ffab 	bl	80054bc <sniprintf>
 8002566:	4603      	mov	r3, r0
 8002568:	4a0c      	ldr	r2, [pc, #48]	@ (800259c <task_setup_init+0x140>)
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b07      	ldr	r3, [pc, #28]	@ (800258c <task_setup_init+0x130>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f9fd 	bl	8001970 <logger_log_print_>
 8002576:	b662      	cpsie	i

    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8002578:	2000      	movs	r0, #0
 800257a:	f7fe feb3 	bl	80012e4 <displayInit>

	g_task_menu_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <task_setup_init+0x17c>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	080069b4 	.word	0x080069b4
 8002590:	20000024 	.word	0x20000024
 8002594:	0800670c 	.word	0x0800670c
 8002598:	0800671c 	.word	0x0800671c
 800259c:	200001f8 	.word	0x200001f8
 80025a0:	20000028 	.word	0x20000028
 80025a4:	08006734 	.word	0x08006734
 80025a8:	08006740 	.word	0x08006740
 80025ac:	20000318 	.word	0x20000318
 80025b0:	08006750 	.word	0x08006750
 80025b4:	08006760 	.word	0x08006760
 80025b8:	20000310 	.word	0x20000310
 80025bc:	08006770 	.word	0x08006770
 80025c0:	08006778 	.word	0x08006778
 80025c4:	08006784 	.word	0x08006784
 80025c8:	0800678c 	.word	0x0800678c
 80025cc:	08006794 	.word	0x08006794
 80025d0:	0800679c 	.word	0x0800679c
 80025d4:	080067a4 	.word	0x080067a4
 80025d8:	2000031c 	.word	0x2000031c

080025dc <task_setup_update>:

void task_setup_update(void *parameters)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	@ 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	task_setup_dta_t *p_task_setup_dta;
	task_system_dta_t *p_task_system_dta;

	bool b_time_update_required = false;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char menu_str[16];
    memset(menu_str, 0, sizeof(menu_str));
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	2210      	movs	r2, #16
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 ffd9 	bl	80055aa <memset>


	g_task_menu_cnt++;
 80025f8:	4bb9      	ldr	r3, [pc, #740]	@ (80028e0 <task_setup_update+0x304>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	4ab8      	ldr	r2, [pc, #736]	@ (80028e0 <task_setup_update+0x304>)
 8002600:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_menu_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8002602:	b672      	cpsid	i
    if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 8002604:	4bb7      	ldr	r3, [pc, #732]	@ (80028e4 <task_setup_update+0x308>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <task_setup_update+0x40>
    {
    	g_task_menu_tick_cnt--;
 800260c:	4bb5      	ldr	r3, [pc, #724]	@ (80028e4 <task_setup_update+0x308>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3b01      	subs	r3, #1
 8002612:	4ab4      	ldr	r2, [pc, #720]	@ (80028e4 <task_setup_update+0x308>)
 8002614:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800261c:	b662      	cpsie	i

    while (b_time_update_required)
 800261e:	e197      	b.n	8002950 <task_setup_update+0x374>
    {
		/* Protect shared resource (g_task_menu_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8002620:	b672      	cpsid	i
		if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 8002622:	4bb0      	ldr	r3, [pc, #704]	@ (80028e4 <task_setup_update+0x308>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <task_setup_update+0x60>
		{
			g_task_menu_tick_cnt--;
 800262a:	4bae      	ldr	r3, [pc, #696]	@ (80028e4 <task_setup_update+0x308>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3b01      	subs	r3, #1
 8002630:	4aac      	ldr	r2, [pc, #688]	@ (80028e4 <task_setup_update+0x308>)
 8002632:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800263a:	e002      	b.n	8002642 <task_setup_update+0x66>
		}
		else
		{
			b_time_update_required = false;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002642:	b662      	cpsie	i

    	/* Update Task Set Up Data Pointer */
		p_task_setup_dta = &task_setup_dta;
 8002644:	4ba8      	ldr	r3, [pc, #672]	@ (80028e8 <task_setup_update+0x30c>)
 8002646:	623b      	str	r3, [r7, #32]
		p_task_system_dta = &task_system_dta;
 8002648:	4ba8      	ldr	r3, [pc, #672]	@ (80028ec <task_setup_update+0x310>)
 800264a:	61fb      	str	r3, [r7, #28]

    	if (DEL_MEN_XX_MIN < p_task_setup_dta->tick)
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <task_setup_update+0x84>
		{
			p_task_setup_dta->tick--;
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1e5a      	subs	r2, r3, #1
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e177      	b.n	8002950 <task_setup_update+0x374>
		}
		else
		{

			p_task_setup_dta->tick = DEL_MEN_XX_MAX;
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002666:	601a      	str	r2, [r3, #0]

			if (true == any_event_task_setup())
 8002668:	f000 f9ea 	bl	8002a40 <any_event_task_setup>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <task_setup_update+0xa8>
			{
				p_task_setup_dta->flag = true;
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	2201      	movs	r2, #1
 8002676:	719a      	strb	r2, [r3, #6]
				p_task_setup_dta->event = get_event_task_setup();
 8002678:	f000 f9bc 	bl	80029f4 <get_event_task_setup>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_setup_dta->state)
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	791b      	ldrb	r3, [r3, #4]
 8002688:	2b04      	cmp	r3, #4
 800268a:	f200 8161 	bhi.w	8002950 <task_setup_update+0x374>
 800268e:	a201      	add	r2, pc, #4	@ (adr r2, 8002694 <task_setup_update+0xb8>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	08002915 	.word	0x08002915
 8002698:	0800273f 	.word	0x0800273f
 800269c:	080026a9 	.word	0x080026a9
 80026a0:	080027d3 	.word	0x080027d3
 80026a4:	08002839 	.word	0x08002839
			{
				case ST_SETUP_CFG_XX:

					displayCharPositionWrite(0, 0);
 80026a8:	2100      	movs	r1, #0
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7fe fe96 	bl	80013dc <displayCharPositionWrite>
					snprintf(menu_str, sizeof(menu_str), "PRESS ENTER TO");
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4a8e      	ldr	r2, [pc, #568]	@ (80028f0 <task_setup_update+0x314>)
 80026b6:	2110      	movs	r1, #16
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 feff 	bl	80054bc <sniprintf>
					displayStringWrite(menu_str);
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fee0 	bl	8001488 <displayStringWrite>
					displayCharPositionWrite(0, 1);
 80026c8:	2101      	movs	r1, #1
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7fe fe86 	bl	80013dc <displayCharPositionWrite>
					snprintf(menu_str, sizeof(menu_str), "SELECT MODE");
 80026d0:	f107 030c 	add.w	r3, r7, #12
 80026d4:	4a87      	ldr	r2, [pc, #540]	@ (80028f4 <task_setup_update+0x318>)
 80026d6:	2110      	movs	r1, #16
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 feef 	bl	80054bc <sniprintf>
					displayStringWrite(menu_str);
 80026de:	f107 030c 	add.w	r3, r7, #12
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fed0 	bl	8001488 <displayStringWrite>
					p_task_setup_dta->flag = false;
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	2200      	movs	r2, #0
 80026ec:	719a      	strb	r2, [r3, #6]


	            	if ((true == p_task_setup_dta->flag) && (EV_SETUP_BTN_ENTER_ACTIVE == p_task_setup_dta->event)){
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	799b      	ldrb	r3, [r3, #6]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 812c 	beq.w	8002950 <task_setup_update+0x374>
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	795b      	ldrb	r3, [r3, #5]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 8127 	bne.w	8002950 <task_setup_update+0x374>
	            	{
	            		displayCharPositionWrite(0, 0);
 8002702:	2100      	movs	r1, #0
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe fe69 	bl	80013dc <displayCharPositionWrite>
	            		displayStringWrite("   Enter/Next    ");
 800270a:	487b      	ldr	r0, [pc, #492]	@ (80028f8 <task_setup_update+0x31c>)
 800270c:	f7fe febc 	bl	8001488 <displayStringWrite>
	            		displayCharPositionWrite(0, 1);
 8002710:	2101      	movs	r1, #1
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe fe62 	bl	80013dc <displayCharPositionWrite>
	            		displayStringWrite(menu_str);
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe feb3 	bl	8001488 <displayStringWrite>
	            		snprintf(menu_str, sizeof(menu_str), "MODE 1");
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	4a75      	ldr	r2, [pc, #468]	@ (80028fc <task_setup_update+0x320>)
 8002728:	2110      	movs	r1, #16
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fec6 	bl	80054bc <sniprintf>
	            		p_task_setup_dta->flag = false;
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	2200      	movs	r2, #0
 8002734:	719a      	strb	r2, [r3, #6]
	            	  	p_task_setup_dta->state = ST_SETUP_ACTIVE;
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	2201      	movs	r2, #1
 800273a:	711a      	strb	r2, [r3, #4]
	            	 }

	            break;//Fin case ST_SETUP_CFG_XX
 800273c:	e108      	b.n	8002950 <task_setup_update+0x374>

				case ST_SETUP_ACTIVE:

					switch(p_task_setup_dta->event)
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	795b      	ldrb	r3, [r3, #5]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d002      	beq.n	800274c <task_setup_update+0x170>
 8002746:	2b03      	cmp	r3, #3
 8002748:	d024      	beq.n	8002794 <task_setup_update+0x1b8>
							p_task_setup_dta->flag = false;
							p_task_setup_dta->state = ST_SETUP_CFG_02;

						break;

						default:break;
 800274a:	e041      	b.n	80027d0 <task_setup_update+0x1f4>
							displayCharPositionWrite(0, 0);
 800274c:	2100      	movs	r1, #0
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe fe44 	bl	80013dc <displayCharPositionWrite>
						 	displayStringWrite(menu_str);
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fe95 	bl	8001488 <displayStringWrite>
						 	snprintf(menu_str, sizeof(menu_str), "MAX PERSONS:%lu",CANTIDAD_PERSONAS_CFG_01);
 800275e:	f107 000c 	add.w	r0, r7, #12
 8002762:	230f      	movs	r3, #15
 8002764:	4a66      	ldr	r2, [pc, #408]	@ (8002900 <task_setup_update+0x324>)
 8002766:	2110      	movs	r1, #16
 8002768:	f002 fea8 	bl	80054bc <sniprintf>
						 	displayCharPositionWrite(0, 1);
 800276c:	2101      	movs	r1, #1
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe fe34 	bl	80013dc <displayCharPositionWrite>
						 	displayStringWrite(menu_str);
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fe85 	bl	8001488 <displayStringWrite>
						 	snprintf(menu_str, sizeof(menu_str), "WAIT TIME:%lu",TIMER_CFG_01);
 800277e:	f107 000c 	add.w	r0, r7, #12
 8002782:	231e      	movs	r3, #30
 8002784:	4a5f      	ldr	r2, [pc, #380]	@ (8002904 <task_setup_update+0x328>)
 8002786:	2110      	movs	r1, #16
 8002788:	f002 fe98 	bl	80054bc <sniprintf>
						 	p_task_setup_dta->state = ST_SETUP_CFG_01;
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	2203      	movs	r2, #3
 8002790:	711a      	strb	r2, [r3, #4]
						break;
 8002792:	e01d      	b.n	80027d0 <task_setup_update+0x1f4>
							displayCharPositionWrite(0, 0);
 8002794:	2100      	movs	r1, #0
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe fe20 	bl	80013dc <displayCharPositionWrite>
							displayStringWrite("   Enter/Next    ");
 800279c:	4856      	ldr	r0, [pc, #344]	@ (80028f8 <task_setup_update+0x31c>)
 800279e:	f7fe fe73 	bl	8001488 <displayStringWrite>
							displayCharPositionWrite(0, 1);
 80027a2:	2101      	movs	r1, #1
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe fe19 	bl	80013dc <displayCharPositionWrite>
							displayStringWrite(menu_str);
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fe6a 	bl	8001488 <displayStringWrite>
							snprintf(menu_str, sizeof(menu_str), "MODE 2");
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	4a53      	ldr	r2, [pc, #332]	@ (8002908 <task_setup_update+0x32c>)
 80027ba:	2110      	movs	r1, #16
 80027bc:	4618      	mov	r0, r3
 80027be:	f002 fe7d 	bl	80054bc <sniprintf>
							p_task_setup_dta->flag = false;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	2200      	movs	r2, #0
 80027c6:	719a      	strb	r2, [r3, #6]
							p_task_setup_dta->state = ST_SETUP_CFG_02;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2204      	movs	r2, #4
 80027cc:	711a      	strb	r2, [r3, #4]
						break;
 80027ce:	bf00      	nop
						snprintf(menu_str, sizeof(menu_str), "MODE 2");
						p_task_setup_dta->flag = false;
						p_task_setup_dta->state = ST_SETUP_CFG_02;
					}*/

				break; //Fin case ST_SETUP_ACTIVE
 80027d0:	e0be      	b.n	8002950 <task_setup_update+0x374>

				case ST_SETUP_CFG_01:

					switch(p_task_setup_dta->event)
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	795b      	ldrb	r3, [r3, #5]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d002      	beq.n	80027e0 <task_setup_update+0x204>
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d00d      	beq.n	80027fa <task_setup_update+0x21e>
							p_task_setup_dta->flag = false;
							p_task_setup_dta->state = ST_SETUP_CFG_02;

						break;

						default:break;
 80027de:	e02a      	b.n	8002836 <task_setup_update+0x25a>
							p_task_system_dta->cantidad_personas = CANTIDAD_PERSONAS_CFG_01;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	220f      	movs	r2, #15
 80027e4:	805a      	strh	r2, [r3, #2]
							p_task_system_dta->timer = TIMER_CFG_01;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	221e      	movs	r2, #30
 80027ea:	809a      	strh	r2, [r3, #4]
							p_task_setup_dta->flag = false;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2200      	movs	r2, #0
 80027f0:	719a      	strb	r2, [r3, #6]
							p_task_setup_dta->state = ST_SETUP_IDLE;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2200      	movs	r2, #0
 80027f6:	711a      	strb	r2, [r3, #4]
						break;
 80027f8:	e01d      	b.n	8002836 <task_setup_update+0x25a>
							displayCharPositionWrite(0, 0);
 80027fa:	2100      	movs	r1, #0
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fe fded 	bl	80013dc <displayCharPositionWrite>
							displayStringWrite("   Enter/Next    ");
 8002802:	483d      	ldr	r0, [pc, #244]	@ (80028f8 <task_setup_update+0x31c>)
 8002804:	f7fe fe40 	bl	8001488 <displayStringWrite>
							displayCharPositionWrite(0, 1);
 8002808:	2101      	movs	r1, #1
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe fde6 	bl	80013dc <displayCharPositionWrite>
							displayStringWrite(menu_str);
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fe37 	bl	8001488 <displayStringWrite>
							snprintf(menu_str, sizeof(menu_str), "MODE 2");
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	4a3a      	ldr	r2, [pc, #232]	@ (8002908 <task_setup_update+0x32c>)
 8002820:	2110      	movs	r1, #16
 8002822:	4618      	mov	r0, r3
 8002824:	f002 fe4a 	bl	80054bc <sniprintf>
							p_task_setup_dta->flag = false;
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	2200      	movs	r2, #0
 800282c:	719a      	strb	r2, [r3, #6]
							p_task_setup_dta->state = ST_SETUP_CFG_02;
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	2204      	movs	r2, #4
 8002832:	711a      	strb	r2, [r3, #4]
						break;
 8002834:	bf00      	nop
						snprintf(menu_str, sizeof(menu_str), "MODE 2");
						p_task_setup_dta->flag = false;
						p_task_setup_dta->state = ST_SETUP_CFG_02;
					}*/

				break;//Fin case ST_SETUP_CFG_XX
 8002836:	e08b      	b.n	8002950 <task_setup_update+0x374>

				case ST_SETUP_CFG_02:

					if(false == p_task_setup_dta->flag_cfg_02)
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	79db      	ldrb	r3, [r3, #7]
 800283c:	f083 0301 	eor.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d037      	beq.n	80028b6 <task_setup_update+0x2da>
					{
						switch(p_task_setup_dta->event)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	795b      	ldrb	r3, [r3, #5]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d002      	beq.n	8002854 <task_setup_update+0x278>
 800284e:	2b03      	cmp	r3, #3
 8002850:	d02a      	beq.n	80028a8 <task_setup_update+0x2cc>
								p_task_setup_dta->flag = false;
								p_task_setup_dta->state = ST_SETUP_IDLE;

							break;

							default:break;
 8002852:	e044      	b.n	80028de <task_setup_update+0x302>
								displayCharPositionWrite(0, 0);
 8002854:	2100      	movs	r1, #0
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe fdc0 	bl	80013dc <displayCharPositionWrite>
								snprintf(menu_str, sizeof(menu_str), "MAX PERSONS: %lu",CANTIDAD_PERSONAS_CFG_02);
 800285c:	f107 000c 	add.w	r0, r7, #12
 8002860:	2314      	movs	r3, #20
 8002862:	4a2a      	ldr	r2, [pc, #168]	@ (800290c <task_setup_update+0x330>)
 8002864:	2110      	movs	r1, #16
 8002866:	f002 fe29 	bl	80054bc <sniprintf>
								displayStringWrite(menu_str);
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fe0a 	bl	8001488 <displayStringWrite>
								displayCharPositionWrite(0, 1);
 8002874:	2101      	movs	r1, #1
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fdb0 	bl	80013dc <displayCharPositionWrite>
								snprintf(menu_str, sizeof(menu_str), "WAIT TIME: %lu",TIMER_CFG_02);
 800287c:	f107 000c 	add.w	r0, r7, #12
 8002880:	232d      	movs	r3, #45	@ 0x2d
 8002882:	4a23      	ldr	r2, [pc, #140]	@ (8002910 <task_setup_update+0x334>)
 8002884:	2110      	movs	r1, #16
 8002886:	f002 fe19 	bl	80054bc <sniprintf>
								displayStringWrite(menu_str);
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fdfa 	bl	8001488 <displayStringWrite>
								p_task_setup_dta->state = ST_SETUP_CFG_02;
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	2204      	movs	r2, #4
 8002898:	711a      	strb	r2, [r3, #4]
								p_task_setup_dta->flag = false;
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2200      	movs	r2, #0
 800289e:	719a      	strb	r2, [r3, #6]
								p_task_setup_dta->flag_cfg_02 = true;
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2201      	movs	r2, #1
 80028a4:	71da      	strb	r2, [r3, #7]
							break;
 80028a6:	e01a      	b.n	80028de <task_setup_update+0x302>
								p_task_setup_dta->flag = false;
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	2200      	movs	r2, #0
 80028ac:	719a      	strb	r2, [r3, #6]
								p_task_setup_dta->state = ST_SETUP_IDLE;
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2200      	movs	r2, #0
 80028b2:	711a      	strb	r2, [r3, #4]
							break;
 80028b4:	e013      	b.n	80028de <task_setup_update+0x302>
							p_task_setup_dta->state = ST_SETUP_IDLE;
						}*/
					}
					else
					{
						if(EV_SETUP_BTN_ENTER_ACTIVE == p_task_setup_dta->event)
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	795b      	ldrb	r3, [r3, #5]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d145      	bne.n	800294a <task_setup_update+0x36e>
						{
							p_task_system_dta->cantidad_personas = CANTIDAD_PERSONAS_CFG_02;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2214      	movs	r2, #20
 80028c2:	805a      	strh	r2, [r3, #2]
							p_task_system_dta->timer = TIMER_CFG_02;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	222d      	movs	r2, #45	@ 0x2d
 80028c8:	809a      	strh	r2, [r3, #4]
							p_task_setup_dta->flag = false;
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	2200      	movs	r2, #0
 80028ce:	719a      	strb	r2, [r3, #6]
							p_task_setup_dta->flag_cfg_02 = false;
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	2200      	movs	r2, #0
 80028d4:	71da      	strb	r2, [r3, #7]
							p_task_setup_dta->state = ST_SETUP_IDLE;
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2200      	movs	r2, #0
 80028da:	711a      	strb	r2, [r3, #4]
						}
					}

				break; //Fin case ST_SETUP_CFG_02
 80028dc:	e035      	b.n	800294a <task_setup_update+0x36e>
 80028de:	e034      	b.n	800294a <task_setup_update+0x36e>
 80028e0:	20000318 	.word	0x20000318
 80028e4:	2000031c 	.word	0x2000031c
 80028e8:	20000310 	.word	0x20000310
 80028ec:	2000002c 	.word	0x2000002c
 80028f0:	080067b4 	.word	0x080067b4
 80028f4:	080067c4 	.word	0x080067c4
 80028f8:	080067d0 	.word	0x080067d0
 80028fc:	080067e4 	.word	0x080067e4
 8002900:	080067ec 	.word	0x080067ec
 8002904:	080067fc 	.word	0x080067fc
 8002908:	0800680c 	.word	0x0800680c
 800290c:	08006814 	.word	0x08006814
 8002910:	08006828 	.word	0x08006828

				case ST_SETUP_IDLE:
					snprintf(menu_str, sizeof(menu_str),"Hola mundo");
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	4a12      	ldr	r2, [pc, #72]	@ (8002964 <task_setup_update+0x388>)
 800291a:	2110      	movs	r1, #16
 800291c:	4618      	mov	r0, r3
 800291e:	f002 fdcd 	bl	80054bc <sniprintf>
					displayCharPositionWrite(0, 0);
 8002922:	2100      	movs	r1, #0
 8002924:	2000      	movs	r0, #0
 8002926:	f7fe fd59 	bl	80013dc <displayCharPositionWrite>
					displayStringWrite(menu_str);
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fdaa 	bl	8001488 <displayStringWrite>
					/*snprintf(menu_str, sizeof(menu_str), "MP = %lu WT = %lu",p_task_system_dta->cantidad_personas, p_task_system_dta->timer);
					displayCharPositionWrite(0, 1);
					displayStringWrite(menu_str);*/
					if(EV_SETUP_BTN_NEXT_ACTIVE == p_task_setup_dta->event)
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	795b      	ldrb	r3, [r3, #5]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d108      	bne.n	800294e <task_setup_update+0x372>
					{
						p_task_setup_dta->flag = false;
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2200      	movs	r2, #0
 8002940:	719a      	strb	r2, [r3, #6]
						p_task_setup_dta->state = ST_SETUP_CFG_XX;
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2202      	movs	r2, #2
 8002946:	711a      	strb	r2, [r3, #4]
					}

				break; //Fin case ST_SETUP_IDLE
 8002948:	e001      	b.n	800294e <task_setup_update+0x372>
				break; //Fin case ST_SETUP_CFG_02
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <task_setup_update+0x374>
				break; //Fin case ST_SETUP_IDLE
 800294e:	bf00      	nop
    while (b_time_update_required)
 8002950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f ae63 	bne.w	8002620 <task_setup_update+0x44>

	}//EN SWITCH
   }//EN SWITCH
  }//END ELSE
 }//END WHILE
}// END FUNCTION
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	3728      	adds	r7, #40	@ 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	08006838 	.word	0x08006838

08002968 <init_queue_event_task_setup>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_setup(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 800296e:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <init_queue_event_task_setup+0x44>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8002974:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <init_queue_event_task_setup+0x44>)
 8002976:	2200      	movs	r2, #0
 8002978:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 800297a:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <init_queue_event_task_setup+0x44>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	e008      	b.n	8002998 <init_queue_event_task_setup+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8002986:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <init_queue_event_task_setup+0x44>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	330c      	adds	r3, #12
 800298e:	22ff      	movs	r2, #255	@ 0xff
 8002990:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3301      	adds	r3, #1
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b1d      	cmp	r3, #29
 800299c:	d9f3      	bls.n	8002986 <init_queue_event_task_setup+0x1e>
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000320 	.word	0x20000320

080029b0 <put_event_task_setup>:

void put_event_task_setup(task_setup_ev_t event)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <put_event_task_setup+0x40>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	3301      	adds	r3, #1
 80029c0:	4a0b      	ldr	r2, [pc, #44]	@ (80029f0 <put_event_task_setup+0x40>)
 80029c2:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 80029c4:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <put_event_task_setup+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	4909      	ldr	r1, [pc, #36]	@ (80029f0 <put_event_task_setup+0x40>)
 80029cc:	600a      	str	r2, [r1, #0]
 80029ce:	4a08      	ldr	r2, [pc, #32]	@ (80029f0 <put_event_task_setup+0x40>)
 80029d0:	4413      	add	r3, r2
 80029d2:	79fa      	ldrb	r2, [r7, #7]
 80029d4:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <put_event_task_setup+0x40>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b1e      	cmp	r3, #30
 80029dc:	d102      	bne.n	80029e4 <put_event_task_setup+0x34>
		queue_task_a.head = 0;
 80029de:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <put_event_task_setup+0x40>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000320 	.word	0x20000320

080029f4 <get_event_task_setup>:

task_setup_ev_t get_event_task_setup(void)

{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
	task_setup_ev_t event;

	queue_task_a.count--;
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <get_event_task_setup+0x48>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	4a0e      	ldr	r2, [pc, #56]	@ (8002a3c <get_event_task_setup+0x48>)
 8002a02:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <get_event_task_setup+0x48>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a0c      	ldr	r2, [pc, #48]	@ (8002a3c <get_event_task_setup+0x48>)
 8002a0a:	4413      	add	r3, r2
 8002a0c:	7b1b      	ldrb	r3, [r3, #12]
 8002a0e:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8002a10:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <get_event_task_setup+0x48>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	4909      	ldr	r1, [pc, #36]	@ (8002a3c <get_event_task_setup+0x48>)
 8002a18:	604a      	str	r2, [r1, #4]
 8002a1a:	4a08      	ldr	r2, [pc, #32]	@ (8002a3c <get_event_task_setup+0x48>)
 8002a1c:	4413      	add	r3, r2
 8002a1e:	22ff      	movs	r2, #255	@ 0xff
 8002a20:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <get_event_task_setup+0x48>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b1e      	cmp	r3, #30
 8002a28:	d102      	bne.n	8002a30 <get_event_task_setup+0x3c>
		queue_task_a.tail = 0;
 8002a2a:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <get_event_task_setup+0x48>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]

	return event;
 8002a30:	79fb      	ldrb	r3, [r7, #7]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	20000320 	.word	0x20000320

08002a40 <any_event_task_setup>:

bool any_event_task_setup(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <any_event_task_setup+0x20>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <any_event_task_setup+0x20>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000320 	.word	0x20000320

08002a64 <task_system_init>:
uint32_t temp_amb=0;
uint32_t temp_uC=0;

/********************** external functions definition ************************/
void task_system_init(void *parameters)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	6078      	str	r0, [r7, #4]
	task_system_st_t	state;
	task_system_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_system_init), p_task_system);
 8002a6c:	b672      	cpsid	i
 8002a6e:	4b48      	ldr	r3, [pc, #288]	@ (8002b90 <task_system_init+0x12c>)
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	4b48      	ldr	r3, [pc, #288]	@ (8002b94 <task_system_init+0x130>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4b47      	ldr	r3, [pc, #284]	@ (8002b98 <task_system_init+0x134>)
 8002a7a:	4a48      	ldr	r2, [pc, #288]	@ (8002b9c <task_system_init+0x138>)
 8002a7c:	213f      	movs	r1, #63	@ 0x3f
 8002a7e:	f002 fd1d 	bl	80054bc <sniprintf>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4a46      	ldr	r2, [pc, #280]	@ (8002ba0 <task_system_init+0x13c>)
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b41      	ldr	r3, [pc, #260]	@ (8002b90 <task_system_init+0x12c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe ff6f 	bl	8001970 <logger_log_print_>
 8002a92:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_system), p_task_system_);
 8002a94:	b672      	cpsid	i
 8002a96:	4b3e      	ldr	r3, [pc, #248]	@ (8002b90 <task_system_init+0x12c>)
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	4b42      	ldr	r3, [pc, #264]	@ (8002ba4 <task_system_init+0x140>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <task_system_init+0x144>)
 8002aa2:	4a42      	ldr	r2, [pc, #264]	@ (8002bac <task_system_init+0x148>)
 8002aa4:	213f      	movs	r1, #63	@ 0x3f
 8002aa6:	f002 fd09 	bl	80054bc <sniprintf>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4a3c      	ldr	r2, [pc, #240]	@ (8002ba0 <task_system_init+0x13c>)
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b37      	ldr	r3, [pc, #220]	@ (8002b90 <task_system_init+0x12c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe ff5b 	bl	8001970 <logger_log_print_>
 8002aba:	b662      	cpsie	i

	g_task_system_cnt = G_TASK_SYS_CNT_INI;
 8002abc:	4b3c      	ldr	r3, [pc, #240]	@ (8002bb0 <task_system_init+0x14c>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_system_cnt), g_task_system_cnt);
 8002ac2:	b672      	cpsid	i
 8002ac4:	4b32      	ldr	r3, [pc, #200]	@ (8002b90 <task_system_init+0x12c>)
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <task_system_init+0x14c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	4b39      	ldr	r3, [pc, #228]	@ (8002bb4 <task_system_init+0x150>)
 8002ad0:	4a39      	ldr	r2, [pc, #228]	@ (8002bb8 <task_system_init+0x154>)
 8002ad2:	213f      	movs	r1, #63	@ 0x3f
 8002ad4:	f002 fcf2 	bl	80054bc <sniprintf>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4a31      	ldr	r2, [pc, #196]	@ (8002ba0 <task_system_init+0x13c>)
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b2c      	ldr	r3, [pc, #176]	@ (8002b90 <task_system_init+0x12c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe ff44 	bl	8001970 <logger_log_print_>
 8002ae8:	b662      	cpsie	i

	init_queue_event_task_system();
 8002aea:	f000 fb1f 	bl	800312c <init_queue_event_task_system>
	/*NOTA: Recordar que task_system_dta es una variable global declarada en task_system_attribute.h
	 por eso creo el puntero de tipo task_system_dta_t llamado p_task_system_dta, para poder
	 trabajar con ese tipo de variable, podria usar directamente la variable global pero es buena
	 practiva usar un puntero a su direccion de memoria y tabajar con el puntero*/

	p_task_system_dta = &task_system_dta;
 8002aee:	4b33      	ldr	r3, [pc, #204]	@ (8002bbc <task_system_init+0x158>)
 8002af0:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_system_dta->state;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	799b      	ldrb	r3, [r3, #6]
 8002af6:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8002af8:	b672      	cpsid	i
 8002afa:	4b25      	ldr	r3, [pc, #148]	@ (8002b90 <task_system_init+0x12c>)
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	7afb      	ldrb	r3, [r7, #11]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc0 <task_system_init+0x15c>)
 8002b04:	4a2f      	ldr	r2, [pc, #188]	@ (8002bc4 <task_system_init+0x160>)
 8002b06:	213f      	movs	r1, #63	@ 0x3f
 8002b08:	f002 fcd8 	bl	80054bc <sniprintf>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ba0 <task_system_init+0x13c>)
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b1f      	ldr	r3, [pc, #124]	@ (8002b90 <task_system_init+0x12c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe ff2a 	bl	8001970 <logger_log_print_>
 8002b1c:	b662      	cpsie	i

	event = p_task_system_dta->event;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	79db      	ldrb	r3, [r3, #7]
 8002b22:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002b24:	b672      	cpsid	i
 8002b26:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <task_system_init+0x12c>)
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	7abb      	ldrb	r3, [r7, #10]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <task_system_init+0x164>)
 8002b30:	4a24      	ldr	r2, [pc, #144]	@ (8002bc4 <task_system_init+0x160>)
 8002b32:	213f      	movs	r1, #63	@ 0x3f
 8002b34:	f002 fcc2 	bl	80054bc <sniprintf>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ba0 <task_system_init+0x13c>)
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <task_system_init+0x12c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ff14 	bl	8001970 <logger_log_print_>
 8002b48:	b662      	cpsie	i

	b_event = p_task_system_dta->flag;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	7a1b      	ldrb	r3, [r3, #8]
 8002b4e:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8002b50:	b672      	cpsid	i
 8002b52:	4b0f      	ldr	r3, [pc, #60]	@ (8002b90 <task_system_init+0x12c>)
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	7a7b      	ldrb	r3, [r7, #9]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <task_system_init+0xfc>
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <task_system_init+0x168>)
 8002b5e:	e000      	b.n	8002b62 <task_system_init+0xfe>
 8002b60:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <task_system_init+0x16c>)
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <task_system_init+0x170>)
 8002b66:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <task_system_init+0x174>)
 8002b68:	213f      	movs	r1, #63	@ 0x3f
 8002b6a:	f002 fca7 	bl	80054bc <sniprintf>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba0 <task_system_init+0x13c>)
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <task_system_init+0x12c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe fef9 	bl	8001970 <logger_log_print_>
 8002b7e:	b662      	cpsie	i

	g_task_system_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 8002b80:	4b16      	ldr	r3, [pc, #88]	@ (8002bdc <task_system_init+0x178>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	080069b4 	.word	0x080069b4
 8002b94:	20000038 	.word	0x20000038
 8002b98:	08006888 	.word	0x08006888
 8002b9c:	0800689c 	.word	0x0800689c
 8002ba0:	200001f8 	.word	0x200001f8
 8002ba4:	2000003c 	.word	0x2000003c
 8002ba8:	080068b4 	.word	0x080068b4
 8002bac:	080068c0 	.word	0x080068c0
 8002bb0:	2000034c 	.word	0x2000034c
 8002bb4:	080068d0 	.word	0x080068d0
 8002bb8:	080068e4 	.word	0x080068e4
 8002bbc:	2000002c 	.word	0x2000002c
 8002bc0:	080068f4 	.word	0x080068f4
 8002bc4:	080068fc 	.word	0x080068fc
 8002bc8:	08006908 	.word	0x08006908
 8002bcc:	08006910 	.word	0x08006910
 8002bd0:	08006918 	.word	0x08006918
 8002bd4:	08006920 	.word	0x08006920
 8002bd8:	08006928 	.word	0x08006928
 8002bdc:	20000350 	.word	0x20000350

08002be0 <task_system_update>:

void task_system_update(void *parameters)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	task_system_dta_t *p_task_system_dta;
	bool b_time_update_required = false;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]

	/* Update Task System Counter */
	g_task_system_cnt++;
 8002bec:	4bb4      	ldr	r3, [pc, #720]	@ (8002ec0 <task_system_update+0x2e0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	4ab3      	ldr	r2, [pc, #716]	@ (8002ec0 <task_system_update+0x2e0>)
 8002bf4:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_system_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8002bf6:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 8002bf8:	4bb2      	ldr	r3, [pc, #712]	@ (8002ec4 <task_system_update+0x2e4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <task_system_update+0x2e>
    {
    	g_task_system_tick_cnt--;
 8002c00:	4bb0      	ldr	r3, [pc, #704]	@ (8002ec4 <task_system_update+0x2e4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4aaf      	ldr	r2, [pc, #700]	@ (8002ec4 <task_system_update+0x2e4>)
 8002c08:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8002c0e:	b662      	cpsie	i

    while (b_time_update_required)
 8002c10:	e282      	b.n	8003118 <task_system_update+0x538>
    {
		/* Protect shared resource (g_task_system_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8002c12:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 8002c14:	4bab      	ldr	r3, [pc, #684]	@ (8002ec4 <task_system_update+0x2e4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <task_system_update+0x4c>
		{
			g_task_system_tick_cnt--;
 8002c1c:	4ba9      	ldr	r3, [pc, #676]	@ (8002ec4 <task_system_update+0x2e4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	4aa8      	ldr	r2, [pc, #672]	@ (8002ec4 <task_system_update+0x2e4>)
 8002c24:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	e001      	b.n	8002c30 <task_system_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002c30:	b662      	cpsie	i

    	/* Update Task System Data Pointer */
		p_task_system_dta = &task_system_dta;
 8002c32:	4ba5      	ldr	r3, [pc, #660]	@ (8002ec8 <task_system_update+0x2e8>)
 8002c34:	60bb      	str	r3, [r7, #8]


		// Si hay algun evento comienzo a ver cual es y dependiendo que evento haya sucedido actuo segun statechart

		if (true == any_event_task_system())
 8002c36:	f000 fae5 	bl	8003204 <any_event_task_system>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <task_system_update+0x72>
		{
			p_task_system_dta->flag = true;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2201      	movs	r2, #1
 8002c44:	721a      	strb	r2, [r3, #8]
			p_task_system_dta->event = get_event_task_system(); //Aca levanto los eventos generados por los sensores
 8002c46:	f000 fab7 	bl	80031b8 <get_event_task_system>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	71da      	strb	r2, [r3, #7]
		}

		if( true == any_value_task_adc())
 8002c52:	f7ff fa67 	bl	8002124 <any_value_task_adc>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d049      	beq.n	8002cf0 <task_system_update+0x110>
		{
				temp_uC_raw  = get_value_task_adc();
 8002c5c:	f7ff fa34 	bl	80020c8 <get_value_task_adc>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4a9a      	ldr	r2, [pc, #616]	@ (8002ecc <task_system_update+0x2ec>)
 8002c64:	6013      	str	r3, [r2, #0]
				temp_amb_raw = get_value_task_adc();
 8002c66:	f7ff fa2f 	bl	80020c8 <get_value_task_adc>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4a98      	ldr	r2, [pc, #608]	@ (8002ed0 <task_system_update+0x2f0>)
 8002c6e:	6013      	str	r3, [r2, #0]

				temp_amb = (3.30 * 100 * temp_amb_raw)/(4096);
 8002c70:	4b97      	ldr	r3, [pc, #604]	@ (8002ed0 <task_system_update+0x2f0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fbad 	bl	80003d4 <__aeabi_ui2d>
 8002c7a:	a38f      	add	r3, pc, #572	@ (adr r3, 8002eb8 <task_system_update+0x2d8>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fc22 	bl	80004c8 <__aeabi_dmul>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	4b90      	ldr	r3, [pc, #576]	@ (8002ed4 <task_system_update+0x2f4>)
 8002c92:	f7fd fd43 	bl	800071c <__aeabi_ddiv>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f7fd fe25 	bl	80008ec <__aeabi_d2uiz>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4a8c      	ldr	r2, [pc, #560]	@ (8002ed8 <task_system_update+0x2f8>)
 8002ca6:	6013      	str	r3, [r2, #0]
				LOGGER_LOG("temp_uC_raw:%lu\r\n",temp_uC_raw);
 8002ca8:	b672      	cpsid	i
 8002caa:	4b8c      	ldr	r3, [pc, #560]	@ (8002edc <task_system_update+0x2fc>)
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	4b87      	ldr	r3, [pc, #540]	@ (8002ecc <task_system_update+0x2ec>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a8b      	ldr	r2, [pc, #556]	@ (8002ee0 <task_system_update+0x300>)
 8002cb4:	213f      	movs	r1, #63	@ 0x3f
 8002cb6:	f002 fc01 	bl	80054bc <sniprintf>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4a89      	ldr	r2, [pc, #548]	@ (8002ee4 <task_system_update+0x304>)
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b86      	ldr	r3, [pc, #536]	@ (8002edc <task_system_update+0x2fc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fe53 	bl	8001970 <logger_log_print_>
 8002cca:	b662      	cpsie	i
				LOGGER_LOG("temp_amb_raw:%lu\r\n",temp_amb);
 8002ccc:	b672      	cpsid	i
 8002cce:	4b83      	ldr	r3, [pc, #524]	@ (8002edc <task_system_update+0x2fc>)
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	4b81      	ldr	r3, [pc, #516]	@ (8002ed8 <task_system_update+0x2f8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a84      	ldr	r2, [pc, #528]	@ (8002ee8 <task_system_update+0x308>)
 8002cd8:	213f      	movs	r1, #63	@ 0x3f
 8002cda:	f002 fbef 	bl	80054bc <sniprintf>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a80      	ldr	r2, [pc, #512]	@ (8002ee4 <task_system_update+0x304>)
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b7d      	ldr	r3, [pc, #500]	@ (8002edc <task_system_update+0x2fc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fe41 	bl	8001970 <logger_log_print_>
 8002cee:	b662      	cpsie	i
		}

		switch (p_task_system_dta->state)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	799b      	ldrb	r3, [r3, #6]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	f200 8204 	bhi.w	8003102 <task_system_update+0x522>
 8002cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <task_system_update+0x120>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002eed 	.word	0x08002eed
 8002d08:	08003021 	.word	0x08003021
 8002d0c:	08002e47 	.word	0x08002e47
		{

			case ST_SYS_XX_IDLE:
			{

				p_task_system_dta->flag = false;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	721a      	strb	r2, [r3, #8]
				switch(p_task_system_dta->event)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	79db      	ldrb	r3, [r3, #7]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	f200 8090 	bhi.w	8002e42 <task_system_update+0x262>
 8002d22:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <task_system_update+0x148>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d7d 	.word	0x08002d7d
 8002d2c:	08002e43 	.word	0x08002e43
 8002d30:	08002dc1 	.word	0x08002dc1
 8002d34:	08002e43 	.word	0x08002e43
 8002d38:	08002e43 	.word	0x08002e43
 8002d3c:	08002e43 	.word	0x08002e43
 8002d40:	08002d4d 	.word	0x08002d4d
 8002d44:	08002e43 	.word	0x08002e43
 8002d48:	08002e25 	.word	0x08002e25
				{
					case EV_SYS_SWITCH_OFF_ACTIVE:
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_SYSCTRL_DIS);
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f7ff f856 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_SYSCTRL_ACT);
 8002d54:	2102      	movs	r1, #2
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7ff f852 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7ff f84e 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 8002d64:	2101      	movs	r1, #1
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7ff f84a 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_BUZZER);
 8002d6c:	2104      	movs	r1, #4
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7ff f846 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_OFF;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2203      	movs	r2, #3
 8002d78:	719a      	strb	r2, [r3, #6]
					break;
 8002d7a:	e063      	b.n	8002e44 <task_system_update+0x264>

					case EV_SYS_BTN_INGRESO_ACTIVE:
						if(p_task_system_dta->tick++ > p_task_system_dta->cantidad_personas)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	b291      	uxth	r1, r2
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	8011      	strh	r1, [r2, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	8852      	ldrh	r2, [r2, #2]
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d90b      	bls.n	8002da8 <task_system_update+0x1c8>
						{
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_MIN_VEL);
 8002d90:	2101      	movs	r1, #1
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7ff f834 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7ff f830 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2201      	movs	r2, #1
 8002da4:	719a      	strb	r2, [r3, #6]
						{
							put_event_task_actuator(EV_LED_XX_ON,ID_LED_MAX_VEL);
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
						}
					break;
 8002da6:	e04d      	b.n	8002e44 <task_system_update+0x264>
							put_event_task_actuator(EV_LED_XX_ON,ID_LED_MAX_VEL);
 8002da8:	2100      	movs	r1, #0
 8002daa:	2001      	movs	r0, #1
 8002dac:	f7ff f828 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 8002db0:	2101      	movs	r1, #1
 8002db2:	2000      	movs	r0, #0
 8002db4:	f7ff f824 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	719a      	strb	r2, [r3, #6]
					break;
 8002dbe:	e041      	b.n	8002e44 <task_system_update+0x264>

					case EV_SYS_BTN_EGRESO_ACTIVE:
						if(p_task_system_dta->tick == 0)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <task_system_update+0x200>
						{
							/*Cuando no hay personas en la escalera pongo a titilar a ambos led indicadores de velocidad*/
							put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_MAX_VEL);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2002      	movs	r0, #2
 8002dcc:	f7ff f818 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_MIN_VEL);
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f7ff f814 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state= ST_SYS_XX_STOP;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	719a      	strb	r2, [r3, #6]
						{
							put_event_task_actuator(EV_LED_XX_ON,ID_LED_MAX_VEL);
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
						}
					break;
 8002dde:	e031      	b.n	8002e44 <task_system_update+0x264>
						else if(p_task_system_dta->tick-- > p_task_system_dta->cantidad_personas)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	1e5a      	subs	r2, r3, #1
 8002de6:	b291      	uxth	r1, r2
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	8011      	strh	r1, [r2, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	8852      	ldrh	r2, [r2, #2]
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d90b      	bls.n	8002e0c <task_system_update+0x22c>
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_MIN_VEL);
 8002df4:	2101      	movs	r1, #1
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7ff f802 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fe fffe 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2201      	movs	r2, #1
 8002e08:	719a      	strb	r2, [r3, #6]
					break;
 8002e0a:	e01b      	b.n	8002e44 <task_system_update+0x264>
							put_event_task_actuator(EV_LED_XX_ON,ID_LED_MAX_VEL);
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7fe fff6 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 8002e14:	2101      	movs	r1, #1
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fe fff2 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	719a      	strb	r2, [r3, #6]
					break;
 8002e22:	e00f      	b.n	8002e44 <task_system_update+0x264>

					case EV_SYS_SWITCH_BIR_ACTIVE:
							/*Cuando no hay personas en la escalera pongo a titilar a ambos led indicadores de velocidad*/
							put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_MAX_VEL);
 8002e24:	2100      	movs	r1, #0
 8002e26:	2002      	movs	r0, #2
 8002e28:	f7fe ffea 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_MIN_VEL);
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	2002      	movs	r0, #2
 8002e30:	f7fe ffe6 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->tick=0;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	801a      	strh	r2, [r3, #0]
							p_task_system_dta->state= ST_SYS_XX_STOP;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	719a      	strb	r2, [r3, #6]
					break;
 8002e40:	e000      	b.n	8002e44 <task_system_update+0x264>

					default: break;
 8002e42:	bf00      	nop

				} // fin del switch

			} break;
 8002e44:	e168      	b.n	8003118 <task_system_update+0x538>

			/* CASO SISTEMA APAGADO*/
			case ST_SYS_XX_OFF:
				p_task_system_dta->flag = false;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	721a      	strb	r2, [r3, #8]
				switch(p_task_system_dta->event)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	79db      	ldrb	r3, [r3, #7]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d018      	beq.n	8002e86 <task_system_update+0x2a6>
 8002e54:	2b07      	cmp	r3, #7
 8002e56:	d12d      	bne.n	8002eb4 <task_system_update+0x2d4>
				{

				case EV_SYS_SWITCH_OFF_ACTIVE:
					put_event_task_actuator(EV_LED_XX_ON, ID_LED_SYSCTRL_DIS);
 8002e58:	2103      	movs	r1, #3
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f7fe ffd0 	bl	8001e00 <put_event_task_actuator>
					put_event_task_actuator(EV_LED_XX_OFF, ID_LED_SYSCTRL_ACT);
 8002e60:	2102      	movs	r1, #2
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7fe ffcc 	bl	8001e00 <put_event_task_actuator>
					put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7fe ffc8 	bl	8001e00 <put_event_task_actuator>
					put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 8002e70:	2101      	movs	r1, #1
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fe ffc4 	bl	8001e00 <put_event_task_actuator>
					put_event_task_actuator(EV_LED_XX_OFF, ID_BUZZER);
 8002e78:	2104      	movs	r1, #4
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fe ffc0 	bl	8001e00 <put_event_task_actuator>
					p_task_system_dta->state = ST_SYS_XX_OFF;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2203      	movs	r2, #3
 8002e84:	719a      	strb	r2, [r3, #6]

				case EV_SYS_BTN_ON_ACTIVE:
					put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_SYSCTRL_ACT);
 8002e86:	2102      	movs	r1, #2
 8002e88:	2002      	movs	r0, #2
 8002e8a:	f7fe ffb9 	bl	8001e00 <put_event_task_actuator>
					put_event_task_actuator(EV_LED_XX_OFF, ID_LED_SYSCTRL_DIS);
 8002e8e:	2103      	movs	r1, #3
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7fe ffb5 	bl	8001e00 <put_event_task_actuator>
					put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 8002e96:	2100      	movs	r1, #0
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fe ffb1 	bl	8001e00 <put_event_task_actuator>
					put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fe ffad 	bl	8001e00 <put_event_task_actuator>
					put_event_task_actuator(EV_LED_XX_OFF, ID_BUZZER);
 8002ea6:	2104      	movs	r1, #4
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7fe ffa9 	bl	8001e00 <put_event_task_actuator>
					p_task_system_dta->state = ST_SYS_XX_IDLE;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	719a      	strb	r2, [r3, #6]

				default:
					break;
 8002eb4:	bf00      	nop

				}

			break;
 8002eb6:	e12f      	b.n	8003118 <task_system_update+0x538>
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	4074a000 	.word	0x4074a000
 8002ec0:	2000034c 	.word	0x2000034c
 8002ec4:	20000350 	.word	0x20000350
 8002ec8:	2000002c 	.word	0x2000002c
 8002ecc:	20000358 	.word	0x20000358
 8002ed0:	20000354 	.word	0x20000354
 8002ed4:	40b00000 	.word	0x40b00000
 8002ed8:	2000035c 	.word	0x2000035c
 8002edc:	080069b4 	.word	0x080069b4
 8002ee0:	08006938 	.word	0x08006938
 8002ee4:	200001f8 	.word	0x200001f8
 8002ee8:	0800694c 	.word	0x0800694c

			/* CASO SISTEMA MODO NORMAL*/
			case ST_SYS_XX_NORMAL:

				p_task_system_dta->flag = false;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	721a      	strb	r2, [r3, #8]
				switch(p_task_system_dta->event)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	79db      	ldrb	r3, [r3, #7]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	f200 808f 	bhi.w	800301c <task_system_update+0x43c>
 8002efe:	a201      	add	r2, pc, #4	@ (adr r2, 8002f04 <task_system_update+0x324>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f59 	.word	0x08002f59
 8002f08:	0800301d 	.word	0x0800301d
 8002f0c:	08002f9d 	.word	0x08002f9d
 8002f10:	0800301d 	.word	0x0800301d
 8002f14:	0800301d 	.word	0x0800301d
 8002f18:	0800301d 	.word	0x0800301d
 8002f1c:	08002f29 	.word	0x08002f29
 8002f20:	0800301d 	.word	0x0800301d
 8002f24:	08002fff 	.word	0x08002fff
				{
					case EV_SYS_SWITCH_OFF_ACTIVE:
						put_event_task_actuator(EV_LED_XX_ON, ID_LED_SYSCTRL_DIS);
 8002f28:	2103      	movs	r1, #3
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f7fe ff68 	bl	8001e00 <put_event_task_actuator>
						put_event_task_actuator(EV_LED_XX_OFF, ID_LED_SYSCTRL_ACT);
 8002f30:	2102      	movs	r1, #2
 8002f32:	2000      	movs	r0, #0
 8002f34:	f7fe ff64 	bl	8001e00 <put_event_task_actuator>
						put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fe ff60 	bl	8001e00 <put_event_task_actuator>
						put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 8002f40:	2101      	movs	r1, #1
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7fe ff5c 	bl	8001e00 <put_event_task_actuator>
						put_event_task_actuator(EV_LED_XX_OFF, ID_BUZZER);
 8002f48:	2104      	movs	r1, #4
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7fe ff58 	bl	8001e00 <put_event_task_actuator>
						p_task_system_dta->state = ST_SYS_XX_OFF;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2203      	movs	r2, #3
 8002f54:	719a      	strb	r2, [r3, #6]
						break;
 8002f56:	e062      	b.n	800301e <task_system_update+0x43e>

					case EV_SYS_BTN_INGRESO_ACTIVE:
						if(p_task_system_dta->tick++ > p_task_system_dta->cantidad_personas)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	b291      	uxth	r1, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	8011      	strh	r1, [r2, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	8852      	ldrh	r2, [r2, #2]
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d90b      	bls.n	8002f84 <task_system_update+0x3a4>
						{
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_MIN_VEL);
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f7fe ff46 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 8002f74:	2100      	movs	r1, #0
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fe ff42 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	719a      	strb	r2, [r3, #6]
						{
							put_event_task_actuator(EV_LED_XX_ON,ID_LED_MAX_VEL);
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
						}
						break;
 8002f82:	e04c      	b.n	800301e <task_system_update+0x43e>
							put_event_task_actuator(EV_LED_XX_ON,ID_LED_MAX_VEL);
 8002f84:	2100      	movs	r1, #0
 8002f86:	2001      	movs	r0, #1
 8002f88:	f7fe ff3a 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7fe ff36 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2201      	movs	r2, #1
 8002f98:	719a      	strb	r2, [r3, #6]
						break;
 8002f9a:	e040      	b.n	800301e <task_system_update+0x43e>

					case EV_SYS_BTN_EGRESO_ACTIVE:
						if(p_task_system_dta->tick == 0)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <task_system_update+0x3da>
						{
							put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_MAX_VEL);
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2002      	movs	r0, #2
 8002fa8:	f7fe ff2a 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_MIN_VEL);
 8002fac:	2101      	movs	r1, #1
 8002fae:	2002      	movs	r0, #2
 8002fb0:	f7fe ff26 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state= ST_SYS_XX_STOP;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	719a      	strb	r2, [r3, #6]
						}
						if(p_task_system_dta->tick-- > p_task_system_dta->cantidad_personas)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	1e5a      	subs	r2, r3, #1
 8002fc0:	b291      	uxth	r1, r2
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	8011      	strh	r1, [r2, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	8852      	ldrh	r2, [r2, #2]
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d90b      	bls.n	8002fe6 <task_system_update+0x406>
						{
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_MIN_VEL);
 8002fce:	2101      	movs	r1, #1
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fe ff15 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fe ff11 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	719a      	strb	r2, [r3, #6]
						{
							put_event_task_actuator(EV_LED_XX_ON,ID_LED_MAX_VEL);
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
						}
						break;
 8002fe4:	e01b      	b.n	800301e <task_system_update+0x43e>
							put_event_task_actuator(EV_LED_XX_ON,ID_LED_MAX_VEL);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7fe ff09 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7fe ff05 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	719a      	strb	r2, [r3, #6]
						break;
 8002ffc:	e00f      	b.n	800301e <task_system_update+0x43e>

					case EV_SYS_SWITCH_BIR_ACTIVE:
						put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_MAX_VEL);
 8002ffe:	2100      	movs	r1, #0
 8003000:	2002      	movs	r0, #2
 8003002:	f7fe fefd 	bl	8001e00 <put_event_task_actuator>
						put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_MIN_VEL);
 8003006:	2101      	movs	r1, #1
 8003008:	2002      	movs	r0, #2
 800300a:	f7fe fef9 	bl	8001e00 <put_event_task_actuator>
						p_task_system_dta->tick=0;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2200      	movs	r2, #0
 8003012:	801a      	strh	r2, [r3, #0]
						p_task_system_dta->state= ST_SYS_XX_STOP;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2202      	movs	r2, #2
 8003018:	719a      	strb	r2, [r3, #6]
						break;
 800301a:	e000      	b.n	800301e <task_system_update+0x43e>

					default: break;
 800301c:	bf00      	nop
				}
			break;
 800301e:	e07b      	b.n	8003118 <task_system_update+0x538>

			/* CASO SISTEMA EN STOP*/
			case ST_SYS_XX_STOP:

				p_task_system_dta->flag = false;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2200      	movs	r2, #0
 8003024:	721a      	strb	r2, [r3, #8]
				switch(p_task_system_dta->event)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	79db      	ldrb	r3, [r3, #7]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d019      	beq.n	8003062 <task_system_update+0x482>
 800302e:	2b07      	cmp	r3, #7
 8003030:	d147      	bne.n	80030c2 <task_system_update+0x4e2>
				{
					case EV_SYS_SWITCH_OFF_ACTIVE:
						put_event_task_actuator(EV_LED_XX_ON, ID_LED_SYSCTRL_DIS);
 8003032:	2103      	movs	r1, #3
 8003034:	2001      	movs	r0, #1
 8003036:	f7fe fee3 	bl	8001e00 <put_event_task_actuator>
						put_event_task_actuator(EV_LED_XX_OFF, ID_LED_SYSCTRL_ACT);
 800303a:	2102      	movs	r1, #2
 800303c:	2000      	movs	r0, #0
 800303e:	f7fe fedf 	bl	8001e00 <put_event_task_actuator>
						put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 8003042:	2100      	movs	r1, #0
 8003044:	2000      	movs	r0, #0
 8003046:	f7fe fedb 	bl	8001e00 <put_event_task_actuator>
						put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 800304a:	2101      	movs	r1, #1
 800304c:	2000      	movs	r0, #0
 800304e:	f7fe fed7 	bl	8001e00 <put_event_task_actuator>
						put_event_task_actuator(EV_LED_XX_OFF, ID_BUZZER);
 8003052:	2104      	movs	r1, #4
 8003054:	2000      	movs	r0, #0
 8003056:	f7fe fed3 	bl	8001e00 <put_event_task_actuator>
						p_task_system_dta->state = ST_SYS_XX_OFF;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2203      	movs	r2, #3
 800305e:	719a      	strb	r2, [r3, #6]
						break;
 8003060:	e04e      	b.n	8003100 <task_system_update+0x520>

					case EV_SYS_BTN_INGRESO_ACTIVE:
						if(p_task_system_dta->timer == 0)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	889b      	ldrh	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d119      	bne.n	800309e <task_system_update+0x4be>
						{
							put_event_task_actuator(EV_LED_XX_OFF,ID_BUZZER);
 800306a:	2104      	movs	r1, #4
 800306c:	2000      	movs	r0, #0
 800306e:	f7fe fec7 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_SYSCTRL_ACT);
 8003072:	2102      	movs	r1, #2
 8003074:	2001      	movs	r0, #1
 8003076:	f7fe fec3 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_MAX_VEL);
 800307a:	2100      	movs	r1, #0
 800307c:	2001      	movs	r0, #1
 800307e:	f7fe febf 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 8003082:	2101      	movs	r1, #1
 8003084:	2000      	movs	r0, #0
 8003086:	f7fe febb 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->tick++;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	801a      	strh	r2, [r3, #0]
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2201      	movs	r2, #1
 800309a:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_MAX_VEL);
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
							p_task_system_dta->tick++;
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
						}
						break;
 800309c:	e030      	b.n	8003100 <task_system_update+0x520>
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_MAX_VEL);
 800309e:	2100      	movs	r1, #0
 80030a0:	2001      	movs	r0, #1
 80030a2:	f7fe fead 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 80030a6:	2101      	movs	r1, #1
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7fe fea9 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->tick++;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	801a      	strh	r2, [r3, #0]
							p_task_system_dta->state = ST_SYS_XX_NORMAL;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2201      	movs	r2, #1
 80030be:	719a      	strb	r2, [r3, #6]
						break;
 80030c0:	e01e      	b.n	8003100 <task_system_update+0x520>

					default:
						if(p_task_system_dta->timer == 0)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	889b      	ldrh	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d113      	bne.n	80030f2 <task_system_update+0x512>
						{
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_SYSCTRL_ACT);
 80030ca:	2102      	movs	r1, #2
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7fe fe97 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MAX_VEL);
 80030d2:	2100      	movs	r1, #0
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7fe fe93 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_MIN_VEL);
 80030da:	2101      	movs	r1, #1
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fe fe8f 	bl	8001e00 <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_ON, ID_BUZZER);
 80030e2:	2104      	movs	r1, #4
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7fe fe8b 	bl	8001e00 <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_STOP;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2202      	movs	r2, #2
 80030ee:	719a      	strb	r2, [r3, #6]
						}
						else
						{
							p_task_system_dta->timer--;
						}
						break;
 80030f0:	e005      	b.n	80030fe <task_system_update+0x51e>
							p_task_system_dta->timer--;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	889b      	ldrh	r3, [r3, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	809a      	strh	r2, [r3, #4]
						break;
 80030fe:	bf00      	nop
				}

			break; // Fin case ST_SYS_XX_STOP:
 8003100:	e00a      	b.n	8003118 <task_system_update+0x538>

		default:
			if(p_task_system_dta->event == EV_SYS_BTN_ON_IDLE)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	79db      	ldrb	r3, [r3, #7]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d106      	bne.n	8003118 <task_system_update+0x538>
			{
				put_event_task_actuator(EV_LED_XX_PULSE, ID_LED_SYSCTRL_ACT);
 800310a:	2102      	movs	r1, #2
 800310c:	2003      	movs	r0, #3
 800310e:	f7fe fe77 	bl	8001e00 <put_event_task_actuator>
				p_task_system_dta->state = ST_SYS_XX_IDLE;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2200      	movs	r2, #0
 8003116:	719a      	strb	r2, [r3, #6]
    while (b_time_update_required)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f47f ad79 	bne.w	8002c12 <task_system_update+0x32>
				/*Mientras el sistema este en reposo estoy dentro del modo setup y el
				 led de sistema activo emite luz en forma de pulsos*/
			}
		}
	}
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop

0800312c <init_queue_event_task_system>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_system(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_sys.head = 0;
 8003132:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <init_queue_event_task_system+0x44>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
	queue_task_sys.tail = 0;
 8003138:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <init_queue_event_task_system+0x44>)
 800313a:	2200      	movs	r2, #0
 800313c:	605a      	str	r2, [r3, #4]
	queue_task_sys.count = 0;
 800313e:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <init_queue_event_task_system+0x44>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8003144:	2300      	movs	r3, #0
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	e008      	b.n	800315c <init_queue_event_task_system+0x30>
		queue_task_sys.queue[i] = EVENT_UNDEFINED;
 800314a:	4a09      	ldr	r2, [pc, #36]	@ (8003170 <init_queue_event_task_system+0x44>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	330c      	adds	r3, #12
 8003152:	22ff      	movs	r2, #255	@ 0xff
 8003154:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3301      	adds	r3, #1
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b1d      	cmp	r3, #29
 8003160:	d9f3      	bls.n	800314a <init_queue_event_task_system+0x1e>
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000364 	.word	0x20000364

08003174 <put_event_task_system>:

void put_event_task_system(task_system_ev_t event)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
	queue_task_sys.count++;
 800317e:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <put_event_task_system+0x40>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	3301      	adds	r3, #1
 8003184:	4a0b      	ldr	r2, [pc, #44]	@ (80031b4 <put_event_task_system+0x40>)
 8003186:	6093      	str	r3, [r2, #8]
	queue_task_sys.queue[queue_task_sys.head++] = event;
 8003188:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <put_event_task_system+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	4909      	ldr	r1, [pc, #36]	@ (80031b4 <put_event_task_system+0x40>)
 8003190:	600a      	str	r2, [r1, #0]
 8003192:	4a08      	ldr	r2, [pc, #32]	@ (80031b4 <put_event_task_system+0x40>)
 8003194:	4413      	add	r3, r2
 8003196:	79fa      	ldrb	r2, [r7, #7]
 8003198:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_sys.head)
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <put_event_task_system+0x40>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b1e      	cmp	r3, #30
 80031a0:	d102      	bne.n	80031a8 <put_event_task_system+0x34>
		queue_task_sys.head = 0;
 80031a2:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <put_event_task_system+0x40>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000364 	.word	0x20000364

080031b8 <get_event_task_system>:

task_system_ev_t get_event_task_system(void)

{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
	task_system_ev_t event;

	queue_task_sys.count--;
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <get_event_task_system+0x48>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003200 <get_event_task_system+0x48>)
 80031c6:	6093      	str	r3, [r2, #8]
	event = queue_task_sys.queue[queue_task_sys.tail];
 80031c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <get_event_task_system+0x48>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003200 <get_event_task_system+0x48>)
 80031ce:	4413      	add	r3, r2
 80031d0:	7b1b      	ldrb	r3, [r3, #12]
 80031d2:	71fb      	strb	r3, [r7, #7]
	queue_task_sys.queue[queue_task_sys.tail++] = EVENT_UNDEFINED;
 80031d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <get_event_task_system+0x48>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	4909      	ldr	r1, [pc, #36]	@ (8003200 <get_event_task_system+0x48>)
 80031dc:	604a      	str	r2, [r1, #4]
 80031de:	4a08      	ldr	r2, [pc, #32]	@ (8003200 <get_event_task_system+0x48>)
 80031e0:	4413      	add	r3, r2
 80031e2:	22ff      	movs	r2, #255	@ 0xff
 80031e4:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_sys.tail)
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <get_event_task_system+0x48>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b1e      	cmp	r3, #30
 80031ec:	d102      	bne.n	80031f4 <get_event_task_system+0x3c>
		queue_task_sys.tail = 0;
 80031ee:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <get_event_task_system+0x48>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	605a      	str	r2, [r3, #4]

	return event;
 80031f4:	79fb      	ldrb	r3, [r7, #7]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	20000364 	.word	0x20000364

08003204 <any_event_task_system>:
	tail: apunta a la posición del próximo evento a extraer.
 Si ambos índices son iguales, significa que la cola está vacía (return false).
 Si son diferentes, hay al menos un evento pendiente en la cola (return true).*/

bool any_event_task_system(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return (queue_task_sys.head != queue_task_sys.tail);
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <any_event_task_system+0x20>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <any_event_task_system+0x20>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000364 	.word	0x20000364

08003228 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003228:	f7fd ff0e 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800322c:	480b      	ldr	r0, [pc, #44]	@ (800325c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800322e:	490c      	ldr	r1, [pc, #48]	@ (8003260 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003230:	4a0c      	ldr	r2, [pc, #48]	@ (8003264 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003234:	e002      	b.n	800323c <LoopCopyDataInit>

08003236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800323a:	3304      	adds	r3, #4

0800323c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800323c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003240:	d3f9      	bcc.n	8003236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003242:	4a09      	ldr	r2, [pc, #36]	@ (8003268 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003244:	4c09      	ldr	r4, [pc, #36]	@ (800326c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003248:	e001      	b.n	800324e <LoopFillZerobss>

0800324a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800324a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800324c:	3204      	adds	r2, #4

0800324e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003250:	d3fb      	bcc.n	800324a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003252:	f002 f9ff 	bl	8005654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003256:	f7fd fb69 	bl	800092c <main>
  bx lr
 800325a:	4770      	bx	lr
  ldr r0, =_sdata
 800325c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003260:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8003264:	08006af8 	.word	0x08006af8
  ldr r2, =_sbss
 8003268:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800326c:	200004e0 	.word	0x200004e0

08003270 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003270:	e7fe      	b.n	8003270 <CAN1_RX1_IRQHandler>
	...

08003274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003278:	4b08      	ldr	r3, [pc, #32]	@ (800329c <HAL_Init+0x28>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a07      	ldr	r2, [pc, #28]	@ (800329c <HAL_Init+0x28>)
 800327e:	f043 0310 	orr.w	r3, r3, #16
 8003282:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003284:	2003      	movs	r0, #3
 8003286:	f000 fdd9 	bl	8003e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800328a:	2000      	movs	r0, #0
 800328c:	f000 f808 	bl	80032a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003290:	f7fd fd0a 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40022000 	.word	0x40022000

080032a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a8:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <HAL_InitTick+0x54>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <HAL_InitTick+0x58>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fdf1 	bl	8003ea6 <HAL_SYSTICK_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e00e      	b.n	80032ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d80a      	bhi.n	80032ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d4:	2200      	movs	r2, #0
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	f000 fdb9 	bl	8003e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032e0:	4a06      	ldr	r2, [pc, #24]	@ (80032fc <HAL_InitTick+0x5c>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000044 	.word	0x20000044
 80032fc:	20000040 	.word	0x20000040

08003300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_IncTick+0x1c>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_IncTick+0x20>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4413      	add	r3, r2
 8003310:	4a03      	ldr	r2, [pc, #12]	@ (8003320 <HAL_IncTick+0x20>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	20000044 	.word	0x20000044
 8003320:	20000390 	.word	0x20000390

08003324 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return uwTick;
 8003328:	4b02      	ldr	r3, [pc, #8]	@ (8003334 <HAL_GetTick+0x10>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	20000390 	.word	0x20000390

08003338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003340:	f7ff fff0 	bl	8003324 <HAL_GetTick>
 8003344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d005      	beq.n	800335e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003352:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <HAL_Delay+0x44>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800335e:	bf00      	nop
 8003360:	f7ff ffe0 	bl	8003324 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	429a      	cmp	r2, r3
 800336e:	d8f7      	bhi.n	8003360 <HAL_Delay+0x28>
  {
  }
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000044 	.word	0x20000044

08003380 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0be      	b.n	8003520 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fca4 	bl	8000d0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fbbd 	bl	8003b44 <ADC_ConversionStop_Disable>
 80033ca:	4603      	mov	r3, r0
 80033cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 8099 	bne.w	800350e <HAL_ADC_Init+0x18e>
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 8095 	bne.w	800350e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033ec:	f023 0302 	bic.w	r3, r3, #2
 80033f0:	f043 0202 	orr.w	r2, r3, #2
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003400:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7b1b      	ldrb	r3, [r3, #12]
 8003406:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003408:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	4313      	orrs	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003418:	d003      	beq.n	8003422 <HAL_ADC_Init+0xa2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d102      	bne.n	8003428 <HAL_ADC_Init+0xa8>
 8003422:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003426:	e000      	b.n	800342a <HAL_ADC_Init+0xaa>
 8003428:	2300      	movs	r3, #0
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7d1b      	ldrb	r3, [r3, #20]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d119      	bne.n	800346c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7b1b      	ldrb	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	3b01      	subs	r3, #1
 8003446:	035a      	lsls	r2, r3, #13
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e00b      	b.n	800346c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <HAL_ADC_Init+0x1a8>)
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	430b      	orrs	r3, r1
 8003492:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800349c:	d003      	beq.n	80034a6 <HAL_ADC_Init+0x126>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d104      	bne.n	80034b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	051b      	lsls	r3, r3, #20
 80034ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	4b18      	ldr	r3, [pc, #96]	@ (800352c <HAL_ADC_Init+0x1ac>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d10b      	bne.n	80034ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034ea:	e018      	b.n	800351e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f0:	f023 0312 	bic.w	r3, r3, #18
 80034f4:	f043 0210 	orr.w	r2, r3, #16
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800350c:	e007      	b.n	800351e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	f043 0210 	orr.w	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800351e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	ffe1f7fd 	.word	0xffe1f7fd
 800352c:	ff1f0efe 	.word	0xff1f0efe

08003530 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a64      	ldr	r2, [pc, #400]	@ (80036d8 <HAL_ADC_Start_DMA+0x1a8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_ADC_Start_DMA+0x24>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a63      	ldr	r2, [pc, #396]	@ (80036dc <HAL_ADC_Start_DMA+0x1ac>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d106      	bne.n	8003562 <HAL_ADC_Start_DMA+0x32>
 8003554:	4b60      	ldr	r3, [pc, #384]	@ (80036d8 <HAL_ADC_Start_DMA+0x1a8>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800355c:	2b00      	cmp	r3, #0
 800355e:	f040 80b3 	bne.w	80036c8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_ADC_Start_DMA+0x40>
 800356c:	2302      	movs	r3, #2
 800356e:	e0ae      	b.n	80036ce <HAL_ADC_Start_DMA+0x19e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fa89 	bl	8003a90 <ADC_Enable>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f040 809a 	bne.w	80036be <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a4e      	ldr	r2, [pc, #312]	@ (80036dc <HAL_ADC_Start_DMA+0x1ac>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d105      	bne.n	80035b4 <HAL_ADC_Start_DMA+0x84>
 80035a8:	4b4b      	ldr	r3, [pc, #300]	@ (80036d8 <HAL_ADC_Start_DMA+0x1a8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d115      	bne.n	80035e0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d026      	beq.n	800361c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035de:	e01d      	b.n	800361c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a39      	ldr	r2, [pc, #228]	@ (80036d8 <HAL_ADC_Start_DMA+0x1a8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_ADC_Start_DMA+0xd0>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a38      	ldr	r2, [pc, #224]	@ (80036dc <HAL_ADC_Start_DMA+0x1ac>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10d      	bne.n	800361c <HAL_ADC_Start_DMA+0xec>
 8003600:	4b35      	ldr	r3, [pc, #212]	@ (80036d8 <HAL_ADC_Start_DMA+0x1a8>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003614:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d006      	beq.n	8003636 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	f023 0206 	bic.w	r2, r3, #6
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003634:	e002      	b.n	800363c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a25      	ldr	r2, [pc, #148]	@ (80036e0 <HAL_ADC_Start_DMA+0x1b0>)
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <HAL_ADC_Start_DMA+0x1b4>)
 8003652:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a23      	ldr	r2, [pc, #140]	@ (80036e8 <HAL_ADC_Start_DMA+0x1b8>)
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0202 	mvn.w	r2, #2
 8003664:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003674:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a18      	ldr	r0, [r3, #32]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	334c      	adds	r3, #76	@ 0x4c
 8003680:	4619      	mov	r1, r3
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f000 fc7b 	bl	8003f80 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003694:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003698:	d108      	bne.n	80036ac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80036a8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80036aa:	e00f      	b.n	80036cc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80036ba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80036bc:	e006      	b.n	80036cc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80036c6:	e001      	b.n	80036cc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40012400 	.word	0x40012400
 80036dc:	40012800 	.word	0x40012800
 80036e0:	08003bc7 	.word	0x08003bc7
 80036e4:	08003c43 	.word	0x08003c43
 80036e8:	08003c5f 	.word	0x08003c5f

080036ec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d03e      	beq.n	800378c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d039      	beq.n	800378c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800373a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800373e:	d11d      	bne.n	800377c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003744:	2b00      	cmp	r3, #0
 8003746:	d119      	bne.n	800377c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0220 	bic.w	r2, r2, #32
 8003756:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7fe fc3f 	bl	8002000 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f06f 0212 	mvn.w	r2, #18
 800378a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d04d      	beq.n	8003832 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d048      	beq.n	8003832 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80037c2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80037c6:	d012      	beq.n	80037ee <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d125      	bne.n	8003822 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80037e0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80037e4:	d11d      	bne.n	8003822 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d119      	bne.n	8003822 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037fc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003802:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	f043 0201 	orr.w	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa35 	bl	8003c92 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 020c 	mvn.w	r2, #12
 8003830:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d012      	beq.n	8003862 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f812 	bl	800387c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0201 	mvn.w	r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x20>
 80038bc:	2302      	movs	r3, #2
 80038be:	e0dc      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x1da>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b06      	cmp	r3, #6
 80038ce:	d81c      	bhi.n	800390a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	3b05      	subs	r3, #5
 80038e2:	221f      	movs	r2, #31
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	4019      	ands	r1, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	3b05      	subs	r3, #5
 80038fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	635a      	str	r2, [r3, #52]	@ 0x34
 8003908:	e03c      	b.n	8003984 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d81c      	bhi.n	800394c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	3b23      	subs	r3, #35	@ 0x23
 8003924:	221f      	movs	r2, #31
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	4019      	ands	r1, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	3b23      	subs	r3, #35	@ 0x23
 800393e:	fa00 f203 	lsl.w	r2, r0, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
 800394a:	e01b      	b.n	8003984 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	3b41      	subs	r3, #65	@ 0x41
 800395e:	221f      	movs	r2, #31
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	4019      	ands	r1, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	3b41      	subs	r3, #65	@ 0x41
 8003978:	fa00 f203 	lsl.w	r2, r0, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b09      	cmp	r3, #9
 800398a:	d91c      	bls.n	80039c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68d9      	ldr	r1, [r3, #12]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	3b1e      	subs	r3, #30
 800399e:	2207      	movs	r2, #7
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	4019      	ands	r1, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6898      	ldr	r0, [r3, #8]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	3b1e      	subs	r3, #30
 80039b8:	fa00 f203 	lsl.w	r2, r0, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]
 80039c4:	e019      	b.n	80039fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6919      	ldr	r1, [r3, #16]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	2207      	movs	r2, #7
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	4019      	ands	r1, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6898      	ldr	r0, [r3, #8]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4413      	add	r3, r2
 80039ee:	fa00 f203 	lsl.w	r2, r0, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d003      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a06:	2b11      	cmp	r3, #17
 8003a08:	d132      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d125      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d126      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003a30:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d11a      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a3a:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a13      	ldr	r2, [pc, #76]	@ (8003a8c <HAL_ADC_ConfigChannel+0x1ec>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	0c9a      	lsrs	r2, r3, #18
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a50:	e002      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f9      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x1b2>
 8003a5e:	e007      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	40012400 	.word	0x40012400
 8003a88:	20000000 	.word	0x20000000
 8003a8c:	431bde83 	.word	0x431bde83

08003a90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d040      	beq.n	8003b30 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003abe:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <ADC_Enable+0xac>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b40 <ADC_Enable+0xb0>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	0c9b      	lsrs	r3, r3, #18
 8003aca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003acc:	e002      	b.n	8003ad4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f9      	bne.n	8003ace <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ada:	f7ff fc23 	bl	8003324 <HAL_GetTick>
 8003ade:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003ae0:	e01f      	b.n	8003b22 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ae2:	f7ff fc1f 	bl	8003324 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d918      	bls.n	8003b22 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d011      	beq.n	8003b22 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	f043 0210 	orr.w	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	f043 0201 	orr.w	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e007      	b.n	8003b32 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d1d8      	bne.n	8003ae2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	431bde83 	.word	0x431bde83

08003b44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d12e      	bne.n	8003bbc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b6e:	f7ff fbd9 	bl	8003324 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b74:	e01b      	b.n	8003bae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b76:	f7ff fbd5 	bl	8003324 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d914      	bls.n	8003bae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10d      	bne.n	8003bae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e007      	b.n	8003bbe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d0dc      	beq.n	8003b76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d127      	bne.n	8003c30 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003bf6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003bfa:	d115      	bne.n	8003c28 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d111      	bne.n	8003c28 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7fe f9e9 	bl	8002000 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003c2e:	e004      	b.n	8003c3a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fe0a 	bl	800386a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7c:	f043 0204 	orr.w	r2, r3, #4
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7ff fe02 	bl	800388e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd6:	4a04      	ldr	r2, [pc, #16]	@ (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	60d3      	str	r3, [r2, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0307 	and.w	r3, r3, #7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db0b      	blt.n	8003d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4906      	ldr	r1, [pc, #24]	@ (8003d3c <__NVIC_EnableIRQ+0x34>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2001      	movs	r0, #1
 8003d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	e000e100 	.word	0xe000e100

08003d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	db0a      	blt.n	8003d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	490c      	ldr	r1, [pc, #48]	@ (8003d8c <__NVIC_SetPriority+0x4c>)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	0112      	lsls	r2, r2, #4
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	440b      	add	r3, r1
 8003d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d68:	e00a      	b.n	8003d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4908      	ldr	r1, [pc, #32]	@ (8003d90 <__NVIC_SetPriority+0x50>)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	3b04      	subs	r3, #4
 8003d78:	0112      	lsls	r2, r2, #4
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	761a      	strb	r2, [r3, #24]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	e000e100 	.word	0xe000e100
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f1c3 0307 	rsb	r3, r3, #7
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	bf28      	it	cs
 8003db2:	2304      	movcs	r3, #4
 8003db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d902      	bls.n	8003dc4 <NVIC_EncodePriority+0x30>
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3b03      	subs	r3, #3
 8003dc2:	e000      	b.n	8003dc6 <NVIC_EncodePriority+0x32>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43d9      	mvns	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dec:	4313      	orrs	r3, r2
         );
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3724      	adds	r7, #36	@ 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e08:	d301      	bcc.n	8003e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e00f      	b.n	8003e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e38 <SysTick_Config+0x40>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e16:	210f      	movs	r1, #15
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	f7ff ff90 	bl	8003d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e20:	4b05      	ldr	r3, [pc, #20]	@ (8003e38 <SysTick_Config+0x40>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e26:	4b04      	ldr	r3, [pc, #16]	@ (8003e38 <SysTick_Config+0x40>)
 8003e28:	2207      	movs	r2, #7
 8003e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000e010 	.word	0xe000e010

08003e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff2d 	bl	8003ca4 <__NVIC_SetPriorityGrouping>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b086      	sub	sp, #24
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e64:	f7ff ff42 	bl	8003cec <__NVIC_GetPriorityGrouping>
 8003e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	f7ff ff90 	bl	8003d94 <NVIC_EncodePriority>
 8003e74:	4602      	mov	r2, r0
 8003e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ff5f 	bl	8003d40 <__NVIC_SetPriority>
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff35 	bl	8003d08 <__NVIC_EnableIRQ>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ffa2 	bl	8003df8 <SysTick_Config>
 8003eb4:	4603      	mov	r3, r0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003ec2:	f7fd f9e5 	bl	8001290 <HAL_SYSTICK_Callback>
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e043      	b.n	8003f6a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <HAL_DMA_Init+0xa8>)
 8003eea:	4413      	add	r3, r2
 8003eec:	4a22      	ldr	r2, [pc, #136]	@ (8003f78 <HAL_DMA_Init+0xac>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	009a      	lsls	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f7c <HAL_DMA_Init+0xb0>)
 8003efe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f16:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003f1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	bffdfff8 	.word	0xbffdfff8
 8003f78:	cccccccd 	.word	0xcccccccd
 8003f7c:	40020000 	.word	0x40020000

08003f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_DMA_Start_IT+0x20>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e04b      	b.n	8004038 <HAL_DMA_Start_IT+0xb8>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d13a      	bne.n	800402a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f937 	bl	800424c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 020e 	orr.w	r2, r2, #14
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	e00f      	b.n	8004018 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0204 	bic.w	r2, r2, #4
 8004006:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 020a 	orr.w	r2, r2, #10
 8004016:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e005      	b.n	8004036 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004032:	2302      	movs	r3, #2
 8004034:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004036:	7dfb      	ldrb	r3, [r7, #23]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	2204      	movs	r2, #4
 800405e:	409a      	lsls	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d04f      	beq.n	8004108 <HAL_DMA_IRQHandler+0xc8>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04a      	beq.n	8004108 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d107      	bne.n	8004090 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0204 	bic.w	r2, r2, #4
 800408e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a66      	ldr	r2, [pc, #408]	@ (8004230 <HAL_DMA_IRQHandler+0x1f0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d029      	beq.n	80040ee <HAL_DMA_IRQHandler+0xae>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a65      	ldr	r2, [pc, #404]	@ (8004234 <HAL_DMA_IRQHandler+0x1f4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d022      	beq.n	80040ea <HAL_DMA_IRQHandler+0xaa>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a63      	ldr	r2, [pc, #396]	@ (8004238 <HAL_DMA_IRQHandler+0x1f8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01a      	beq.n	80040e4 <HAL_DMA_IRQHandler+0xa4>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a62      	ldr	r2, [pc, #392]	@ (800423c <HAL_DMA_IRQHandler+0x1fc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d012      	beq.n	80040de <HAL_DMA_IRQHandler+0x9e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a60      	ldr	r2, [pc, #384]	@ (8004240 <HAL_DMA_IRQHandler+0x200>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00a      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x98>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004244 <HAL_DMA_IRQHandler+0x204>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d102      	bne.n	80040d2 <HAL_DMA_IRQHandler+0x92>
 80040cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80040d0:	e00e      	b.n	80040f0 <HAL_DMA_IRQHandler+0xb0>
 80040d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80040d6:	e00b      	b.n	80040f0 <HAL_DMA_IRQHandler+0xb0>
 80040d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80040dc:	e008      	b.n	80040f0 <HAL_DMA_IRQHandler+0xb0>
 80040de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80040e2:	e005      	b.n	80040f0 <HAL_DMA_IRQHandler+0xb0>
 80040e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040e8:	e002      	b.n	80040f0 <HAL_DMA_IRQHandler+0xb0>
 80040ea:	2340      	movs	r3, #64	@ 0x40
 80040ec:	e000      	b.n	80040f0 <HAL_DMA_IRQHandler+0xb0>
 80040ee:	2304      	movs	r3, #4
 80040f0:	4a55      	ldr	r2, [pc, #340]	@ (8004248 <HAL_DMA_IRQHandler+0x208>)
 80040f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8094 	beq.w	8004226 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004106:	e08e      	b.n	8004226 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	2202      	movs	r2, #2
 800410e:	409a      	lsls	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d056      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x186>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d051      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 020a 	bic.w	r2, r2, #10
 800413e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a38      	ldr	r2, [pc, #224]	@ (8004230 <HAL_DMA_IRQHandler+0x1f0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d029      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x166>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a37      	ldr	r2, [pc, #220]	@ (8004234 <HAL_DMA_IRQHandler+0x1f4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x162>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a35      	ldr	r2, [pc, #212]	@ (8004238 <HAL_DMA_IRQHandler+0x1f8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01a      	beq.n	800419c <HAL_DMA_IRQHandler+0x15c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a34      	ldr	r2, [pc, #208]	@ (800423c <HAL_DMA_IRQHandler+0x1fc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d012      	beq.n	8004196 <HAL_DMA_IRQHandler+0x156>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a32      	ldr	r2, [pc, #200]	@ (8004240 <HAL_DMA_IRQHandler+0x200>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00a      	beq.n	8004190 <HAL_DMA_IRQHandler+0x150>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a31      	ldr	r2, [pc, #196]	@ (8004244 <HAL_DMA_IRQHandler+0x204>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d102      	bne.n	800418a <HAL_DMA_IRQHandler+0x14a>
 8004184:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004188:	e00e      	b.n	80041a8 <HAL_DMA_IRQHandler+0x168>
 800418a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800418e:	e00b      	b.n	80041a8 <HAL_DMA_IRQHandler+0x168>
 8004190:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004194:	e008      	b.n	80041a8 <HAL_DMA_IRQHandler+0x168>
 8004196:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800419a:	e005      	b.n	80041a8 <HAL_DMA_IRQHandler+0x168>
 800419c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041a0:	e002      	b.n	80041a8 <HAL_DMA_IRQHandler+0x168>
 80041a2:	2320      	movs	r3, #32
 80041a4:	e000      	b.n	80041a8 <HAL_DMA_IRQHandler+0x168>
 80041a6:	2302      	movs	r3, #2
 80041a8:	4a27      	ldr	r2, [pc, #156]	@ (8004248 <HAL_DMA_IRQHandler+0x208>)
 80041aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d034      	beq.n	8004226 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80041c4:	e02f      	b.n	8004226 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	2208      	movs	r2, #8
 80041cc:	409a      	lsls	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d028      	beq.n	8004228 <HAL_DMA_IRQHandler+0x1e8>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 020e 	bic.w	r2, r2, #14
 80041ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f202 	lsl.w	r2, r1, r2
 80041fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421a:	2b00      	cmp	r3, #0
 800421c:	d004      	beq.n	8004228 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4798      	blx	r3
    }
  }
  return;
 8004226:	bf00      	nop
 8004228:	bf00      	nop
}
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40020008 	.word	0x40020008
 8004234:	4002001c 	.word	0x4002001c
 8004238:	40020030 	.word	0x40020030
 800423c:	40020044 	.word	0x40020044
 8004240:	40020058 	.word	0x40020058
 8004244:	4002006c 	.word	0x4002006c
 8004248:	40020000 	.word	0x40020000

0800424c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f202 	lsl.w	r2, r1, r2
 8004268:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b10      	cmp	r3, #16
 8004278:	d108      	bne.n	800428c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800428a:	e007      	b.n	800429c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b08b      	sub	sp, #44	@ 0x2c
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042b6:	2300      	movs	r3, #0
 80042b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ba:	e169      	b.n	8004590 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042bc:	2201      	movs	r2, #1
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	f040 8158 	bne.w	800458a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a9a      	ldr	r2, [pc, #616]	@ (8004548 <HAL_GPIO_Init+0x2a0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d05e      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 80042e4:	4a98      	ldr	r2, [pc, #608]	@ (8004548 <HAL_GPIO_Init+0x2a0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d875      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 80042ea:	4a98      	ldr	r2, [pc, #608]	@ (800454c <HAL_GPIO_Init+0x2a4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d058      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 80042f0:	4a96      	ldr	r2, [pc, #600]	@ (800454c <HAL_GPIO_Init+0x2a4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d86f      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 80042f6:	4a96      	ldr	r2, [pc, #600]	@ (8004550 <HAL_GPIO_Init+0x2a8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d052      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 80042fc:	4a94      	ldr	r2, [pc, #592]	@ (8004550 <HAL_GPIO_Init+0x2a8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d869      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 8004302:	4a94      	ldr	r2, [pc, #592]	@ (8004554 <HAL_GPIO_Init+0x2ac>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d04c      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 8004308:	4a92      	ldr	r2, [pc, #584]	@ (8004554 <HAL_GPIO_Init+0x2ac>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d863      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 800430e:	4a92      	ldr	r2, [pc, #584]	@ (8004558 <HAL_GPIO_Init+0x2b0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d046      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
 8004314:	4a90      	ldr	r2, [pc, #576]	@ (8004558 <HAL_GPIO_Init+0x2b0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d85d      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 800431a:	2b12      	cmp	r3, #18
 800431c:	d82a      	bhi.n	8004374 <HAL_GPIO_Init+0xcc>
 800431e:	2b12      	cmp	r3, #18
 8004320:	d859      	bhi.n	80043d6 <HAL_GPIO_Init+0x12e>
 8004322:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <HAL_GPIO_Init+0x80>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	080043a3 	.word	0x080043a3
 800432c:	0800437d 	.word	0x0800437d
 8004330:	0800438f 	.word	0x0800438f
 8004334:	080043d1 	.word	0x080043d1
 8004338:	080043d7 	.word	0x080043d7
 800433c:	080043d7 	.word	0x080043d7
 8004340:	080043d7 	.word	0x080043d7
 8004344:	080043d7 	.word	0x080043d7
 8004348:	080043d7 	.word	0x080043d7
 800434c:	080043d7 	.word	0x080043d7
 8004350:	080043d7 	.word	0x080043d7
 8004354:	080043d7 	.word	0x080043d7
 8004358:	080043d7 	.word	0x080043d7
 800435c:	080043d7 	.word	0x080043d7
 8004360:	080043d7 	.word	0x080043d7
 8004364:	080043d7 	.word	0x080043d7
 8004368:	080043d7 	.word	0x080043d7
 800436c:	08004385 	.word	0x08004385
 8004370:	08004399 	.word	0x08004399
 8004374:	4a79      	ldr	r2, [pc, #484]	@ (800455c <HAL_GPIO_Init+0x2b4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800437a:	e02c      	b.n	80043d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	623b      	str	r3, [r7, #32]
          break;
 8004382:	e029      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	3304      	adds	r3, #4
 800438a:	623b      	str	r3, [r7, #32]
          break;
 800438c:	e024      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	3308      	adds	r3, #8
 8004394:	623b      	str	r3, [r7, #32]
          break;
 8004396:	e01f      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	330c      	adds	r3, #12
 800439e:	623b      	str	r3, [r7, #32]
          break;
 80043a0:	e01a      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043aa:	2304      	movs	r3, #4
 80043ac:	623b      	str	r3, [r7, #32]
          break;
 80043ae:	e013      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043b8:	2308      	movs	r3, #8
 80043ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	611a      	str	r2, [r3, #16]
          break;
 80043c2:	e009      	b.n	80043d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043c4:	2308      	movs	r3, #8
 80043c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	615a      	str	r2, [r3, #20]
          break;
 80043ce:	e003      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043d0:	2300      	movs	r3, #0
 80043d2:	623b      	str	r3, [r7, #32]
          break;
 80043d4:	e000      	b.n	80043d8 <HAL_GPIO_Init+0x130>
          break;
 80043d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2bff      	cmp	r3, #255	@ 0xff
 80043dc:	d801      	bhi.n	80043e2 <HAL_GPIO_Init+0x13a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	e001      	b.n	80043e6 <HAL_GPIO_Init+0x13e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2bff      	cmp	r3, #255	@ 0xff
 80043ec:	d802      	bhi.n	80043f4 <HAL_GPIO_Init+0x14c>
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	e002      	b.n	80043fa <HAL_GPIO_Init+0x152>
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	3b08      	subs	r3, #8
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	210f      	movs	r1, #15
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	401a      	ands	r2, r3
 800440c:	6a39      	ldr	r1, [r7, #32]
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80b1 	beq.w	800458a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004428:	4b4d      	ldr	r3, [pc, #308]	@ (8004560 <HAL_GPIO_Init+0x2b8>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	4a4c      	ldr	r2, [pc, #304]	@ (8004560 <HAL_GPIO_Init+0x2b8>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6193      	str	r3, [r2, #24]
 8004434:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <HAL_GPIO_Init+0x2b8>)
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004440:	4a48      	ldr	r2, [pc, #288]	@ (8004564 <HAL_GPIO_Init+0x2bc>)
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	089b      	lsrs	r3, r3, #2
 8004446:	3302      	adds	r3, #2
 8004448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	220f      	movs	r2, #15
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4013      	ands	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a40      	ldr	r2, [pc, #256]	@ (8004568 <HAL_GPIO_Init+0x2c0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <HAL_GPIO_Init+0x1ec>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3f      	ldr	r2, [pc, #252]	@ (800456c <HAL_GPIO_Init+0x2c4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00d      	beq.n	8004490 <HAL_GPIO_Init+0x1e8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3e      	ldr	r2, [pc, #248]	@ (8004570 <HAL_GPIO_Init+0x2c8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <HAL_GPIO_Init+0x1e4>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3d      	ldr	r2, [pc, #244]	@ (8004574 <HAL_GPIO_Init+0x2cc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d101      	bne.n	8004488 <HAL_GPIO_Init+0x1e0>
 8004484:	2303      	movs	r3, #3
 8004486:	e006      	b.n	8004496 <HAL_GPIO_Init+0x1ee>
 8004488:	2304      	movs	r3, #4
 800448a:	e004      	b.n	8004496 <HAL_GPIO_Init+0x1ee>
 800448c:	2302      	movs	r3, #2
 800448e:	e002      	b.n	8004496 <HAL_GPIO_Init+0x1ee>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_GPIO_Init+0x1ee>
 8004494:	2300      	movs	r3, #0
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	f002 0203 	and.w	r2, r2, #3
 800449c:	0092      	lsls	r2, r2, #2
 800449e:	4093      	lsls	r3, r2
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044a6:	492f      	ldr	r1, [pc, #188]	@ (8004564 <HAL_GPIO_Init+0x2bc>)
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	089b      	lsrs	r3, r3, #2
 80044ac:	3302      	adds	r3, #2
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d006      	beq.n	80044ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	492c      	ldr	r1, [pc, #176]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]
 80044cc:	e006      	b.n	80044dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	4928      	ldr	r1, [pc, #160]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 80044d8:	4013      	ands	r3, r2
 80044da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044e8:	4b23      	ldr	r3, [pc, #140]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	4922      	ldr	r1, [pc, #136]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60cb      	str	r3, [r1, #12]
 80044f4:	e006      	b.n	8004504 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044f6:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	491e      	ldr	r1, [pc, #120]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 8004500:	4013      	ands	r3, r2
 8004502:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d006      	beq.n	800451e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004510:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	4918      	ldr	r1, [pc, #96]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]
 800451c:	e006      	b.n	800452c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800451e:	4b16      	ldr	r3, [pc, #88]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	43db      	mvns	r3, r3
 8004526:	4914      	ldr	r1, [pc, #80]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 8004528:	4013      	ands	r3, r2
 800452a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d021      	beq.n	800457c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004538:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	490e      	ldr	r1, [pc, #56]	@ (8004578 <HAL_GPIO_Init+0x2d0>)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
 8004544:	e021      	b.n	800458a <HAL_GPIO_Init+0x2e2>
 8004546:	bf00      	nop
 8004548:	10320000 	.word	0x10320000
 800454c:	10310000 	.word	0x10310000
 8004550:	10220000 	.word	0x10220000
 8004554:	10210000 	.word	0x10210000
 8004558:	10120000 	.word	0x10120000
 800455c:	10110000 	.word	0x10110000
 8004560:	40021000 	.word	0x40021000
 8004564:	40010000 	.word	0x40010000
 8004568:	40010800 	.word	0x40010800
 800456c:	40010c00 	.word	0x40010c00
 8004570:	40011000 	.word	0x40011000
 8004574:	40011400 	.word	0x40011400
 8004578:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <HAL_GPIO_Init+0x304>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	43db      	mvns	r3, r3
 8004584:	4909      	ldr	r1, [pc, #36]	@ (80045ac <HAL_GPIO_Init+0x304>)
 8004586:	4013      	ands	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	3301      	adds	r3, #1
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	fa22 f303 	lsr.w	r3, r2, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	f47f ae8e 	bne.w	80042bc <HAL_GPIO_Init+0x14>
  }
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	372c      	adds	r7, #44	@ 0x2c
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	40010400 	.word	0x40010400

080045b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	887b      	ldrh	r3, [r7, #2]
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e001      	b.n	80045d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr

080045de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	807b      	strh	r3, [r7, #2]
 80045ea:	4613      	mov	r3, r2
 80045ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ee:	787b      	ldrb	r3, [r7, #1]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045f4:	887a      	ldrh	r2, [r7, #2]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045fa:	e003      	b.n	8004604 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	041a      	lsls	r2, r3, #16
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	611a      	str	r2, [r3, #16]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
	...

08004610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800461a:	4b08      	ldr	r3, [pc, #32]	@ (800463c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004626:	4a05      	ldr	r2, [pc, #20]	@ (800463c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f806 	bl	8004640 <HAL_GPIO_EXTI_Callback>
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40010400 	.word	0x40010400

08004640 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e272      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8087 	beq.w	8004782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004674:	4b92      	ldr	r3, [pc, #584]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	2b04      	cmp	r3, #4
 800467e:	d00c      	beq.n	800469a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004680:	4b8f      	ldr	r3, [pc, #572]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d112      	bne.n	80046b2 <HAL_RCC_OscConfig+0x5e>
 800468c:	4b8c      	ldr	r3, [pc, #560]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d10b      	bne.n	80046b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469a:	4b89      	ldr	r3, [pc, #548]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d06c      	beq.n	8004780 <HAL_RCC_OscConfig+0x12c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d168      	bne.n	8004780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e24c      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x76>
 80046bc:	4b80      	ldr	r3, [pc, #512]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a7f      	ldr	r2, [pc, #508]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e02e      	b.n	8004728 <HAL_RCC_OscConfig+0xd4>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10c      	bne.n	80046ec <HAL_RCC_OscConfig+0x98>
 80046d2:	4b7b      	ldr	r3, [pc, #492]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7a      	ldr	r2, [pc, #488]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	4b78      	ldr	r3, [pc, #480]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a77      	ldr	r2, [pc, #476]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e01d      	b.n	8004728 <HAL_RCC_OscConfig+0xd4>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0xbc>
 80046f6:	4b72      	ldr	r3, [pc, #456]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a71      	ldr	r2, [pc, #452]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4b6f      	ldr	r3, [pc, #444]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6e      	ldr	r2, [pc, #440]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e00b      	b.n	8004728 <HAL_RCC_OscConfig+0xd4>
 8004710:	4b6b      	ldr	r3, [pc, #428]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a6a      	ldr	r2, [pc, #424]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b68      	ldr	r3, [pc, #416]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a67      	ldr	r2, [pc, #412]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004726:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d013      	beq.n	8004758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fe fdf8 	bl	8003324 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004738:	f7fe fdf4 	bl	8003324 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	@ 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e200      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	4b5d      	ldr	r3, [pc, #372]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0xe4>
 8004756:	e014      	b.n	8004782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fe fde4 	bl	8003324 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004760:	f7fe fde0 	bl	8003324 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	@ 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e1ec      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004772:	4b53      	ldr	r3, [pc, #332]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x10c>
 800477e:	e000      	b.n	8004782 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d063      	beq.n	8004856 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800478e:	4b4c      	ldr	r3, [pc, #304]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800479a:	4b49      	ldr	r3, [pc, #292]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d11c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x18c>
 80047a6:	4b46      	ldr	r3, [pc, #280]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d116      	bne.n	80047e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	4b43      	ldr	r3, [pc, #268]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x176>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e1c0      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b3d      	ldr	r3, [pc, #244]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4939      	ldr	r1, [pc, #228]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	e03a      	b.n	8004856 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e8:	4b36      	ldr	r3, [pc, #216]	@ (80048c4 <HAL_RCC_OscConfig+0x270>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fe fd99 	bl	8003324 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f6:	f7fe fd95 	bl	8003324 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1a1      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	4b2d      	ldr	r3, [pc, #180]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4927      	ldr	r1, [pc, #156]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
 8004828:	e015      	b.n	8004856 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482a:	4b26      	ldr	r3, [pc, #152]	@ (80048c4 <HAL_RCC_OscConfig+0x270>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fe fd78 	bl	8003324 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004838:	f7fe fd74 	bl	8003324 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e180      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d03a      	beq.n	80048d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d019      	beq.n	800489e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800486a:	4b17      	ldr	r3, [pc, #92]	@ (80048c8 <HAL_RCC_OscConfig+0x274>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004870:	f7fe fd58 	bl	8003324 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004878:	f7fe fd54 	bl	8003324 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e160      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <HAL_RCC_OscConfig+0x26c>)
 800488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004896:	2001      	movs	r0, #1
 8004898:	f000 face 	bl	8004e38 <RCC_Delay>
 800489c:	e01c      	b.n	80048d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800489e:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <HAL_RCC_OscConfig+0x274>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a4:	f7fe fd3e 	bl	8003324 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048aa:	e00f      	b.n	80048cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ac:	f7fe fd3a 	bl	8003324 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d908      	bls.n	80048cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e146      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
 80048c4:	42420000 	.word	0x42420000
 80048c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048cc:	4b92      	ldr	r3, [pc, #584]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e9      	bne.n	80048ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80a6 	beq.w	8004a32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10d      	bne.n	8004912 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f6:	4b88      	ldr	r3, [pc, #544]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	4a87      	ldr	r2, [pc, #540]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004900:	61d3      	str	r3, [r2, #28]
 8004902:	4b85      	ldr	r3, [pc, #532]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004912:	4b82      	ldr	r3, [pc, #520]	@ (8004b1c <HAL_RCC_OscConfig+0x4c8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d118      	bne.n	8004950 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b1c <HAL_RCC_OscConfig+0x4c8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a7e      	ldr	r2, [pc, #504]	@ (8004b1c <HAL_RCC_OscConfig+0x4c8>)
 8004924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492a:	f7fe fcfb 	bl	8003324 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004932:	f7fe fcf7 	bl	8003324 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b64      	cmp	r3, #100	@ 0x64
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e103      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004944:	4b75      	ldr	r3, [pc, #468]	@ (8004b1c <HAL_RCC_OscConfig+0x4c8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d106      	bne.n	8004966 <HAL_RCC_OscConfig+0x312>
 8004958:	4b6f      	ldr	r3, [pc, #444]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	4a6e      	ldr	r2, [pc, #440]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6213      	str	r3, [r2, #32]
 8004964:	e02d      	b.n	80049c2 <HAL_RCC_OscConfig+0x36e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10c      	bne.n	8004988 <HAL_RCC_OscConfig+0x334>
 800496e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	4a69      	ldr	r2, [pc, #420]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	6213      	str	r3, [r2, #32]
 800497a:	4b67      	ldr	r3, [pc, #412]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	4a66      	ldr	r2, [pc, #408]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	6213      	str	r3, [r2, #32]
 8004986:	e01c      	b.n	80049c2 <HAL_RCC_OscConfig+0x36e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b05      	cmp	r3, #5
 800498e:	d10c      	bne.n	80049aa <HAL_RCC_OscConfig+0x356>
 8004990:	4b61      	ldr	r3, [pc, #388]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	4a60      	ldr	r2, [pc, #384]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	6213      	str	r3, [r2, #32]
 800499c:	4b5e      	ldr	r3, [pc, #376]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6213      	str	r3, [r2, #32]
 80049a8:	e00b      	b.n	80049c2 <HAL_RCC_OscConfig+0x36e>
 80049aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	6213      	str	r3, [r2, #32]
 80049b6:	4b58      	ldr	r3, [pc, #352]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4a57      	ldr	r2, [pc, #348]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049bc:	f023 0304 	bic.w	r3, r3, #4
 80049c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d015      	beq.n	80049f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ca:	f7fe fcab 	bl	8003324 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fe fca7 	bl	8003324 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0b1      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ee      	beq.n	80049d2 <HAL_RCC_OscConfig+0x37e>
 80049f4:	e014      	b.n	8004a20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f6:	f7fe fc95 	bl	8003324 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fe fc91 	bl	8003324 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e09b      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a14:	4b40      	ldr	r3, [pc, #256]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ee      	bne.n	80049fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b3c      	ldr	r3, [pc, #240]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8087 	beq.w	8004b4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a3c:	4b36      	ldr	r3, [pc, #216]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d061      	beq.n	8004b0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d146      	bne.n	8004ade <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a50:	4b33      	ldr	r3, [pc, #204]	@ (8004b20 <HAL_RCC_OscConfig+0x4cc>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fe fc65 	bl	8003324 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fe fc61 	bl	8003324 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e06d      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a70:	4b29      	ldr	r3, [pc, #164]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a84:	d108      	bne.n	8004a98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a86:	4b24      	ldr	r3, [pc, #144]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	4921      	ldr	r1, [pc, #132]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a98:	4b1f      	ldr	r3, [pc, #124]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a19      	ldr	r1, [r3, #32]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	491b      	ldr	r1, [pc, #108]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b20 <HAL_RCC_OscConfig+0x4cc>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab6:	f7fe fc35 	bl	8003324 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abe:	f7fe fc31 	bl	8003324 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e03d      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ad0:	4b11      	ldr	r3, [pc, #68]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x46a>
 8004adc:	e035      	b.n	8004b4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ade:	4b10      	ldr	r3, [pc, #64]	@ (8004b20 <HAL_RCC_OscConfig+0x4cc>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fe fc1e 	bl	8003324 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fe fc1a 	bl	8003324 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e026      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004afe:	4b06      	ldr	r3, [pc, #24]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x498>
 8004b0a:	e01e      	b.n	8004b4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d107      	bne.n	8004b24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e019      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40007000 	.word	0x40007000
 8004b20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b24:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <HAL_RCC_OscConfig+0x500>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d001      	beq.n	8004b4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000

08004b58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0d0      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d910      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7a:	4b67      	ldr	r3, [pc, #412]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 0207 	bic.w	r2, r3, #7
 8004b82:	4965      	ldr	r1, [pc, #404]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b63      	ldr	r3, [pc, #396]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0b8      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb4:	4b59      	ldr	r3, [pc, #356]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a58      	ldr	r2, [pc, #352]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bcc:	4b53      	ldr	r3, [pc, #332]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a52      	ldr	r2, [pc, #328]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004bd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	4b50      	ldr	r3, [pc, #320]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	494d      	ldr	r1, [pc, #308]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d040      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b47      	ldr	r3, [pc, #284]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d115      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c16:	4b41      	ldr	r3, [pc, #260]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e073      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c26:	4b3d      	ldr	r3, [pc, #244]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e06b      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c36:	4b39      	ldr	r3, [pc, #228]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f023 0203 	bic.w	r2, r3, #3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4936      	ldr	r1, [pc, #216]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c48:	f7fe fb6c 	bl	8003324 <HAL_GetTick>
 8004c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c50:	f7fe fb68 	bl	8003324 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e053      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	4b2d      	ldr	r3, [pc, #180]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 020c 	and.w	r2, r3, #12
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d1eb      	bne.n	8004c50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c78:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d210      	bcs.n	8004ca8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c86:	4b24      	ldr	r3, [pc, #144]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 0207 	bic.w	r2, r3, #7
 8004c8e:	4922      	ldr	r1, [pc, #136]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e032      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb4:	4b19      	ldr	r3, [pc, #100]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4916      	ldr	r1, [pc, #88]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cd2:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	490e      	ldr	r1, [pc, #56]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ce6:	f000 f821 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004cea:	4602      	mov	r2, r0
 8004cec:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	490a      	ldr	r1, [pc, #40]	@ (8004d20 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf8:	5ccb      	ldrb	r3, [r1, r3]
 8004cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfe:	4a09      	ldr	r2, [pc, #36]	@ (8004d24 <HAL_RCC_ClockConfig+0x1cc>)
 8004d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d02:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_RCC_ClockConfig+0x1d0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe faca 	bl	80032a0 <HAL_InitTick>

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40022000 	.word	0x40022000
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	08006960 	.word	0x08006960
 8004d24:	20000000 	.word	0x20000000
 8004d28:	20000040 	.word	0x20000040

08004d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d46:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x30>
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x36>
 8004d5a:	e027      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d5c:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d5e:	613b      	str	r3, [r7, #16]
      break;
 8004d60:	e027      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	0c9b      	lsrs	r3, r3, #18
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	4a17      	ldr	r2, [pc, #92]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d6c:	5cd3      	ldrb	r3, [r2, r3]
 8004d6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d7a:	4b11      	ldr	r3, [pc, #68]	@ (8004dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	0c5b      	lsrs	r3, r3, #17
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	4a11      	ldr	r2, [pc, #68]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d86:	5cd3      	ldrb	r3, [r2, r3]
 8004d88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d8e:	fb03 f202 	mul.w	r2, r3, r2
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e004      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004da0:	fb02 f303 	mul.w	r3, r2, r3
 8004da4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	613b      	str	r3, [r7, #16]
      break;
 8004daa:	e002      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dae:	613b      	str	r3, [r7, #16]
      break;
 8004db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004db2:	693b      	ldr	r3, [r7, #16]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	007a1200 	.word	0x007a1200
 8004dc8:	08006aa8 	.word	0x08006aa8
 8004dcc:	08006ab8 	.word	0x08006ab8
 8004dd0:	003d0900 	.word	0x003d0900

08004dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd8:	4b02      	ldr	r3, [pc, #8]	@ (8004de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	20000000 	.word	0x20000000

08004de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dec:	f7ff fff2 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4903      	ldr	r1, [pc, #12]	@ (8004e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	08006970 	.word	0x08006970

08004e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e14:	f7ff ffde 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	0adb      	lsrs	r3, r3, #11
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4903      	ldr	r1, [pc, #12]	@ (8004e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000
 8004e34:	08006970 	.word	0x08006970

08004e38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <RCC_Delay+0x34>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0a      	ldr	r2, [pc, #40]	@ (8004e70 <RCC_Delay+0x38>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	0a5b      	lsrs	r3, r3, #9
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e54:	bf00      	nop
  }
  while (Delay --);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	60fa      	str	r2, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f9      	bne.n	8004e54 <RCC_Delay+0x1c>
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	20000000 	.word	0x20000000
 8004e70:	10624dd3 	.word	0x10624dd3

08004e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d07d      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e90:	2300      	movs	r3, #0
 8004e92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e94:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10d      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea0:	4b4c      	ldr	r3, [pc, #304]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	61d3      	str	r3, [r2, #28]
 8004eac:	4b49      	ldr	r3, [pc, #292]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebc:	4b46      	ldr	r3, [pc, #280]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d118      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ec8:	4b43      	ldr	r3, [pc, #268]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a42      	ldr	r2, [pc, #264]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed4:	f7fe fa26 	bl	8003324 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eda:	e008      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004edc:	f7fe fa22 	bl	8003324 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	@ 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e06d      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	4b3a      	ldr	r3, [pc, #232]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004efa:	4b36      	ldr	r3, [pc, #216]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d02e      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d027      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f18:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f22:	4b2e      	ldr	r3, [pc, #184]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f28:	4b2c      	ldr	r3, [pc, #176]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f2e:	4a29      	ldr	r2, [pc, #164]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d014      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3e:	f7fe f9f1 	bl	8003324 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f44:	e00a      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fe f9ed 	bl	8003324 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e036      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ee      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f68:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4917      	ldr	r1, [pc, #92]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f98:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	490b      	ldr	r1, [pc, #44]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fb6:	4b07      	ldr	r3, [pc, #28]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	4904      	ldr	r1, [pc, #16]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40007000 	.word	0x40007000
 8004fdc:	42420440 	.word	0x42420440

08004fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e042      	b.n	8005078 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fb fef0 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	@ 0x24
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f82b 	bl	8005080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80050ba:	f023 030c 	bic.w	r3, r3, #12
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	430b      	orrs	r3, r1
 80050c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005194 <UART_SetConfig+0x114>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d103      	bne.n	80050f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7ff fe92 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	e002      	b.n	80050f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7ff fe7a 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 80050f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009a      	lsls	r2, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	4a22      	ldr	r2, [pc, #136]	@ (8005198 <UART_SetConfig+0x118>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	0119      	lsls	r1, r3, #4
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009a      	lsls	r2, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	fbb2 f2f3 	udiv	r2, r2, r3
 800512c:	4b1a      	ldr	r3, [pc, #104]	@ (8005198 <UART_SetConfig+0x118>)
 800512e:	fba3 0302 	umull	r0, r3, r3, r2
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2064      	movs	r0, #100	@ 0x64
 8005136:	fb00 f303 	mul.w	r3, r0, r3
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	3332      	adds	r3, #50	@ 0x32
 8005140:	4a15      	ldr	r2, [pc, #84]	@ (8005198 <UART_SetConfig+0x118>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800514c:	4419      	add	r1, r3
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009a      	lsls	r2, r3, #2
 8005158:	441a      	add	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	fbb2 f2f3 	udiv	r2, r2, r3
 8005164:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <UART_SetConfig+0x118>)
 8005166:	fba3 0302 	umull	r0, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2064      	movs	r0, #100	@ 0x64
 800516e:	fb00 f303 	mul.w	r3, r0, r3
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	3332      	adds	r3, #50	@ 0x32
 8005178:	4a07      	ldr	r2, [pc, #28]	@ (8005198 <UART_SetConfig+0x118>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	f003 020f 	and.w	r2, r3, #15
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	440a      	add	r2, r1
 800518a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800518c:	bf00      	nop
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40013800 	.word	0x40013800
 8005198:	51eb851f 	.word	0x51eb851f

0800519c <__sflush_r>:
 800519c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	0716      	lsls	r6, r2, #28
 80051a4:	4605      	mov	r5, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	d454      	bmi.n	8005254 <__sflush_r+0xb8>
 80051aa:	684b      	ldr	r3, [r1, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dc02      	bgt.n	80051b6 <__sflush_r+0x1a>
 80051b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dd48      	ble.n	8005248 <__sflush_r+0xac>
 80051b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051b8:	2e00      	cmp	r6, #0
 80051ba:	d045      	beq.n	8005248 <__sflush_r+0xac>
 80051bc:	2300      	movs	r3, #0
 80051be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051c2:	682f      	ldr	r7, [r5, #0]
 80051c4:	6a21      	ldr	r1, [r4, #32]
 80051c6:	602b      	str	r3, [r5, #0]
 80051c8:	d030      	beq.n	800522c <__sflush_r+0x90>
 80051ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	0759      	lsls	r1, r3, #29
 80051d0:	d505      	bpl.n	80051de <__sflush_r+0x42>
 80051d2:	6863      	ldr	r3, [r4, #4]
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051d8:	b10b      	cbz	r3, 80051de <__sflush_r+0x42>
 80051da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051dc:	1ad2      	subs	r2, r2, r3
 80051de:	2300      	movs	r3, #0
 80051e0:	4628      	mov	r0, r5
 80051e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051e4:	6a21      	ldr	r1, [r4, #32]
 80051e6:	47b0      	blx	r6
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	d106      	bne.n	80051fc <__sflush_r+0x60>
 80051ee:	6829      	ldr	r1, [r5, #0]
 80051f0:	291d      	cmp	r1, #29
 80051f2:	d82b      	bhi.n	800524c <__sflush_r+0xb0>
 80051f4:	4a28      	ldr	r2, [pc, #160]	@ (8005298 <__sflush_r+0xfc>)
 80051f6:	410a      	asrs	r2, r1
 80051f8:	07d6      	lsls	r6, r2, #31
 80051fa:	d427      	bmi.n	800524c <__sflush_r+0xb0>
 80051fc:	2200      	movs	r2, #0
 80051fe:	6062      	str	r2, [r4, #4]
 8005200:	6922      	ldr	r2, [r4, #16]
 8005202:	04d9      	lsls	r1, r3, #19
 8005204:	6022      	str	r2, [r4, #0]
 8005206:	d504      	bpl.n	8005212 <__sflush_r+0x76>
 8005208:	1c42      	adds	r2, r0, #1
 800520a:	d101      	bne.n	8005210 <__sflush_r+0x74>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b903      	cbnz	r3, 8005212 <__sflush_r+0x76>
 8005210:	6560      	str	r0, [r4, #84]	@ 0x54
 8005212:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005214:	602f      	str	r7, [r5, #0]
 8005216:	b1b9      	cbz	r1, 8005248 <__sflush_r+0xac>
 8005218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800521c:	4299      	cmp	r1, r3
 800521e:	d002      	beq.n	8005226 <__sflush_r+0x8a>
 8005220:	4628      	mov	r0, r5
 8005222:	f000 fa3f 	bl	80056a4 <_free_r>
 8005226:	2300      	movs	r3, #0
 8005228:	6363      	str	r3, [r4, #52]	@ 0x34
 800522a:	e00d      	b.n	8005248 <__sflush_r+0xac>
 800522c:	2301      	movs	r3, #1
 800522e:	4628      	mov	r0, r5
 8005230:	47b0      	blx	r6
 8005232:	4602      	mov	r2, r0
 8005234:	1c50      	adds	r0, r2, #1
 8005236:	d1c9      	bne.n	80051cc <__sflush_r+0x30>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0c6      	beq.n	80051cc <__sflush_r+0x30>
 800523e:	2b1d      	cmp	r3, #29
 8005240:	d001      	beq.n	8005246 <__sflush_r+0xaa>
 8005242:	2b16      	cmp	r3, #22
 8005244:	d11d      	bne.n	8005282 <__sflush_r+0xe6>
 8005246:	602f      	str	r7, [r5, #0]
 8005248:	2000      	movs	r0, #0
 800524a:	e021      	b.n	8005290 <__sflush_r+0xf4>
 800524c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005250:	b21b      	sxth	r3, r3
 8005252:	e01a      	b.n	800528a <__sflush_r+0xee>
 8005254:	690f      	ldr	r7, [r1, #16]
 8005256:	2f00      	cmp	r7, #0
 8005258:	d0f6      	beq.n	8005248 <__sflush_r+0xac>
 800525a:	0793      	lsls	r3, r2, #30
 800525c:	bf18      	it	ne
 800525e:	2300      	movne	r3, #0
 8005260:	680e      	ldr	r6, [r1, #0]
 8005262:	bf08      	it	eq
 8005264:	694b      	ldreq	r3, [r1, #20]
 8005266:	1bf6      	subs	r6, r6, r7
 8005268:	600f      	str	r7, [r1, #0]
 800526a:	608b      	str	r3, [r1, #8]
 800526c:	2e00      	cmp	r6, #0
 800526e:	ddeb      	ble.n	8005248 <__sflush_r+0xac>
 8005270:	4633      	mov	r3, r6
 8005272:	463a      	mov	r2, r7
 8005274:	4628      	mov	r0, r5
 8005276:	6a21      	ldr	r1, [r4, #32]
 8005278:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800527c:	47e0      	blx	ip
 800527e:	2800      	cmp	r0, #0
 8005280:	dc07      	bgt.n	8005292 <__sflush_r+0xf6>
 8005282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005292:	4407      	add	r7, r0
 8005294:	1a36      	subs	r6, r6, r0
 8005296:	e7e9      	b.n	800526c <__sflush_r+0xd0>
 8005298:	dfbffffe 	.word	0xdfbffffe

0800529c <_fflush_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	690b      	ldr	r3, [r1, #16]
 80052a0:	4605      	mov	r5, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	b913      	cbnz	r3, 80052ac <_fflush_r+0x10>
 80052a6:	2500      	movs	r5, #0
 80052a8:	4628      	mov	r0, r5
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	b118      	cbz	r0, 80052b6 <_fflush_r+0x1a>
 80052ae:	6a03      	ldr	r3, [r0, #32]
 80052b0:	b90b      	cbnz	r3, 80052b6 <_fflush_r+0x1a>
 80052b2:	f000 f8bb 	bl	800542c <__sinit>
 80052b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f3      	beq.n	80052a6 <_fflush_r+0xa>
 80052be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052c0:	07d0      	lsls	r0, r2, #31
 80052c2:	d404      	bmi.n	80052ce <_fflush_r+0x32>
 80052c4:	0599      	lsls	r1, r3, #22
 80052c6:	d402      	bmi.n	80052ce <_fflush_r+0x32>
 80052c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ca:	f000 f9e8 	bl	800569e <__retarget_lock_acquire_recursive>
 80052ce:	4628      	mov	r0, r5
 80052d0:	4621      	mov	r1, r4
 80052d2:	f7ff ff63 	bl	800519c <__sflush_r>
 80052d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052d8:	4605      	mov	r5, r0
 80052da:	07da      	lsls	r2, r3, #31
 80052dc:	d4e4      	bmi.n	80052a8 <_fflush_r+0xc>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	059b      	lsls	r3, r3, #22
 80052e2:	d4e1      	bmi.n	80052a8 <_fflush_r+0xc>
 80052e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052e6:	f000 f9db 	bl	80056a0 <__retarget_lock_release_recursive>
 80052ea:	e7dd      	b.n	80052a8 <_fflush_r+0xc>

080052ec <fflush>:
 80052ec:	4601      	mov	r1, r0
 80052ee:	b920      	cbnz	r0, 80052fa <fflush+0xe>
 80052f0:	4a04      	ldr	r2, [pc, #16]	@ (8005304 <fflush+0x18>)
 80052f2:	4905      	ldr	r1, [pc, #20]	@ (8005308 <fflush+0x1c>)
 80052f4:	4805      	ldr	r0, [pc, #20]	@ (800530c <fflush+0x20>)
 80052f6:	f000 b8b1 	b.w	800545c <_fwalk_sglue>
 80052fa:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <fflush+0x24>)
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	f7ff bfcd 	b.w	800529c <_fflush_r>
 8005302:	bf00      	nop
 8005304:	20000048 	.word	0x20000048
 8005308:	0800529d 	.word	0x0800529d
 800530c:	20000058 	.word	0x20000058
 8005310:	20000054 	.word	0x20000054

08005314 <std>:
 8005314:	2300      	movs	r3, #0
 8005316:	b510      	push	{r4, lr}
 8005318:	4604      	mov	r4, r0
 800531a:	e9c0 3300 	strd	r3, r3, [r0]
 800531e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005322:	6083      	str	r3, [r0, #8]
 8005324:	8181      	strh	r1, [r0, #12]
 8005326:	6643      	str	r3, [r0, #100]	@ 0x64
 8005328:	81c2      	strh	r2, [r0, #14]
 800532a:	6183      	str	r3, [r0, #24]
 800532c:	4619      	mov	r1, r3
 800532e:	2208      	movs	r2, #8
 8005330:	305c      	adds	r0, #92	@ 0x5c
 8005332:	f000 f93a 	bl	80055aa <memset>
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <std+0x58>)
 8005338:	6224      	str	r4, [r4, #32]
 800533a:	6263      	str	r3, [r4, #36]	@ 0x24
 800533c:	4b0c      	ldr	r3, [pc, #48]	@ (8005370 <std+0x5c>)
 800533e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005340:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <std+0x60>)
 8005342:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005344:	4b0c      	ldr	r3, [pc, #48]	@ (8005378 <std+0x64>)
 8005346:	6323      	str	r3, [r4, #48]	@ 0x30
 8005348:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <std+0x68>)
 800534a:	429c      	cmp	r4, r3
 800534c:	d006      	beq.n	800535c <std+0x48>
 800534e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005352:	4294      	cmp	r4, r2
 8005354:	d002      	beq.n	800535c <std+0x48>
 8005356:	33d0      	adds	r3, #208	@ 0xd0
 8005358:	429c      	cmp	r4, r3
 800535a:	d105      	bne.n	8005368 <std+0x54>
 800535c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005364:	f000 b99a 	b.w	800569c <__retarget_lock_init_recursive>
 8005368:	bd10      	pop	{r4, pc}
 800536a:	bf00      	nop
 800536c:	08005525 	.word	0x08005525
 8005370:	08005547 	.word	0x08005547
 8005374:	0800557f 	.word	0x0800557f
 8005378:	080055a3 	.word	0x080055a3
 800537c:	20000394 	.word	0x20000394

08005380 <stdio_exit_handler>:
 8005380:	4a02      	ldr	r2, [pc, #8]	@ (800538c <stdio_exit_handler+0xc>)
 8005382:	4903      	ldr	r1, [pc, #12]	@ (8005390 <stdio_exit_handler+0x10>)
 8005384:	4803      	ldr	r0, [pc, #12]	@ (8005394 <stdio_exit_handler+0x14>)
 8005386:	f000 b869 	b.w	800545c <_fwalk_sglue>
 800538a:	bf00      	nop
 800538c:	20000048 	.word	0x20000048
 8005390:	0800529d 	.word	0x0800529d
 8005394:	20000058 	.word	0x20000058

08005398 <cleanup_stdio>:
 8005398:	6841      	ldr	r1, [r0, #4]
 800539a:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <cleanup_stdio+0x34>)
 800539c:	b510      	push	{r4, lr}
 800539e:	4299      	cmp	r1, r3
 80053a0:	4604      	mov	r4, r0
 80053a2:	d001      	beq.n	80053a8 <cleanup_stdio+0x10>
 80053a4:	f7ff ff7a 	bl	800529c <_fflush_r>
 80053a8:	68a1      	ldr	r1, [r4, #8]
 80053aa:	4b09      	ldr	r3, [pc, #36]	@ (80053d0 <cleanup_stdio+0x38>)
 80053ac:	4299      	cmp	r1, r3
 80053ae:	d002      	beq.n	80053b6 <cleanup_stdio+0x1e>
 80053b0:	4620      	mov	r0, r4
 80053b2:	f7ff ff73 	bl	800529c <_fflush_r>
 80053b6:	68e1      	ldr	r1, [r4, #12]
 80053b8:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <cleanup_stdio+0x3c>)
 80053ba:	4299      	cmp	r1, r3
 80053bc:	d004      	beq.n	80053c8 <cleanup_stdio+0x30>
 80053be:	4620      	mov	r0, r4
 80053c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c4:	f7ff bf6a 	b.w	800529c <_fflush_r>
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	20000394 	.word	0x20000394
 80053d0:	200003fc 	.word	0x200003fc
 80053d4:	20000464 	.word	0x20000464

080053d8 <global_stdio_init.part.0>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <global_stdio_init.part.0+0x30>)
 80053dc:	4c0b      	ldr	r4, [pc, #44]	@ (800540c <global_stdio_init.part.0+0x34>)
 80053de:	4a0c      	ldr	r2, [pc, #48]	@ (8005410 <global_stdio_init.part.0+0x38>)
 80053e0:	4620      	mov	r0, r4
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	2104      	movs	r1, #4
 80053e6:	2200      	movs	r2, #0
 80053e8:	f7ff ff94 	bl	8005314 <std>
 80053ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053f0:	2201      	movs	r2, #1
 80053f2:	2109      	movs	r1, #9
 80053f4:	f7ff ff8e 	bl	8005314 <std>
 80053f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053fc:	2202      	movs	r2, #2
 80053fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005402:	2112      	movs	r1, #18
 8005404:	f7ff bf86 	b.w	8005314 <std>
 8005408:	200004cc 	.word	0x200004cc
 800540c:	20000394 	.word	0x20000394
 8005410:	08005381 	.word	0x08005381

08005414 <__sfp_lock_acquire>:
 8005414:	4801      	ldr	r0, [pc, #4]	@ (800541c <__sfp_lock_acquire+0x8>)
 8005416:	f000 b942 	b.w	800569e <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	200004d5 	.word	0x200004d5

08005420 <__sfp_lock_release>:
 8005420:	4801      	ldr	r0, [pc, #4]	@ (8005428 <__sfp_lock_release+0x8>)
 8005422:	f000 b93d 	b.w	80056a0 <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	200004d5 	.word	0x200004d5

0800542c <__sinit>:
 800542c:	b510      	push	{r4, lr}
 800542e:	4604      	mov	r4, r0
 8005430:	f7ff fff0 	bl	8005414 <__sfp_lock_acquire>
 8005434:	6a23      	ldr	r3, [r4, #32]
 8005436:	b11b      	cbz	r3, 8005440 <__sinit+0x14>
 8005438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800543c:	f7ff bff0 	b.w	8005420 <__sfp_lock_release>
 8005440:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <__sinit+0x28>)
 8005442:	6223      	str	r3, [r4, #32]
 8005444:	4b04      	ldr	r3, [pc, #16]	@ (8005458 <__sinit+0x2c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f5      	bne.n	8005438 <__sinit+0xc>
 800544c:	f7ff ffc4 	bl	80053d8 <global_stdio_init.part.0>
 8005450:	e7f2      	b.n	8005438 <__sinit+0xc>
 8005452:	bf00      	nop
 8005454:	08005399 	.word	0x08005399
 8005458:	200004cc 	.word	0x200004cc

0800545c <_fwalk_sglue>:
 800545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005460:	4607      	mov	r7, r0
 8005462:	4688      	mov	r8, r1
 8005464:	4614      	mov	r4, r2
 8005466:	2600      	movs	r6, #0
 8005468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800546c:	f1b9 0901 	subs.w	r9, r9, #1
 8005470:	d505      	bpl.n	800547e <_fwalk_sglue+0x22>
 8005472:	6824      	ldr	r4, [r4, #0]
 8005474:	2c00      	cmp	r4, #0
 8005476:	d1f7      	bne.n	8005468 <_fwalk_sglue+0xc>
 8005478:	4630      	mov	r0, r6
 800547a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800547e:	89ab      	ldrh	r3, [r5, #12]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d907      	bls.n	8005494 <_fwalk_sglue+0x38>
 8005484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005488:	3301      	adds	r3, #1
 800548a:	d003      	beq.n	8005494 <_fwalk_sglue+0x38>
 800548c:	4629      	mov	r1, r5
 800548e:	4638      	mov	r0, r7
 8005490:	47c0      	blx	r8
 8005492:	4306      	orrs	r6, r0
 8005494:	3568      	adds	r5, #104	@ 0x68
 8005496:	e7e9      	b.n	800546c <_fwalk_sglue+0x10>

08005498 <iprintf>:
 8005498:	b40f      	push	{r0, r1, r2, r3}
 800549a:	b507      	push	{r0, r1, r2, lr}
 800549c:	4906      	ldr	r1, [pc, #24]	@ (80054b8 <iprintf+0x20>)
 800549e:	ab04      	add	r3, sp, #16
 80054a0:	6808      	ldr	r0, [r1, #0]
 80054a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a6:	6881      	ldr	r1, [r0, #8]
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	f000 fb71 	bl	8005b90 <_vfiprintf_r>
 80054ae:	b003      	add	sp, #12
 80054b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054b4:	b004      	add	sp, #16
 80054b6:	4770      	bx	lr
 80054b8:	20000054 	.word	0x20000054

080054bc <sniprintf>:
 80054bc:	b40c      	push	{r2, r3}
 80054be:	b530      	push	{r4, r5, lr}
 80054c0:	4b17      	ldr	r3, [pc, #92]	@ (8005520 <sniprintf+0x64>)
 80054c2:	1e0c      	subs	r4, r1, #0
 80054c4:	681d      	ldr	r5, [r3, #0]
 80054c6:	b09d      	sub	sp, #116	@ 0x74
 80054c8:	da08      	bge.n	80054dc <sniprintf+0x20>
 80054ca:	238b      	movs	r3, #139	@ 0x8b
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	602b      	str	r3, [r5, #0]
 80054d2:	b01d      	add	sp, #116	@ 0x74
 80054d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d8:	b002      	add	sp, #8
 80054da:	4770      	bx	lr
 80054dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80054e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80054e4:	bf0c      	ite	eq
 80054e6:	4623      	moveq	r3, r4
 80054e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054f4:	9002      	str	r0, [sp, #8]
 80054f6:	9006      	str	r0, [sp, #24]
 80054f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80054fc:	4628      	mov	r0, r5
 80054fe:	ab21      	add	r3, sp, #132	@ 0x84
 8005500:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005502:	a902      	add	r1, sp, #8
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	f000 fa1f 	bl	8005948 <_svfiprintf_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	bfbc      	itt	lt
 800550e:	238b      	movlt	r3, #139	@ 0x8b
 8005510:	602b      	strlt	r3, [r5, #0]
 8005512:	2c00      	cmp	r4, #0
 8005514:	d0dd      	beq.n	80054d2 <sniprintf+0x16>
 8005516:	2200      	movs	r2, #0
 8005518:	9b02      	ldr	r3, [sp, #8]
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	e7d9      	b.n	80054d2 <sniprintf+0x16>
 800551e:	bf00      	nop
 8005520:	20000054 	.word	0x20000054

08005524 <__sread>:
 8005524:	b510      	push	{r4, lr}
 8005526:	460c      	mov	r4, r1
 8005528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552c:	f000 f868 	bl	8005600 <_read_r>
 8005530:	2800      	cmp	r0, #0
 8005532:	bfab      	itete	ge
 8005534:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005536:	89a3      	ldrhlt	r3, [r4, #12]
 8005538:	181b      	addge	r3, r3, r0
 800553a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800553e:	bfac      	ite	ge
 8005540:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005542:	81a3      	strhlt	r3, [r4, #12]
 8005544:	bd10      	pop	{r4, pc}

08005546 <__swrite>:
 8005546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	461f      	mov	r7, r3
 800554c:	898b      	ldrh	r3, [r1, #12]
 800554e:	4605      	mov	r5, r0
 8005550:	05db      	lsls	r3, r3, #23
 8005552:	460c      	mov	r4, r1
 8005554:	4616      	mov	r6, r2
 8005556:	d505      	bpl.n	8005564 <__swrite+0x1e>
 8005558:	2302      	movs	r3, #2
 800555a:	2200      	movs	r2, #0
 800555c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005560:	f000 f83c 	bl	80055dc <_lseek_r>
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	4632      	mov	r2, r6
 8005568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	4628      	mov	r0, r5
 8005570:	463b      	mov	r3, r7
 8005572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800557a:	f000 b853 	b.w	8005624 <_write_r>

0800557e <__sseek>:
 800557e:	b510      	push	{r4, lr}
 8005580:	460c      	mov	r4, r1
 8005582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005586:	f000 f829 	bl	80055dc <_lseek_r>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	bf15      	itete	ne
 8005590:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005592:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005596:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800559a:	81a3      	strheq	r3, [r4, #12]
 800559c:	bf18      	it	ne
 800559e:	81a3      	strhne	r3, [r4, #12]
 80055a0:	bd10      	pop	{r4, pc}

080055a2 <__sclose>:
 80055a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a6:	f000 b809 	b.w	80055bc <_close_r>

080055aa <memset>:
 80055aa:	4603      	mov	r3, r0
 80055ac:	4402      	add	r2, r0
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d100      	bne.n	80055b4 <memset+0xa>
 80055b2:	4770      	bx	lr
 80055b4:	f803 1b01 	strb.w	r1, [r3], #1
 80055b8:	e7f9      	b.n	80055ae <memset+0x4>
	...

080055bc <_close_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	2300      	movs	r3, #0
 80055c0:	4d05      	ldr	r5, [pc, #20]	@ (80055d8 <_close_r+0x1c>)
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	f7fb fcd7 	bl	8000f7a <_close>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_close_r+0x1a>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_close_r+0x1a>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	200004d0 	.word	0x200004d0

080055dc <_lseek_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	4611      	mov	r1, r2
 80055e4:	2200      	movs	r2, #0
 80055e6:	4d05      	ldr	r5, [pc, #20]	@ (80055fc <_lseek_r+0x20>)
 80055e8:	602a      	str	r2, [r5, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f7fb fce9 	bl	8000fc2 <_lseek>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_lseek_r+0x1e>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_lseek_r+0x1e>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	200004d0 	.word	0x200004d0

08005600 <_read_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4604      	mov	r4, r0
 8005604:	4608      	mov	r0, r1
 8005606:	4611      	mov	r1, r2
 8005608:	2200      	movs	r2, #0
 800560a:	4d05      	ldr	r5, [pc, #20]	@ (8005620 <_read_r+0x20>)
 800560c:	602a      	str	r2, [r5, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	f7fb fc7a 	bl	8000f08 <_read>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_read_r+0x1e>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_read_r+0x1e>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	200004d0 	.word	0x200004d0

08005624 <_write_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4604      	mov	r4, r0
 8005628:	4608      	mov	r0, r1
 800562a:	4611      	mov	r1, r2
 800562c:	2200      	movs	r2, #0
 800562e:	4d05      	ldr	r5, [pc, #20]	@ (8005644 <_write_r+0x20>)
 8005630:	602a      	str	r2, [r5, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	f7fb fc85 	bl	8000f42 <_write>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_write_r+0x1e>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_write_r+0x1e>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	200004d0 	.word	0x200004d0

08005648 <__errno>:
 8005648:	4b01      	ldr	r3, [pc, #4]	@ (8005650 <__errno+0x8>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000054 	.word	0x20000054

08005654 <__libc_init_array>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	2600      	movs	r6, #0
 8005658:	4d0c      	ldr	r5, [pc, #48]	@ (800568c <__libc_init_array+0x38>)
 800565a:	4c0d      	ldr	r4, [pc, #52]	@ (8005690 <__libc_init_array+0x3c>)
 800565c:	1b64      	subs	r4, r4, r5
 800565e:	10a4      	asrs	r4, r4, #2
 8005660:	42a6      	cmp	r6, r4
 8005662:	d109      	bne.n	8005678 <__libc_init_array+0x24>
 8005664:	f000 fed2 	bl	800640c <_init>
 8005668:	2600      	movs	r6, #0
 800566a:	4d0a      	ldr	r5, [pc, #40]	@ (8005694 <__libc_init_array+0x40>)
 800566c:	4c0a      	ldr	r4, [pc, #40]	@ (8005698 <__libc_init_array+0x44>)
 800566e:	1b64      	subs	r4, r4, r5
 8005670:	10a4      	asrs	r4, r4, #2
 8005672:	42a6      	cmp	r6, r4
 8005674:	d105      	bne.n	8005682 <__libc_init_array+0x2e>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	f855 3b04 	ldr.w	r3, [r5], #4
 800567c:	4798      	blx	r3
 800567e:	3601      	adds	r6, #1
 8005680:	e7ee      	b.n	8005660 <__libc_init_array+0xc>
 8005682:	f855 3b04 	ldr.w	r3, [r5], #4
 8005686:	4798      	blx	r3
 8005688:	3601      	adds	r6, #1
 800568a:	e7f2      	b.n	8005672 <__libc_init_array+0x1e>
 800568c:	08006af0 	.word	0x08006af0
 8005690:	08006af0 	.word	0x08006af0
 8005694:	08006af0 	.word	0x08006af0
 8005698:	08006af4 	.word	0x08006af4

0800569c <__retarget_lock_init_recursive>:
 800569c:	4770      	bx	lr

0800569e <__retarget_lock_acquire_recursive>:
 800569e:	4770      	bx	lr

080056a0 <__retarget_lock_release_recursive>:
 80056a0:	4770      	bx	lr
	...

080056a4 <_free_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4605      	mov	r5, r0
 80056a8:	2900      	cmp	r1, #0
 80056aa:	d040      	beq.n	800572e <_free_r+0x8a>
 80056ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056b0:	1f0c      	subs	r4, r1, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bfb8      	it	lt
 80056b6:	18e4      	addlt	r4, r4, r3
 80056b8:	f000 f8de 	bl	8005878 <__malloc_lock>
 80056bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <_free_r+0x8c>)
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	b933      	cbnz	r3, 80056d0 <_free_r+0x2c>
 80056c2:	6063      	str	r3, [r4, #4]
 80056c4:	6014      	str	r4, [r2, #0]
 80056c6:	4628      	mov	r0, r5
 80056c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056cc:	f000 b8da 	b.w	8005884 <__malloc_unlock>
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d908      	bls.n	80056e6 <_free_r+0x42>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	1821      	adds	r1, r4, r0
 80056d8:	428b      	cmp	r3, r1
 80056da:	bf01      	itttt	eq
 80056dc:	6819      	ldreq	r1, [r3, #0]
 80056de:	685b      	ldreq	r3, [r3, #4]
 80056e0:	1809      	addeq	r1, r1, r0
 80056e2:	6021      	streq	r1, [r4, #0]
 80056e4:	e7ed      	b.n	80056c2 <_free_r+0x1e>
 80056e6:	461a      	mov	r2, r3
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	b10b      	cbz	r3, 80056f0 <_free_r+0x4c>
 80056ec:	42a3      	cmp	r3, r4
 80056ee:	d9fa      	bls.n	80056e6 <_free_r+0x42>
 80056f0:	6811      	ldr	r1, [r2, #0]
 80056f2:	1850      	adds	r0, r2, r1
 80056f4:	42a0      	cmp	r0, r4
 80056f6:	d10b      	bne.n	8005710 <_free_r+0x6c>
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	4401      	add	r1, r0
 80056fc:	1850      	adds	r0, r2, r1
 80056fe:	4283      	cmp	r3, r0
 8005700:	6011      	str	r1, [r2, #0]
 8005702:	d1e0      	bne.n	80056c6 <_free_r+0x22>
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	4408      	add	r0, r1
 800570a:	6010      	str	r0, [r2, #0]
 800570c:	6053      	str	r3, [r2, #4]
 800570e:	e7da      	b.n	80056c6 <_free_r+0x22>
 8005710:	d902      	bls.n	8005718 <_free_r+0x74>
 8005712:	230c      	movs	r3, #12
 8005714:	602b      	str	r3, [r5, #0]
 8005716:	e7d6      	b.n	80056c6 <_free_r+0x22>
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	1821      	adds	r1, r4, r0
 800571c:	428b      	cmp	r3, r1
 800571e:	bf01      	itttt	eq
 8005720:	6819      	ldreq	r1, [r3, #0]
 8005722:	685b      	ldreq	r3, [r3, #4]
 8005724:	1809      	addeq	r1, r1, r0
 8005726:	6021      	streq	r1, [r4, #0]
 8005728:	6063      	str	r3, [r4, #4]
 800572a:	6054      	str	r4, [r2, #4]
 800572c:	e7cb      	b.n	80056c6 <_free_r+0x22>
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	200004dc 	.word	0x200004dc

08005734 <sbrk_aligned>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	4e0f      	ldr	r6, [pc, #60]	@ (8005774 <sbrk_aligned+0x40>)
 8005738:	460c      	mov	r4, r1
 800573a:	6831      	ldr	r1, [r6, #0]
 800573c:	4605      	mov	r5, r0
 800573e:	b911      	cbnz	r1, 8005746 <sbrk_aligned+0x12>
 8005740:	f000 fd7e 	bl	8006240 <_sbrk_r>
 8005744:	6030      	str	r0, [r6, #0]
 8005746:	4621      	mov	r1, r4
 8005748:	4628      	mov	r0, r5
 800574a:	f000 fd79 	bl	8006240 <_sbrk_r>
 800574e:	1c43      	adds	r3, r0, #1
 8005750:	d103      	bne.n	800575a <sbrk_aligned+0x26>
 8005752:	f04f 34ff 	mov.w	r4, #4294967295
 8005756:	4620      	mov	r0, r4
 8005758:	bd70      	pop	{r4, r5, r6, pc}
 800575a:	1cc4      	adds	r4, r0, #3
 800575c:	f024 0403 	bic.w	r4, r4, #3
 8005760:	42a0      	cmp	r0, r4
 8005762:	d0f8      	beq.n	8005756 <sbrk_aligned+0x22>
 8005764:	1a21      	subs	r1, r4, r0
 8005766:	4628      	mov	r0, r5
 8005768:	f000 fd6a 	bl	8006240 <_sbrk_r>
 800576c:	3001      	adds	r0, #1
 800576e:	d1f2      	bne.n	8005756 <sbrk_aligned+0x22>
 8005770:	e7ef      	b.n	8005752 <sbrk_aligned+0x1e>
 8005772:	bf00      	nop
 8005774:	200004d8 	.word	0x200004d8

08005778 <_malloc_r>:
 8005778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800577c:	1ccd      	adds	r5, r1, #3
 800577e:	f025 0503 	bic.w	r5, r5, #3
 8005782:	3508      	adds	r5, #8
 8005784:	2d0c      	cmp	r5, #12
 8005786:	bf38      	it	cc
 8005788:	250c      	movcc	r5, #12
 800578a:	2d00      	cmp	r5, #0
 800578c:	4606      	mov	r6, r0
 800578e:	db01      	blt.n	8005794 <_malloc_r+0x1c>
 8005790:	42a9      	cmp	r1, r5
 8005792:	d904      	bls.n	800579e <_malloc_r+0x26>
 8005794:	230c      	movs	r3, #12
 8005796:	6033      	str	r3, [r6, #0]
 8005798:	2000      	movs	r0, #0
 800579a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800579e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005874 <_malloc_r+0xfc>
 80057a2:	f000 f869 	bl	8005878 <__malloc_lock>
 80057a6:	f8d8 3000 	ldr.w	r3, [r8]
 80057aa:	461c      	mov	r4, r3
 80057ac:	bb44      	cbnz	r4, 8005800 <_malloc_r+0x88>
 80057ae:	4629      	mov	r1, r5
 80057b0:	4630      	mov	r0, r6
 80057b2:	f7ff ffbf 	bl	8005734 <sbrk_aligned>
 80057b6:	1c43      	adds	r3, r0, #1
 80057b8:	4604      	mov	r4, r0
 80057ba:	d158      	bne.n	800586e <_malloc_r+0xf6>
 80057bc:	f8d8 4000 	ldr.w	r4, [r8]
 80057c0:	4627      	mov	r7, r4
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	d143      	bne.n	800584e <_malloc_r+0xd6>
 80057c6:	2c00      	cmp	r4, #0
 80057c8:	d04b      	beq.n	8005862 <_malloc_r+0xea>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	4639      	mov	r1, r7
 80057ce:	4630      	mov	r0, r6
 80057d0:	eb04 0903 	add.w	r9, r4, r3
 80057d4:	f000 fd34 	bl	8006240 <_sbrk_r>
 80057d8:	4581      	cmp	r9, r0
 80057da:	d142      	bne.n	8005862 <_malloc_r+0xea>
 80057dc:	6821      	ldr	r1, [r4, #0]
 80057de:	4630      	mov	r0, r6
 80057e0:	1a6d      	subs	r5, r5, r1
 80057e2:	4629      	mov	r1, r5
 80057e4:	f7ff ffa6 	bl	8005734 <sbrk_aligned>
 80057e8:	3001      	adds	r0, #1
 80057ea:	d03a      	beq.n	8005862 <_malloc_r+0xea>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	442b      	add	r3, r5
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	f8d8 3000 	ldr.w	r3, [r8]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	bb62      	cbnz	r2, 8005854 <_malloc_r+0xdc>
 80057fa:	f8c8 7000 	str.w	r7, [r8]
 80057fe:	e00f      	b.n	8005820 <_malloc_r+0xa8>
 8005800:	6822      	ldr	r2, [r4, #0]
 8005802:	1b52      	subs	r2, r2, r5
 8005804:	d420      	bmi.n	8005848 <_malloc_r+0xd0>
 8005806:	2a0b      	cmp	r2, #11
 8005808:	d917      	bls.n	800583a <_malloc_r+0xc2>
 800580a:	1961      	adds	r1, r4, r5
 800580c:	42a3      	cmp	r3, r4
 800580e:	6025      	str	r5, [r4, #0]
 8005810:	bf18      	it	ne
 8005812:	6059      	strne	r1, [r3, #4]
 8005814:	6863      	ldr	r3, [r4, #4]
 8005816:	bf08      	it	eq
 8005818:	f8c8 1000 	streq.w	r1, [r8]
 800581c:	5162      	str	r2, [r4, r5]
 800581e:	604b      	str	r3, [r1, #4]
 8005820:	4630      	mov	r0, r6
 8005822:	f000 f82f 	bl	8005884 <__malloc_unlock>
 8005826:	f104 000b 	add.w	r0, r4, #11
 800582a:	1d23      	adds	r3, r4, #4
 800582c:	f020 0007 	bic.w	r0, r0, #7
 8005830:	1ac2      	subs	r2, r0, r3
 8005832:	bf1c      	itt	ne
 8005834:	1a1b      	subne	r3, r3, r0
 8005836:	50a3      	strne	r3, [r4, r2]
 8005838:	e7af      	b.n	800579a <_malloc_r+0x22>
 800583a:	6862      	ldr	r2, [r4, #4]
 800583c:	42a3      	cmp	r3, r4
 800583e:	bf0c      	ite	eq
 8005840:	f8c8 2000 	streq.w	r2, [r8]
 8005844:	605a      	strne	r2, [r3, #4]
 8005846:	e7eb      	b.n	8005820 <_malloc_r+0xa8>
 8005848:	4623      	mov	r3, r4
 800584a:	6864      	ldr	r4, [r4, #4]
 800584c:	e7ae      	b.n	80057ac <_malloc_r+0x34>
 800584e:	463c      	mov	r4, r7
 8005850:	687f      	ldr	r7, [r7, #4]
 8005852:	e7b6      	b.n	80057c2 <_malloc_r+0x4a>
 8005854:	461a      	mov	r2, r3
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	42a3      	cmp	r3, r4
 800585a:	d1fb      	bne.n	8005854 <_malloc_r+0xdc>
 800585c:	2300      	movs	r3, #0
 800585e:	6053      	str	r3, [r2, #4]
 8005860:	e7de      	b.n	8005820 <_malloc_r+0xa8>
 8005862:	230c      	movs	r3, #12
 8005864:	4630      	mov	r0, r6
 8005866:	6033      	str	r3, [r6, #0]
 8005868:	f000 f80c 	bl	8005884 <__malloc_unlock>
 800586c:	e794      	b.n	8005798 <_malloc_r+0x20>
 800586e:	6005      	str	r5, [r0, #0]
 8005870:	e7d6      	b.n	8005820 <_malloc_r+0xa8>
 8005872:	bf00      	nop
 8005874:	200004dc 	.word	0x200004dc

08005878 <__malloc_lock>:
 8005878:	4801      	ldr	r0, [pc, #4]	@ (8005880 <__malloc_lock+0x8>)
 800587a:	f7ff bf10 	b.w	800569e <__retarget_lock_acquire_recursive>
 800587e:	bf00      	nop
 8005880:	200004d4 	.word	0x200004d4

08005884 <__malloc_unlock>:
 8005884:	4801      	ldr	r0, [pc, #4]	@ (800588c <__malloc_unlock+0x8>)
 8005886:	f7ff bf0b 	b.w	80056a0 <__retarget_lock_release_recursive>
 800588a:	bf00      	nop
 800588c:	200004d4 	.word	0x200004d4

08005890 <__ssputs_r>:
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	461f      	mov	r7, r3
 8005896:	688e      	ldr	r6, [r1, #8]
 8005898:	4682      	mov	sl, r0
 800589a:	42be      	cmp	r6, r7
 800589c:	460c      	mov	r4, r1
 800589e:	4690      	mov	r8, r2
 80058a0:	680b      	ldr	r3, [r1, #0]
 80058a2:	d82d      	bhi.n	8005900 <__ssputs_r+0x70>
 80058a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80058ac:	d026      	beq.n	80058fc <__ssputs_r+0x6c>
 80058ae:	6965      	ldr	r5, [r4, #20]
 80058b0:	6909      	ldr	r1, [r1, #16]
 80058b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058b6:	eba3 0901 	sub.w	r9, r3, r1
 80058ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058be:	1c7b      	adds	r3, r7, #1
 80058c0:	444b      	add	r3, r9
 80058c2:	106d      	asrs	r5, r5, #1
 80058c4:	429d      	cmp	r5, r3
 80058c6:	bf38      	it	cc
 80058c8:	461d      	movcc	r5, r3
 80058ca:	0553      	lsls	r3, r2, #21
 80058cc:	d527      	bpl.n	800591e <__ssputs_r+0x8e>
 80058ce:	4629      	mov	r1, r5
 80058d0:	f7ff ff52 	bl	8005778 <_malloc_r>
 80058d4:	4606      	mov	r6, r0
 80058d6:	b360      	cbz	r0, 8005932 <__ssputs_r+0xa2>
 80058d8:	464a      	mov	r2, r9
 80058da:	6921      	ldr	r1, [r4, #16]
 80058dc:	f000 fcce 	bl	800627c <memcpy>
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80058e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ea:	81a3      	strh	r3, [r4, #12]
 80058ec:	6126      	str	r6, [r4, #16]
 80058ee:	444e      	add	r6, r9
 80058f0:	6026      	str	r6, [r4, #0]
 80058f2:	463e      	mov	r6, r7
 80058f4:	6165      	str	r5, [r4, #20]
 80058f6:	eba5 0509 	sub.w	r5, r5, r9
 80058fa:	60a5      	str	r5, [r4, #8]
 80058fc:	42be      	cmp	r6, r7
 80058fe:	d900      	bls.n	8005902 <__ssputs_r+0x72>
 8005900:	463e      	mov	r6, r7
 8005902:	4632      	mov	r2, r6
 8005904:	4641      	mov	r1, r8
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	f000 fc80 	bl	800620c <memmove>
 800590c:	2000      	movs	r0, #0
 800590e:	68a3      	ldr	r3, [r4, #8]
 8005910:	1b9b      	subs	r3, r3, r6
 8005912:	60a3      	str	r3, [r4, #8]
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	4433      	add	r3, r6
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591e:	462a      	mov	r2, r5
 8005920:	f000 fcba 	bl	8006298 <_realloc_r>
 8005924:	4606      	mov	r6, r0
 8005926:	2800      	cmp	r0, #0
 8005928:	d1e0      	bne.n	80058ec <__ssputs_r+0x5c>
 800592a:	4650      	mov	r0, sl
 800592c:	6921      	ldr	r1, [r4, #16]
 800592e:	f7ff feb9 	bl	80056a4 <_free_r>
 8005932:	230c      	movs	r3, #12
 8005934:	f8ca 3000 	str.w	r3, [sl]
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	f04f 30ff 	mov.w	r0, #4294967295
 800593e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	e7e9      	b.n	800591a <__ssputs_r+0x8a>
	...

08005948 <_svfiprintf_r>:
 8005948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	4698      	mov	r8, r3
 800594e:	898b      	ldrh	r3, [r1, #12]
 8005950:	4607      	mov	r7, r0
 8005952:	061b      	lsls	r3, r3, #24
 8005954:	460d      	mov	r5, r1
 8005956:	4614      	mov	r4, r2
 8005958:	b09d      	sub	sp, #116	@ 0x74
 800595a:	d510      	bpl.n	800597e <_svfiprintf_r+0x36>
 800595c:	690b      	ldr	r3, [r1, #16]
 800595e:	b973      	cbnz	r3, 800597e <_svfiprintf_r+0x36>
 8005960:	2140      	movs	r1, #64	@ 0x40
 8005962:	f7ff ff09 	bl	8005778 <_malloc_r>
 8005966:	6028      	str	r0, [r5, #0]
 8005968:	6128      	str	r0, [r5, #16]
 800596a:	b930      	cbnz	r0, 800597a <_svfiprintf_r+0x32>
 800596c:	230c      	movs	r3, #12
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	b01d      	add	sp, #116	@ 0x74
 8005976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597a:	2340      	movs	r3, #64	@ 0x40
 800597c:	616b      	str	r3, [r5, #20]
 800597e:	2300      	movs	r3, #0
 8005980:	9309      	str	r3, [sp, #36]	@ 0x24
 8005982:	2320      	movs	r3, #32
 8005984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005988:	2330      	movs	r3, #48	@ 0x30
 800598a:	f04f 0901 	mov.w	r9, #1
 800598e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005992:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005b2c <_svfiprintf_r+0x1e4>
 8005996:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800599a:	4623      	mov	r3, r4
 800599c:	469a      	mov	sl, r3
 800599e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059a2:	b10a      	cbz	r2, 80059a8 <_svfiprintf_r+0x60>
 80059a4:	2a25      	cmp	r2, #37	@ 0x25
 80059a6:	d1f9      	bne.n	800599c <_svfiprintf_r+0x54>
 80059a8:	ebba 0b04 	subs.w	fp, sl, r4
 80059ac:	d00b      	beq.n	80059c6 <_svfiprintf_r+0x7e>
 80059ae:	465b      	mov	r3, fp
 80059b0:	4622      	mov	r2, r4
 80059b2:	4629      	mov	r1, r5
 80059b4:	4638      	mov	r0, r7
 80059b6:	f7ff ff6b 	bl	8005890 <__ssputs_r>
 80059ba:	3001      	adds	r0, #1
 80059bc:	f000 80a7 	beq.w	8005b0e <_svfiprintf_r+0x1c6>
 80059c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059c2:	445a      	add	r2, fp
 80059c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80059c6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 809f 	beq.w	8005b0e <_svfiprintf_r+0x1c6>
 80059d0:	2300      	movs	r3, #0
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295
 80059d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059da:	f10a 0a01 	add.w	sl, sl, #1
 80059de:	9304      	str	r3, [sp, #16]
 80059e0:	9307      	str	r3, [sp, #28]
 80059e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80059e8:	4654      	mov	r4, sl
 80059ea:	2205      	movs	r2, #5
 80059ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f0:	484e      	ldr	r0, [pc, #312]	@ (8005b2c <_svfiprintf_r+0x1e4>)
 80059f2:	f000 fc35 	bl	8006260 <memchr>
 80059f6:	9a04      	ldr	r2, [sp, #16]
 80059f8:	b9d8      	cbnz	r0, 8005a32 <_svfiprintf_r+0xea>
 80059fa:	06d0      	lsls	r0, r2, #27
 80059fc:	bf44      	itt	mi
 80059fe:	2320      	movmi	r3, #32
 8005a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a04:	0711      	lsls	r1, r2, #28
 8005a06:	bf44      	itt	mi
 8005a08:	232b      	movmi	r3, #43	@ 0x2b
 8005a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a14:	d015      	beq.n	8005a42 <_svfiprintf_r+0xfa>
 8005a16:	4654      	mov	r4, sl
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f04f 0c0a 	mov.w	ip, #10
 8005a1e:	9a07      	ldr	r2, [sp, #28]
 8005a20:	4621      	mov	r1, r4
 8005a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a26:	3b30      	subs	r3, #48	@ 0x30
 8005a28:	2b09      	cmp	r3, #9
 8005a2a:	d94b      	bls.n	8005ac4 <_svfiprintf_r+0x17c>
 8005a2c:	b1b0      	cbz	r0, 8005a5c <_svfiprintf_r+0x114>
 8005a2e:	9207      	str	r2, [sp, #28]
 8005a30:	e014      	b.n	8005a5c <_svfiprintf_r+0x114>
 8005a32:	eba0 0308 	sub.w	r3, r0, r8
 8005a36:	fa09 f303 	lsl.w	r3, r9, r3
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	46a2      	mov	sl, r4
 8005a3e:	9304      	str	r3, [sp, #16]
 8005a40:	e7d2      	b.n	80059e8 <_svfiprintf_r+0xa0>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	1d19      	adds	r1, r3, #4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	9103      	str	r1, [sp, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bfbb      	ittet	lt
 8005a4e:	425b      	neglt	r3, r3
 8005a50:	f042 0202 	orrlt.w	r2, r2, #2
 8005a54:	9307      	strge	r3, [sp, #28]
 8005a56:	9307      	strlt	r3, [sp, #28]
 8005a58:	bfb8      	it	lt
 8005a5a:	9204      	strlt	r2, [sp, #16]
 8005a5c:	7823      	ldrb	r3, [r4, #0]
 8005a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a60:	d10a      	bne.n	8005a78 <_svfiprintf_r+0x130>
 8005a62:	7863      	ldrb	r3, [r4, #1]
 8005a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a66:	d132      	bne.n	8005ace <_svfiprintf_r+0x186>
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	3402      	adds	r4, #2
 8005a6c:	1d1a      	adds	r2, r3, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	9203      	str	r2, [sp, #12]
 8005a72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a76:	9305      	str	r3, [sp, #20]
 8005a78:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005b30 <_svfiprintf_r+0x1e8>
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	4650      	mov	r0, sl
 8005a80:	7821      	ldrb	r1, [r4, #0]
 8005a82:	f000 fbed 	bl	8006260 <memchr>
 8005a86:	b138      	cbz	r0, 8005a98 <_svfiprintf_r+0x150>
 8005a88:	2240      	movs	r2, #64	@ 0x40
 8005a8a:	9b04      	ldr	r3, [sp, #16]
 8005a8c:	eba0 000a 	sub.w	r0, r0, sl
 8005a90:	4082      	lsls	r2, r0
 8005a92:	4313      	orrs	r3, r2
 8005a94:	3401      	adds	r4, #1
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a9c:	2206      	movs	r2, #6
 8005a9e:	4825      	ldr	r0, [pc, #148]	@ (8005b34 <_svfiprintf_r+0x1ec>)
 8005aa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005aa4:	f000 fbdc 	bl	8006260 <memchr>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d036      	beq.n	8005b1a <_svfiprintf_r+0x1d2>
 8005aac:	4b22      	ldr	r3, [pc, #136]	@ (8005b38 <_svfiprintf_r+0x1f0>)
 8005aae:	bb1b      	cbnz	r3, 8005af8 <_svfiprintf_r+0x1b0>
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	3307      	adds	r3, #7
 8005ab4:	f023 0307 	bic.w	r3, r3, #7
 8005ab8:	3308      	adds	r3, #8
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005abe:	4433      	add	r3, r6
 8005ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ac2:	e76a      	b.n	800599a <_svfiprintf_r+0x52>
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005acc:	e7a8      	b.n	8005a20 <_svfiprintf_r+0xd8>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f04f 0c0a 	mov.w	ip, #10
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	3401      	adds	r4, #1
 8005ad8:	9305      	str	r3, [sp, #20]
 8005ada:	4620      	mov	r0, r4
 8005adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ae0:	3a30      	subs	r2, #48	@ 0x30
 8005ae2:	2a09      	cmp	r2, #9
 8005ae4:	d903      	bls.n	8005aee <_svfiprintf_r+0x1a6>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0c6      	beq.n	8005a78 <_svfiprintf_r+0x130>
 8005aea:	9105      	str	r1, [sp, #20]
 8005aec:	e7c4      	b.n	8005a78 <_svfiprintf_r+0x130>
 8005aee:	4604      	mov	r4, r0
 8005af0:	2301      	movs	r3, #1
 8005af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005af6:	e7f0      	b.n	8005ada <_svfiprintf_r+0x192>
 8005af8:	ab03      	add	r3, sp, #12
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	462a      	mov	r2, r5
 8005afe:	4638      	mov	r0, r7
 8005b00:	4b0e      	ldr	r3, [pc, #56]	@ (8005b3c <_svfiprintf_r+0x1f4>)
 8005b02:	a904      	add	r1, sp, #16
 8005b04:	f3af 8000 	nop.w
 8005b08:	1c42      	adds	r2, r0, #1
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	d1d6      	bne.n	8005abc <_svfiprintf_r+0x174>
 8005b0e:	89ab      	ldrh	r3, [r5, #12]
 8005b10:	065b      	lsls	r3, r3, #25
 8005b12:	f53f af2d 	bmi.w	8005970 <_svfiprintf_r+0x28>
 8005b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b18:	e72c      	b.n	8005974 <_svfiprintf_r+0x2c>
 8005b1a:	ab03      	add	r3, sp, #12
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	462a      	mov	r2, r5
 8005b20:	4638      	mov	r0, r7
 8005b22:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <_svfiprintf_r+0x1f4>)
 8005b24:	a904      	add	r1, sp, #16
 8005b26:	f000 f9bd 	bl	8005ea4 <_printf_i>
 8005b2a:	e7ed      	b.n	8005b08 <_svfiprintf_r+0x1c0>
 8005b2c:	08006aba 	.word	0x08006aba
 8005b30:	08006ac0 	.word	0x08006ac0
 8005b34:	08006ac4 	.word	0x08006ac4
 8005b38:	00000000 	.word	0x00000000
 8005b3c:	08005891 	.word	0x08005891

08005b40 <__sfputc_r>:
 8005b40:	6893      	ldr	r3, [r2, #8]
 8005b42:	b410      	push	{r4}
 8005b44:	3b01      	subs	r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	6093      	str	r3, [r2, #8]
 8005b4a:	da07      	bge.n	8005b5c <__sfputc_r+0x1c>
 8005b4c:	6994      	ldr	r4, [r2, #24]
 8005b4e:	42a3      	cmp	r3, r4
 8005b50:	db01      	blt.n	8005b56 <__sfputc_r+0x16>
 8005b52:	290a      	cmp	r1, #10
 8005b54:	d102      	bne.n	8005b5c <__sfputc_r+0x1c>
 8005b56:	bc10      	pop	{r4}
 8005b58:	f000 bac4 	b.w	80060e4 <__swbuf_r>
 8005b5c:	6813      	ldr	r3, [r2, #0]
 8005b5e:	1c58      	adds	r0, r3, #1
 8005b60:	6010      	str	r0, [r2, #0]
 8005b62:	7019      	strb	r1, [r3, #0]
 8005b64:	4608      	mov	r0, r1
 8005b66:	bc10      	pop	{r4}
 8005b68:	4770      	bx	lr

08005b6a <__sfputs_r>:
 8005b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6c:	4606      	mov	r6, r0
 8005b6e:	460f      	mov	r7, r1
 8005b70:	4614      	mov	r4, r2
 8005b72:	18d5      	adds	r5, r2, r3
 8005b74:	42ac      	cmp	r4, r5
 8005b76:	d101      	bne.n	8005b7c <__sfputs_r+0x12>
 8005b78:	2000      	movs	r0, #0
 8005b7a:	e007      	b.n	8005b8c <__sfputs_r+0x22>
 8005b7c:	463a      	mov	r2, r7
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b84:	f7ff ffdc 	bl	8005b40 <__sfputc_r>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d1f3      	bne.n	8005b74 <__sfputs_r+0xa>
 8005b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b90 <_vfiprintf_r>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	460d      	mov	r5, r1
 8005b96:	4614      	mov	r4, r2
 8005b98:	4698      	mov	r8, r3
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	b09d      	sub	sp, #116	@ 0x74
 8005b9e:	b118      	cbz	r0, 8005ba8 <_vfiprintf_r+0x18>
 8005ba0:	6a03      	ldr	r3, [r0, #32]
 8005ba2:	b90b      	cbnz	r3, 8005ba8 <_vfiprintf_r+0x18>
 8005ba4:	f7ff fc42 	bl	800542c <__sinit>
 8005ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005baa:	07d9      	lsls	r1, r3, #31
 8005bac:	d405      	bmi.n	8005bba <_vfiprintf_r+0x2a>
 8005bae:	89ab      	ldrh	r3, [r5, #12]
 8005bb0:	059a      	lsls	r2, r3, #22
 8005bb2:	d402      	bmi.n	8005bba <_vfiprintf_r+0x2a>
 8005bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bb6:	f7ff fd72 	bl	800569e <__retarget_lock_acquire_recursive>
 8005bba:	89ab      	ldrh	r3, [r5, #12]
 8005bbc:	071b      	lsls	r3, r3, #28
 8005bbe:	d501      	bpl.n	8005bc4 <_vfiprintf_r+0x34>
 8005bc0:	692b      	ldr	r3, [r5, #16]
 8005bc2:	b99b      	cbnz	r3, 8005bec <_vfiprintf_r+0x5c>
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f000 faca 	bl	8006160 <__swsetup_r>
 8005bcc:	b170      	cbz	r0, 8005bec <_vfiprintf_r+0x5c>
 8005bce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bd0:	07dc      	lsls	r4, r3, #31
 8005bd2:	d504      	bpl.n	8005bde <_vfiprintf_r+0x4e>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	b01d      	add	sp, #116	@ 0x74
 8005bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bde:	89ab      	ldrh	r3, [r5, #12]
 8005be0:	0598      	lsls	r0, r3, #22
 8005be2:	d4f7      	bmi.n	8005bd4 <_vfiprintf_r+0x44>
 8005be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005be6:	f7ff fd5b 	bl	80056a0 <__retarget_lock_release_recursive>
 8005bea:	e7f3      	b.n	8005bd4 <_vfiprintf_r+0x44>
 8005bec:	2300      	movs	r3, #0
 8005bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bf0:	2320      	movs	r3, #32
 8005bf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bf6:	2330      	movs	r3, #48	@ 0x30
 8005bf8:	f04f 0901 	mov.w	r9, #1
 8005bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c00:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005dac <_vfiprintf_r+0x21c>
 8005c04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c08:	4623      	mov	r3, r4
 8005c0a:	469a      	mov	sl, r3
 8005c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c10:	b10a      	cbz	r2, 8005c16 <_vfiprintf_r+0x86>
 8005c12:	2a25      	cmp	r2, #37	@ 0x25
 8005c14:	d1f9      	bne.n	8005c0a <_vfiprintf_r+0x7a>
 8005c16:	ebba 0b04 	subs.w	fp, sl, r4
 8005c1a:	d00b      	beq.n	8005c34 <_vfiprintf_r+0xa4>
 8005c1c:	465b      	mov	r3, fp
 8005c1e:	4622      	mov	r2, r4
 8005c20:	4629      	mov	r1, r5
 8005c22:	4630      	mov	r0, r6
 8005c24:	f7ff ffa1 	bl	8005b6a <__sfputs_r>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f000 80a7 	beq.w	8005d7c <_vfiprintf_r+0x1ec>
 8005c2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c30:	445a      	add	r2, fp
 8005c32:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c34:	f89a 3000 	ldrb.w	r3, [sl]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 809f 	beq.w	8005d7c <_vfiprintf_r+0x1ec>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f04f 32ff 	mov.w	r2, #4294967295
 8005c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c48:	f10a 0a01 	add.w	sl, sl, #1
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	9307      	str	r3, [sp, #28]
 8005c50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c54:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c56:	4654      	mov	r4, sl
 8005c58:	2205      	movs	r2, #5
 8005c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c5e:	4853      	ldr	r0, [pc, #332]	@ (8005dac <_vfiprintf_r+0x21c>)
 8005c60:	f000 fafe 	bl	8006260 <memchr>
 8005c64:	9a04      	ldr	r2, [sp, #16]
 8005c66:	b9d8      	cbnz	r0, 8005ca0 <_vfiprintf_r+0x110>
 8005c68:	06d1      	lsls	r1, r2, #27
 8005c6a:	bf44      	itt	mi
 8005c6c:	2320      	movmi	r3, #32
 8005c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c72:	0713      	lsls	r3, r2, #28
 8005c74:	bf44      	itt	mi
 8005c76:	232b      	movmi	r3, #43	@ 0x2b
 8005c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c82:	d015      	beq.n	8005cb0 <_vfiprintf_r+0x120>
 8005c84:	4654      	mov	r4, sl
 8005c86:	2000      	movs	r0, #0
 8005c88:	f04f 0c0a 	mov.w	ip, #10
 8005c8c:	9a07      	ldr	r2, [sp, #28]
 8005c8e:	4621      	mov	r1, r4
 8005c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c94:	3b30      	subs	r3, #48	@ 0x30
 8005c96:	2b09      	cmp	r3, #9
 8005c98:	d94b      	bls.n	8005d32 <_vfiprintf_r+0x1a2>
 8005c9a:	b1b0      	cbz	r0, 8005cca <_vfiprintf_r+0x13a>
 8005c9c:	9207      	str	r2, [sp, #28]
 8005c9e:	e014      	b.n	8005cca <_vfiprintf_r+0x13a>
 8005ca0:	eba0 0308 	sub.w	r3, r0, r8
 8005ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	46a2      	mov	sl, r4
 8005cac:	9304      	str	r3, [sp, #16]
 8005cae:	e7d2      	b.n	8005c56 <_vfiprintf_r+0xc6>
 8005cb0:	9b03      	ldr	r3, [sp, #12]
 8005cb2:	1d19      	adds	r1, r3, #4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	9103      	str	r1, [sp, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bfbb      	ittet	lt
 8005cbc:	425b      	neglt	r3, r3
 8005cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8005cc2:	9307      	strge	r3, [sp, #28]
 8005cc4:	9307      	strlt	r3, [sp, #28]
 8005cc6:	bfb8      	it	lt
 8005cc8:	9204      	strlt	r2, [sp, #16]
 8005cca:	7823      	ldrb	r3, [r4, #0]
 8005ccc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cce:	d10a      	bne.n	8005ce6 <_vfiprintf_r+0x156>
 8005cd0:	7863      	ldrb	r3, [r4, #1]
 8005cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cd4:	d132      	bne.n	8005d3c <_vfiprintf_r+0x1ac>
 8005cd6:	9b03      	ldr	r3, [sp, #12]
 8005cd8:	3402      	adds	r4, #2
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	9203      	str	r2, [sp, #12]
 8005ce0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ce4:	9305      	str	r3, [sp, #20]
 8005ce6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005db0 <_vfiprintf_r+0x220>
 8005cea:	2203      	movs	r2, #3
 8005cec:	4650      	mov	r0, sl
 8005cee:	7821      	ldrb	r1, [r4, #0]
 8005cf0:	f000 fab6 	bl	8006260 <memchr>
 8005cf4:	b138      	cbz	r0, 8005d06 <_vfiprintf_r+0x176>
 8005cf6:	2240      	movs	r2, #64	@ 0x40
 8005cf8:	9b04      	ldr	r3, [sp, #16]
 8005cfa:	eba0 000a 	sub.w	r0, r0, sl
 8005cfe:	4082      	lsls	r2, r0
 8005d00:	4313      	orrs	r3, r2
 8005d02:	3401      	adds	r4, #1
 8005d04:	9304      	str	r3, [sp, #16]
 8005d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0a:	2206      	movs	r2, #6
 8005d0c:	4829      	ldr	r0, [pc, #164]	@ (8005db4 <_vfiprintf_r+0x224>)
 8005d0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d12:	f000 faa5 	bl	8006260 <memchr>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d03f      	beq.n	8005d9a <_vfiprintf_r+0x20a>
 8005d1a:	4b27      	ldr	r3, [pc, #156]	@ (8005db8 <_vfiprintf_r+0x228>)
 8005d1c:	bb1b      	cbnz	r3, 8005d66 <_vfiprintf_r+0x1d6>
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	3307      	adds	r3, #7
 8005d22:	f023 0307 	bic.w	r3, r3, #7
 8005d26:	3308      	adds	r3, #8
 8005d28:	9303      	str	r3, [sp, #12]
 8005d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d2c:	443b      	add	r3, r7
 8005d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d30:	e76a      	b.n	8005c08 <_vfiprintf_r+0x78>
 8005d32:	460c      	mov	r4, r1
 8005d34:	2001      	movs	r0, #1
 8005d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d3a:	e7a8      	b.n	8005c8e <_vfiprintf_r+0xfe>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f04f 0c0a 	mov.w	ip, #10
 8005d42:	4619      	mov	r1, r3
 8005d44:	3401      	adds	r4, #1
 8005d46:	9305      	str	r3, [sp, #20]
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d4e:	3a30      	subs	r2, #48	@ 0x30
 8005d50:	2a09      	cmp	r2, #9
 8005d52:	d903      	bls.n	8005d5c <_vfiprintf_r+0x1cc>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0c6      	beq.n	8005ce6 <_vfiprintf_r+0x156>
 8005d58:	9105      	str	r1, [sp, #20]
 8005d5a:	e7c4      	b.n	8005ce6 <_vfiprintf_r+0x156>
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	2301      	movs	r3, #1
 8005d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d64:	e7f0      	b.n	8005d48 <_vfiprintf_r+0x1b8>
 8005d66:	ab03      	add	r3, sp, #12
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	462a      	mov	r2, r5
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <_vfiprintf_r+0x22c>)
 8005d70:	a904      	add	r1, sp, #16
 8005d72:	f3af 8000 	nop.w
 8005d76:	4607      	mov	r7, r0
 8005d78:	1c78      	adds	r0, r7, #1
 8005d7a:	d1d6      	bne.n	8005d2a <_vfiprintf_r+0x19a>
 8005d7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d7e:	07d9      	lsls	r1, r3, #31
 8005d80:	d405      	bmi.n	8005d8e <_vfiprintf_r+0x1fe>
 8005d82:	89ab      	ldrh	r3, [r5, #12]
 8005d84:	059a      	lsls	r2, r3, #22
 8005d86:	d402      	bmi.n	8005d8e <_vfiprintf_r+0x1fe>
 8005d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d8a:	f7ff fc89 	bl	80056a0 <__retarget_lock_release_recursive>
 8005d8e:	89ab      	ldrh	r3, [r5, #12]
 8005d90:	065b      	lsls	r3, r3, #25
 8005d92:	f53f af1f 	bmi.w	8005bd4 <_vfiprintf_r+0x44>
 8005d96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d98:	e71e      	b.n	8005bd8 <_vfiprintf_r+0x48>
 8005d9a:	ab03      	add	r3, sp, #12
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	462a      	mov	r2, r5
 8005da0:	4630      	mov	r0, r6
 8005da2:	4b06      	ldr	r3, [pc, #24]	@ (8005dbc <_vfiprintf_r+0x22c>)
 8005da4:	a904      	add	r1, sp, #16
 8005da6:	f000 f87d 	bl	8005ea4 <_printf_i>
 8005daa:	e7e4      	b.n	8005d76 <_vfiprintf_r+0x1e6>
 8005dac:	08006aba 	.word	0x08006aba
 8005db0:	08006ac0 	.word	0x08006ac0
 8005db4:	08006ac4 	.word	0x08006ac4
 8005db8:	00000000 	.word	0x00000000
 8005dbc:	08005b6b 	.word	0x08005b6b

08005dc0 <_printf_common>:
 8005dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	4616      	mov	r6, r2
 8005dc6:	4698      	mov	r8, r3
 8005dc8:	688a      	ldr	r2, [r1, #8]
 8005dca:	690b      	ldr	r3, [r1, #16]
 8005dcc:	4607      	mov	r7, r0
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	bfb8      	it	lt
 8005dd2:	4613      	movlt	r3, r2
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dda:	460c      	mov	r4, r1
 8005ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005de0:	b10a      	cbz	r2, 8005de6 <_printf_common+0x26>
 8005de2:	3301      	adds	r3, #1
 8005de4:	6033      	str	r3, [r6, #0]
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	0699      	lsls	r1, r3, #26
 8005dea:	bf42      	ittt	mi
 8005dec:	6833      	ldrmi	r3, [r6, #0]
 8005dee:	3302      	addmi	r3, #2
 8005df0:	6033      	strmi	r3, [r6, #0]
 8005df2:	6825      	ldr	r5, [r4, #0]
 8005df4:	f015 0506 	ands.w	r5, r5, #6
 8005df8:	d106      	bne.n	8005e08 <_printf_common+0x48>
 8005dfa:	f104 0a19 	add.w	sl, r4, #25
 8005dfe:	68e3      	ldr	r3, [r4, #12]
 8005e00:	6832      	ldr	r2, [r6, #0]
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	42ab      	cmp	r3, r5
 8005e06:	dc2b      	bgt.n	8005e60 <_printf_common+0xa0>
 8005e08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e0c:	6822      	ldr	r2, [r4, #0]
 8005e0e:	3b00      	subs	r3, #0
 8005e10:	bf18      	it	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	0692      	lsls	r2, r2, #26
 8005e16:	d430      	bmi.n	8005e7a <_printf_common+0xba>
 8005e18:	4641      	mov	r1, r8
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e20:	47c8      	blx	r9
 8005e22:	3001      	adds	r0, #1
 8005e24:	d023      	beq.n	8005e6e <_printf_common+0xae>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	6922      	ldr	r2, [r4, #16]
 8005e2a:	f003 0306 	and.w	r3, r3, #6
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	bf14      	ite	ne
 8005e32:	2500      	movne	r5, #0
 8005e34:	6833      	ldreq	r3, [r6, #0]
 8005e36:	f04f 0600 	mov.w	r6, #0
 8005e3a:	bf08      	it	eq
 8005e3c:	68e5      	ldreq	r5, [r4, #12]
 8005e3e:	f104 041a 	add.w	r4, r4, #26
 8005e42:	bf08      	it	eq
 8005e44:	1aed      	subeq	r5, r5, r3
 8005e46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e4a:	bf08      	it	eq
 8005e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e50:	4293      	cmp	r3, r2
 8005e52:	bfc4      	itt	gt
 8005e54:	1a9b      	subgt	r3, r3, r2
 8005e56:	18ed      	addgt	r5, r5, r3
 8005e58:	42b5      	cmp	r5, r6
 8005e5a:	d11a      	bne.n	8005e92 <_printf_common+0xd2>
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	e008      	b.n	8005e72 <_printf_common+0xb2>
 8005e60:	2301      	movs	r3, #1
 8005e62:	4652      	mov	r2, sl
 8005e64:	4641      	mov	r1, r8
 8005e66:	4638      	mov	r0, r7
 8005e68:	47c8      	blx	r9
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d103      	bne.n	8005e76 <_printf_common+0xb6>
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e76:	3501      	adds	r5, #1
 8005e78:	e7c1      	b.n	8005dfe <_printf_common+0x3e>
 8005e7a:	2030      	movs	r0, #48	@ 0x30
 8005e7c:	18e1      	adds	r1, r4, r3
 8005e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e88:	4422      	add	r2, r4
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e90:	e7c2      	b.n	8005e18 <_printf_common+0x58>
 8005e92:	2301      	movs	r3, #1
 8005e94:	4622      	mov	r2, r4
 8005e96:	4641      	mov	r1, r8
 8005e98:	4638      	mov	r0, r7
 8005e9a:	47c8      	blx	r9
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d0e6      	beq.n	8005e6e <_printf_common+0xae>
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7d9      	b.n	8005e58 <_printf_common+0x98>

08005ea4 <_printf_i>:
 8005ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	7e0f      	ldrb	r7, [r1, #24]
 8005eaa:	4691      	mov	r9, r2
 8005eac:	2f78      	cmp	r7, #120	@ 0x78
 8005eae:	4680      	mov	r8, r0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	469a      	mov	sl, r3
 8005eb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eba:	d807      	bhi.n	8005ecc <_printf_i+0x28>
 8005ebc:	2f62      	cmp	r7, #98	@ 0x62
 8005ebe:	d80a      	bhi.n	8005ed6 <_printf_i+0x32>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	f000 80d3 	beq.w	800606c <_printf_i+0x1c8>
 8005ec6:	2f58      	cmp	r7, #88	@ 0x58
 8005ec8:	f000 80ba 	beq.w	8006040 <_printf_i+0x19c>
 8005ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ed4:	e03a      	b.n	8005f4c <_printf_i+0xa8>
 8005ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005eda:	2b15      	cmp	r3, #21
 8005edc:	d8f6      	bhi.n	8005ecc <_printf_i+0x28>
 8005ede:	a101      	add	r1, pc, #4	@ (adr r1, 8005ee4 <_printf_i+0x40>)
 8005ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ee4:	08005f3d 	.word	0x08005f3d
 8005ee8:	08005f51 	.word	0x08005f51
 8005eec:	08005ecd 	.word	0x08005ecd
 8005ef0:	08005ecd 	.word	0x08005ecd
 8005ef4:	08005ecd 	.word	0x08005ecd
 8005ef8:	08005ecd 	.word	0x08005ecd
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08005ecd 	.word	0x08005ecd
 8005f04:	08005ecd 	.word	0x08005ecd
 8005f08:	08005ecd 	.word	0x08005ecd
 8005f0c:	08005ecd 	.word	0x08005ecd
 8005f10:	08006053 	.word	0x08006053
 8005f14:	08005f7b 	.word	0x08005f7b
 8005f18:	0800600d 	.word	0x0800600d
 8005f1c:	08005ecd 	.word	0x08005ecd
 8005f20:	08005ecd 	.word	0x08005ecd
 8005f24:	08006075 	.word	0x08006075
 8005f28:	08005ecd 	.word	0x08005ecd
 8005f2c:	08005f7b 	.word	0x08005f7b
 8005f30:	08005ecd 	.word	0x08005ecd
 8005f34:	08005ecd 	.word	0x08005ecd
 8005f38:	08006015 	.word	0x08006015
 8005f3c:	6833      	ldr	r3, [r6, #0]
 8005f3e:	1d1a      	adds	r2, r3, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6032      	str	r2, [r6, #0]
 8005f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e09e      	b.n	800608e <_printf_i+0x1ea>
 8005f50:	6833      	ldr	r3, [r6, #0]
 8005f52:	6820      	ldr	r0, [r4, #0]
 8005f54:	1d19      	adds	r1, r3, #4
 8005f56:	6031      	str	r1, [r6, #0]
 8005f58:	0606      	lsls	r6, r0, #24
 8005f5a:	d501      	bpl.n	8005f60 <_printf_i+0xbc>
 8005f5c:	681d      	ldr	r5, [r3, #0]
 8005f5e:	e003      	b.n	8005f68 <_printf_i+0xc4>
 8005f60:	0645      	lsls	r5, r0, #25
 8005f62:	d5fb      	bpl.n	8005f5c <_printf_i+0xb8>
 8005f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f68:	2d00      	cmp	r5, #0
 8005f6a:	da03      	bge.n	8005f74 <_printf_i+0xd0>
 8005f6c:	232d      	movs	r3, #45	@ 0x2d
 8005f6e:	426d      	negs	r5, r5
 8005f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f74:	230a      	movs	r3, #10
 8005f76:	4859      	ldr	r0, [pc, #356]	@ (80060dc <_printf_i+0x238>)
 8005f78:	e011      	b.n	8005f9e <_printf_i+0xfa>
 8005f7a:	6821      	ldr	r1, [r4, #0]
 8005f7c:	6833      	ldr	r3, [r6, #0]
 8005f7e:	0608      	lsls	r0, r1, #24
 8005f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f84:	d402      	bmi.n	8005f8c <_printf_i+0xe8>
 8005f86:	0649      	lsls	r1, r1, #25
 8005f88:	bf48      	it	mi
 8005f8a:	b2ad      	uxthmi	r5, r5
 8005f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f8e:	6033      	str	r3, [r6, #0]
 8005f90:	bf14      	ite	ne
 8005f92:	230a      	movne	r3, #10
 8005f94:	2308      	moveq	r3, #8
 8005f96:	4851      	ldr	r0, [pc, #324]	@ (80060dc <_printf_i+0x238>)
 8005f98:	2100      	movs	r1, #0
 8005f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f9e:	6866      	ldr	r6, [r4, #4]
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	bfa8      	it	ge
 8005fa4:	6821      	ldrge	r1, [r4, #0]
 8005fa6:	60a6      	str	r6, [r4, #8]
 8005fa8:	bfa4      	itt	ge
 8005faa:	f021 0104 	bicge.w	r1, r1, #4
 8005fae:	6021      	strge	r1, [r4, #0]
 8005fb0:	b90d      	cbnz	r5, 8005fb6 <_printf_i+0x112>
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d04b      	beq.n	800604e <_printf_i+0x1aa>
 8005fb6:	4616      	mov	r6, r2
 8005fb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fbc:	fb03 5711 	mls	r7, r3, r1, r5
 8005fc0:	5dc7      	ldrb	r7, [r0, r7]
 8005fc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fc6:	462f      	mov	r7, r5
 8005fc8:	42bb      	cmp	r3, r7
 8005fca:	460d      	mov	r5, r1
 8005fcc:	d9f4      	bls.n	8005fb8 <_printf_i+0x114>
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d10b      	bne.n	8005fea <_printf_i+0x146>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	07df      	lsls	r7, r3, #31
 8005fd6:	d508      	bpl.n	8005fea <_printf_i+0x146>
 8005fd8:	6923      	ldr	r3, [r4, #16]
 8005fda:	6861      	ldr	r1, [r4, #4]
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	bfde      	ittt	le
 8005fe0:	2330      	movle	r3, #48	@ 0x30
 8005fe2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fe6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fea:	1b92      	subs	r2, r2, r6
 8005fec:	6122      	str	r2, [r4, #16]
 8005fee:	464b      	mov	r3, r9
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	f8cd a000 	str.w	sl, [sp]
 8005ff8:	aa03      	add	r2, sp, #12
 8005ffa:	f7ff fee1 	bl	8005dc0 <_printf_common>
 8005ffe:	3001      	adds	r0, #1
 8006000:	d14a      	bne.n	8006098 <_printf_i+0x1f4>
 8006002:	f04f 30ff 	mov.w	r0, #4294967295
 8006006:	b004      	add	sp, #16
 8006008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	f043 0320 	orr.w	r3, r3, #32
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	2778      	movs	r7, #120	@ 0x78
 8006016:	4832      	ldr	r0, [pc, #200]	@ (80060e0 <_printf_i+0x23c>)
 8006018:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	6831      	ldr	r1, [r6, #0]
 8006020:	061f      	lsls	r7, r3, #24
 8006022:	f851 5b04 	ldr.w	r5, [r1], #4
 8006026:	d402      	bmi.n	800602e <_printf_i+0x18a>
 8006028:	065f      	lsls	r7, r3, #25
 800602a:	bf48      	it	mi
 800602c:	b2ad      	uxthmi	r5, r5
 800602e:	6031      	str	r1, [r6, #0]
 8006030:	07d9      	lsls	r1, r3, #31
 8006032:	bf44      	itt	mi
 8006034:	f043 0320 	orrmi.w	r3, r3, #32
 8006038:	6023      	strmi	r3, [r4, #0]
 800603a:	b11d      	cbz	r5, 8006044 <_printf_i+0x1a0>
 800603c:	2310      	movs	r3, #16
 800603e:	e7ab      	b.n	8005f98 <_printf_i+0xf4>
 8006040:	4826      	ldr	r0, [pc, #152]	@ (80060dc <_printf_i+0x238>)
 8006042:	e7e9      	b.n	8006018 <_printf_i+0x174>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	f023 0320 	bic.w	r3, r3, #32
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	e7f6      	b.n	800603c <_printf_i+0x198>
 800604e:	4616      	mov	r6, r2
 8006050:	e7bd      	b.n	8005fce <_printf_i+0x12a>
 8006052:	6833      	ldr	r3, [r6, #0]
 8006054:	6825      	ldr	r5, [r4, #0]
 8006056:	1d18      	adds	r0, r3, #4
 8006058:	6961      	ldr	r1, [r4, #20]
 800605a:	6030      	str	r0, [r6, #0]
 800605c:	062e      	lsls	r6, r5, #24
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	d501      	bpl.n	8006066 <_printf_i+0x1c2>
 8006062:	6019      	str	r1, [r3, #0]
 8006064:	e002      	b.n	800606c <_printf_i+0x1c8>
 8006066:	0668      	lsls	r0, r5, #25
 8006068:	d5fb      	bpl.n	8006062 <_printf_i+0x1be>
 800606a:	8019      	strh	r1, [r3, #0]
 800606c:	2300      	movs	r3, #0
 800606e:	4616      	mov	r6, r2
 8006070:	6123      	str	r3, [r4, #16]
 8006072:	e7bc      	b.n	8005fee <_printf_i+0x14a>
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	2100      	movs	r1, #0
 8006078:	1d1a      	adds	r2, r3, #4
 800607a:	6032      	str	r2, [r6, #0]
 800607c:	681e      	ldr	r6, [r3, #0]
 800607e:	6862      	ldr	r2, [r4, #4]
 8006080:	4630      	mov	r0, r6
 8006082:	f000 f8ed 	bl	8006260 <memchr>
 8006086:	b108      	cbz	r0, 800608c <_printf_i+0x1e8>
 8006088:	1b80      	subs	r0, r0, r6
 800608a:	6060      	str	r0, [r4, #4]
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	6123      	str	r3, [r4, #16]
 8006090:	2300      	movs	r3, #0
 8006092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006096:	e7aa      	b.n	8005fee <_printf_i+0x14a>
 8006098:	4632      	mov	r2, r6
 800609a:	4649      	mov	r1, r9
 800609c:	4640      	mov	r0, r8
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	47d0      	blx	sl
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0ad      	beq.n	8006002 <_printf_i+0x15e>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	079b      	lsls	r3, r3, #30
 80060aa:	d413      	bmi.n	80060d4 <_printf_i+0x230>
 80060ac:	68e0      	ldr	r0, [r4, #12]
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	4298      	cmp	r0, r3
 80060b2:	bfb8      	it	lt
 80060b4:	4618      	movlt	r0, r3
 80060b6:	e7a6      	b.n	8006006 <_printf_i+0x162>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4632      	mov	r2, r6
 80060bc:	4649      	mov	r1, r9
 80060be:	4640      	mov	r0, r8
 80060c0:	47d0      	blx	sl
 80060c2:	3001      	adds	r0, #1
 80060c4:	d09d      	beq.n	8006002 <_printf_i+0x15e>
 80060c6:	3501      	adds	r5, #1
 80060c8:	68e3      	ldr	r3, [r4, #12]
 80060ca:	9903      	ldr	r1, [sp, #12]
 80060cc:	1a5b      	subs	r3, r3, r1
 80060ce:	42ab      	cmp	r3, r5
 80060d0:	dcf2      	bgt.n	80060b8 <_printf_i+0x214>
 80060d2:	e7eb      	b.n	80060ac <_printf_i+0x208>
 80060d4:	2500      	movs	r5, #0
 80060d6:	f104 0619 	add.w	r6, r4, #25
 80060da:	e7f5      	b.n	80060c8 <_printf_i+0x224>
 80060dc:	08006acb 	.word	0x08006acb
 80060e0:	08006adc 	.word	0x08006adc

080060e4 <__swbuf_r>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	460e      	mov	r6, r1
 80060e8:	4614      	mov	r4, r2
 80060ea:	4605      	mov	r5, r0
 80060ec:	b118      	cbz	r0, 80060f6 <__swbuf_r+0x12>
 80060ee:	6a03      	ldr	r3, [r0, #32]
 80060f0:	b90b      	cbnz	r3, 80060f6 <__swbuf_r+0x12>
 80060f2:	f7ff f99b 	bl	800542c <__sinit>
 80060f6:	69a3      	ldr	r3, [r4, #24]
 80060f8:	60a3      	str	r3, [r4, #8]
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	071a      	lsls	r2, r3, #28
 80060fe:	d501      	bpl.n	8006104 <__swbuf_r+0x20>
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	b943      	cbnz	r3, 8006116 <__swbuf_r+0x32>
 8006104:	4621      	mov	r1, r4
 8006106:	4628      	mov	r0, r5
 8006108:	f000 f82a 	bl	8006160 <__swsetup_r>
 800610c:	b118      	cbz	r0, 8006116 <__swbuf_r+0x32>
 800610e:	f04f 37ff 	mov.w	r7, #4294967295
 8006112:	4638      	mov	r0, r7
 8006114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	6922      	ldr	r2, [r4, #16]
 800611a:	b2f6      	uxtb	r6, r6
 800611c:	1a98      	subs	r0, r3, r2
 800611e:	6963      	ldr	r3, [r4, #20]
 8006120:	4637      	mov	r7, r6
 8006122:	4283      	cmp	r3, r0
 8006124:	dc05      	bgt.n	8006132 <__swbuf_r+0x4e>
 8006126:	4621      	mov	r1, r4
 8006128:	4628      	mov	r0, r5
 800612a:	f7ff f8b7 	bl	800529c <_fflush_r>
 800612e:	2800      	cmp	r0, #0
 8006130:	d1ed      	bne.n	800610e <__swbuf_r+0x2a>
 8006132:	68a3      	ldr	r3, [r4, #8]
 8006134:	3b01      	subs	r3, #1
 8006136:	60a3      	str	r3, [r4, #8]
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	6022      	str	r2, [r4, #0]
 800613e:	701e      	strb	r6, [r3, #0]
 8006140:	6962      	ldr	r2, [r4, #20]
 8006142:	1c43      	adds	r3, r0, #1
 8006144:	429a      	cmp	r2, r3
 8006146:	d004      	beq.n	8006152 <__swbuf_r+0x6e>
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	07db      	lsls	r3, r3, #31
 800614c:	d5e1      	bpl.n	8006112 <__swbuf_r+0x2e>
 800614e:	2e0a      	cmp	r6, #10
 8006150:	d1df      	bne.n	8006112 <__swbuf_r+0x2e>
 8006152:	4621      	mov	r1, r4
 8006154:	4628      	mov	r0, r5
 8006156:	f7ff f8a1 	bl	800529c <_fflush_r>
 800615a:	2800      	cmp	r0, #0
 800615c:	d0d9      	beq.n	8006112 <__swbuf_r+0x2e>
 800615e:	e7d6      	b.n	800610e <__swbuf_r+0x2a>

08006160 <__swsetup_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4b29      	ldr	r3, [pc, #164]	@ (8006208 <__swsetup_r+0xa8>)
 8006164:	4605      	mov	r5, r0
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	460c      	mov	r4, r1
 800616a:	b118      	cbz	r0, 8006174 <__swsetup_r+0x14>
 800616c:	6a03      	ldr	r3, [r0, #32]
 800616e:	b90b      	cbnz	r3, 8006174 <__swsetup_r+0x14>
 8006170:	f7ff f95c 	bl	800542c <__sinit>
 8006174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006178:	0719      	lsls	r1, r3, #28
 800617a:	d422      	bmi.n	80061c2 <__swsetup_r+0x62>
 800617c:	06da      	lsls	r2, r3, #27
 800617e:	d407      	bmi.n	8006190 <__swsetup_r+0x30>
 8006180:	2209      	movs	r2, #9
 8006182:	602a      	str	r2, [r5, #0]
 8006184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	81a3      	strh	r3, [r4, #12]
 800618e:	e033      	b.n	80061f8 <__swsetup_r+0x98>
 8006190:	0758      	lsls	r0, r3, #29
 8006192:	d512      	bpl.n	80061ba <__swsetup_r+0x5a>
 8006194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006196:	b141      	cbz	r1, 80061aa <__swsetup_r+0x4a>
 8006198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800619c:	4299      	cmp	r1, r3
 800619e:	d002      	beq.n	80061a6 <__swsetup_r+0x46>
 80061a0:	4628      	mov	r0, r5
 80061a2:	f7ff fa7f 	bl	80056a4 <_free_r>
 80061a6:	2300      	movs	r3, #0
 80061a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	2300      	movs	r3, #0
 80061b4:	6063      	str	r3, [r4, #4]
 80061b6:	6923      	ldr	r3, [r4, #16]
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	f043 0308 	orr.w	r3, r3, #8
 80061c0:	81a3      	strh	r3, [r4, #12]
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	b94b      	cbnz	r3, 80061da <__swsetup_r+0x7a>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061d0:	d003      	beq.n	80061da <__swsetup_r+0x7a>
 80061d2:	4621      	mov	r1, r4
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 f8b2 	bl	800633e <__smakebuf_r>
 80061da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061de:	f013 0201 	ands.w	r2, r3, #1
 80061e2:	d00a      	beq.n	80061fa <__swsetup_r+0x9a>
 80061e4:	2200      	movs	r2, #0
 80061e6:	60a2      	str	r2, [r4, #8]
 80061e8:	6962      	ldr	r2, [r4, #20]
 80061ea:	4252      	negs	r2, r2
 80061ec:	61a2      	str	r2, [r4, #24]
 80061ee:	6922      	ldr	r2, [r4, #16]
 80061f0:	b942      	cbnz	r2, 8006204 <__swsetup_r+0xa4>
 80061f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061f6:	d1c5      	bne.n	8006184 <__swsetup_r+0x24>
 80061f8:	bd38      	pop	{r3, r4, r5, pc}
 80061fa:	0799      	lsls	r1, r3, #30
 80061fc:	bf58      	it	pl
 80061fe:	6962      	ldrpl	r2, [r4, #20]
 8006200:	60a2      	str	r2, [r4, #8]
 8006202:	e7f4      	b.n	80061ee <__swsetup_r+0x8e>
 8006204:	2000      	movs	r0, #0
 8006206:	e7f7      	b.n	80061f8 <__swsetup_r+0x98>
 8006208:	20000054 	.word	0x20000054

0800620c <memmove>:
 800620c:	4288      	cmp	r0, r1
 800620e:	b510      	push	{r4, lr}
 8006210:	eb01 0402 	add.w	r4, r1, r2
 8006214:	d902      	bls.n	800621c <memmove+0x10>
 8006216:	4284      	cmp	r4, r0
 8006218:	4623      	mov	r3, r4
 800621a:	d807      	bhi.n	800622c <memmove+0x20>
 800621c:	1e43      	subs	r3, r0, #1
 800621e:	42a1      	cmp	r1, r4
 8006220:	d008      	beq.n	8006234 <memmove+0x28>
 8006222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800622a:	e7f8      	b.n	800621e <memmove+0x12>
 800622c:	4601      	mov	r1, r0
 800622e:	4402      	add	r2, r0
 8006230:	428a      	cmp	r2, r1
 8006232:	d100      	bne.n	8006236 <memmove+0x2a>
 8006234:	bd10      	pop	{r4, pc}
 8006236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800623a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800623e:	e7f7      	b.n	8006230 <memmove+0x24>

08006240 <_sbrk_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	2300      	movs	r3, #0
 8006244:	4d05      	ldr	r5, [pc, #20]	@ (800625c <_sbrk_r+0x1c>)
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fa fec6 	bl	8000fdc <_sbrk>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_sbrk_r+0x1a>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_sbrk_r+0x1a>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	200004d0 	.word	0x200004d0

08006260 <memchr>:
 8006260:	4603      	mov	r3, r0
 8006262:	b510      	push	{r4, lr}
 8006264:	b2c9      	uxtb	r1, r1
 8006266:	4402      	add	r2, r0
 8006268:	4293      	cmp	r3, r2
 800626a:	4618      	mov	r0, r3
 800626c:	d101      	bne.n	8006272 <memchr+0x12>
 800626e:	2000      	movs	r0, #0
 8006270:	e003      	b.n	800627a <memchr+0x1a>
 8006272:	7804      	ldrb	r4, [r0, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	428c      	cmp	r4, r1
 8006278:	d1f6      	bne.n	8006268 <memchr+0x8>
 800627a:	bd10      	pop	{r4, pc}

0800627c <memcpy>:
 800627c:	440a      	add	r2, r1
 800627e:	4291      	cmp	r1, r2
 8006280:	f100 33ff 	add.w	r3, r0, #4294967295
 8006284:	d100      	bne.n	8006288 <memcpy+0xc>
 8006286:	4770      	bx	lr
 8006288:	b510      	push	{r4, lr}
 800628a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800628e:	4291      	cmp	r1, r2
 8006290:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006294:	d1f9      	bne.n	800628a <memcpy+0xe>
 8006296:	bd10      	pop	{r4, pc}

08006298 <_realloc_r>:
 8006298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629c:	4680      	mov	r8, r0
 800629e:	4615      	mov	r5, r2
 80062a0:	460c      	mov	r4, r1
 80062a2:	b921      	cbnz	r1, 80062ae <_realloc_r+0x16>
 80062a4:	4611      	mov	r1, r2
 80062a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062aa:	f7ff ba65 	b.w	8005778 <_malloc_r>
 80062ae:	b92a      	cbnz	r2, 80062bc <_realloc_r+0x24>
 80062b0:	f7ff f9f8 	bl	80056a4 <_free_r>
 80062b4:	2400      	movs	r4, #0
 80062b6:	4620      	mov	r0, r4
 80062b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062bc:	f000 f89e 	bl	80063fc <_malloc_usable_size_r>
 80062c0:	4285      	cmp	r5, r0
 80062c2:	4606      	mov	r6, r0
 80062c4:	d802      	bhi.n	80062cc <_realloc_r+0x34>
 80062c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062ca:	d8f4      	bhi.n	80062b6 <_realloc_r+0x1e>
 80062cc:	4629      	mov	r1, r5
 80062ce:	4640      	mov	r0, r8
 80062d0:	f7ff fa52 	bl	8005778 <_malloc_r>
 80062d4:	4607      	mov	r7, r0
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d0ec      	beq.n	80062b4 <_realloc_r+0x1c>
 80062da:	42b5      	cmp	r5, r6
 80062dc:	462a      	mov	r2, r5
 80062de:	4621      	mov	r1, r4
 80062e0:	bf28      	it	cs
 80062e2:	4632      	movcs	r2, r6
 80062e4:	f7ff ffca 	bl	800627c <memcpy>
 80062e8:	4621      	mov	r1, r4
 80062ea:	4640      	mov	r0, r8
 80062ec:	f7ff f9da 	bl	80056a4 <_free_r>
 80062f0:	463c      	mov	r4, r7
 80062f2:	e7e0      	b.n	80062b6 <_realloc_r+0x1e>

080062f4 <__swhatbuf_r>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	460c      	mov	r4, r1
 80062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fc:	4615      	mov	r5, r2
 80062fe:	2900      	cmp	r1, #0
 8006300:	461e      	mov	r6, r3
 8006302:	b096      	sub	sp, #88	@ 0x58
 8006304:	da0c      	bge.n	8006320 <__swhatbuf_r+0x2c>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	2100      	movs	r1, #0
 800630a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800630e:	bf14      	ite	ne
 8006310:	2340      	movne	r3, #64	@ 0x40
 8006312:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006316:	2000      	movs	r0, #0
 8006318:	6031      	str	r1, [r6, #0]
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	b016      	add	sp, #88	@ 0x58
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	466a      	mov	r2, sp
 8006322:	f000 f849 	bl	80063b8 <_fstat_r>
 8006326:	2800      	cmp	r0, #0
 8006328:	dbed      	blt.n	8006306 <__swhatbuf_r+0x12>
 800632a:	9901      	ldr	r1, [sp, #4]
 800632c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006330:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006334:	4259      	negs	r1, r3
 8006336:	4159      	adcs	r1, r3
 8006338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800633c:	e7eb      	b.n	8006316 <__swhatbuf_r+0x22>

0800633e <__smakebuf_r>:
 800633e:	898b      	ldrh	r3, [r1, #12]
 8006340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006342:	079d      	lsls	r5, r3, #30
 8006344:	4606      	mov	r6, r0
 8006346:	460c      	mov	r4, r1
 8006348:	d507      	bpl.n	800635a <__smakebuf_r+0x1c>
 800634a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	2301      	movs	r3, #1
 8006354:	6163      	str	r3, [r4, #20]
 8006356:	b003      	add	sp, #12
 8006358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800635a:	466a      	mov	r2, sp
 800635c:	ab01      	add	r3, sp, #4
 800635e:	f7ff ffc9 	bl	80062f4 <__swhatbuf_r>
 8006362:	9f00      	ldr	r7, [sp, #0]
 8006364:	4605      	mov	r5, r0
 8006366:	4639      	mov	r1, r7
 8006368:	4630      	mov	r0, r6
 800636a:	f7ff fa05 	bl	8005778 <_malloc_r>
 800636e:	b948      	cbnz	r0, 8006384 <__smakebuf_r+0x46>
 8006370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006374:	059a      	lsls	r2, r3, #22
 8006376:	d4ee      	bmi.n	8006356 <__smakebuf_r+0x18>
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	e7e2      	b.n	800634a <__smakebuf_r+0xc>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800638a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	9b01      	ldr	r3, [sp, #4]
 8006392:	6020      	str	r0, [r4, #0]
 8006394:	b15b      	cbz	r3, 80063ae <__smakebuf_r+0x70>
 8006396:	4630      	mov	r0, r6
 8006398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800639c:	f000 f81e 	bl	80063dc <_isatty_r>
 80063a0:	b128      	cbz	r0, 80063ae <__smakebuf_r+0x70>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f023 0303 	bic.w	r3, r3, #3
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	431d      	orrs	r5, r3
 80063b2:	81a5      	strh	r5, [r4, #12]
 80063b4:	e7cf      	b.n	8006356 <__smakebuf_r+0x18>
	...

080063b8 <_fstat_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	2300      	movs	r3, #0
 80063bc:	4d06      	ldr	r5, [pc, #24]	@ (80063d8 <_fstat_r+0x20>)
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	602b      	str	r3, [r5, #0]
 80063c6:	f7fa fde3 	bl	8000f90 <_fstat>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	d102      	bne.n	80063d4 <_fstat_r+0x1c>
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	b103      	cbz	r3, 80063d4 <_fstat_r+0x1c>
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	bd38      	pop	{r3, r4, r5, pc}
 80063d6:	bf00      	nop
 80063d8:	200004d0 	.word	0x200004d0

080063dc <_isatty_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	2300      	movs	r3, #0
 80063e0:	4d05      	ldr	r5, [pc, #20]	@ (80063f8 <_isatty_r+0x1c>)
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	f7fa fde1 	bl	8000fae <_isatty>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_isatty_r+0x1a>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_isatty_r+0x1a>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	200004d0 	.word	0x200004d0

080063fc <_malloc_usable_size_r>:
 80063fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006400:	1f18      	subs	r0, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfbc      	itt	lt
 8006406:	580b      	ldrlt	r3, [r1, r0]
 8006408:	18c0      	addlt	r0, r0, r3
 800640a:	4770      	bx	lr

0800640c <_init>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr

08006418 <_fini>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	bf00      	nop
 800641c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641e:	bc08      	pop	{r3}
 8006420:	469e      	mov	lr, r3
 8006422:	4770      	bx	lr
